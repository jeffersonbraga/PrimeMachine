package br.com.opsocial.server.actions.monitorings;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import javax.persistence.OptimisticLockException;

import org.jinstagram.Instagram;
import org.jinstagram.entity.media.MediaInfoFeed;
import org.jinstagram.exceptions.InstagramException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.application.MonitoringDTO;
import br.com.opsocial.client.entity.instagram.InstagramPostMonitoringDTO;
import br.com.opsocial.client.entity.monitoring.MonitoringHistoricFilterDTO;
import br.com.opsocial.client.entity.monitoring.PostMonitoringDTO;
import br.com.opsocial.client.entity.mount.MountDTO;
import br.com.opsocial.client.entity.primitive.PersistentList;
import br.com.opsocial.client.entity.primitive.StringList;
import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.ejb.das.MaintenanceBlogPostMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceGooglePlusPostMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceInstagramPostMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringPostTagRemote;
import br.com.opsocial.ejb.das.MaintenanceNewsPostMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceReclameAquiPostMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceTwitterPostMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceYoutubePostMonitoringRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.blogs.BlogPostMonitoring;
import br.com.opsocial.ejb.entity.google.GooglePlusPostMonitoring;
import br.com.opsocial.ejb.entity.instagram.InstagramPostMonitoring;
import br.com.opsocial.ejb.entity.news.NewsPostMonitoring;
import br.com.opsocial.ejb.entity.reclameaqui.ReclameAquiPostMonitoring;
import br.com.opsocial.ejb.entity.twitter.TwitterPostMonitoring;
import br.com.opsocial.ejb.entity.youtube.YoutubePostMonitoring;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.monitorings.pdf.MonitoringPostsPDF;
import br.com.opsocial.server.utils.networksintegrations.InstagramIntegration;

@RestController
@RequestMapping("opsocial")
public class ExportHistoryPDFAction extends ServerAction {

	@Override
	@RequestMapping(value = "/export_history_pdf",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		MonitoringDTO monitoring = (MonitoringDTO) getParameters().get("monitoring");
		Long startDate = ((br.com.opsocial.client.entity.primitive.Long) getParameters().get("startDate")).getValue();
		Long endDate = ((br.com.opsocial.client.entity.primitive.Long) getParameters().get("endDate")).getValue();
		StringUtil qualification = (StringUtil) getParameters().get("qualification");
		StringList networks = (StringList) getParameters().get("networks");
		List<Long> monitoringTags = (List<Long>) getParameters().get("monitoringTags");
		PersistentList<StringUtil> monitoringTerms = (PersistentList<StringUtil>) getParameters().get("monitoringTerms");
		StringList monitoringWords = (StringList) getParameters().get("monitoringWords");
		
		List<String> listMonitoringTerms = new ArrayList<String>();
		
		if(monitoringTerms != null && !monitoringTerms.getPersistences().isEmpty()) {
			for (StringUtil term : monitoringTerms.getPersistences()) {
				listMonitoringTerms.add(term.getValue()); 
			}
		} else {
			listMonitoringTerms = null;
		}
		
//		MaintenanceFacePostMonitoringRemote faceRemote = (MaintenanceFacePostMonitoringRemote) RecoverMaintenance.recoverMaintenance("FacePostMonitoring");
		MaintenanceTwitterPostMonitoringRemote twitterRemote = (MaintenanceTwitterPostMonitoringRemote) RecoverMaintenance.recoverMaintenance("TwitterPostMonitoring");
		MaintenanceGooglePlusPostMonitoringRemote googleRemote = (MaintenanceGooglePlusPostMonitoringRemote) RecoverMaintenance.recoverMaintenance("GooglePlusPostMonitoring");
		MaintenanceYoutubePostMonitoringRemote youtubeRemote = (MaintenanceYoutubePostMonitoringRemote) RecoverMaintenance.recoverMaintenance("YoutubePostMonitoring");
		MaintenanceInstagramPostMonitoringRemote instagramRemote = (MaintenanceInstagramPostMonitoringRemote) RecoverMaintenance.recoverMaintenance("InstagramPostMonitoring");
		MaintenanceReclameAquiPostMonitoringRemote reclameAquiRemote = (MaintenanceReclameAquiPostMonitoringRemote) RecoverMaintenance.recoverMaintenance("ReclameAquiPostMonitoring");
		MaintenanceNewsPostMonitoringRemote newsRemote = (MaintenanceNewsPostMonitoringRemote) RecoverMaintenance.recoverMaintenance("NewsPostMonitoring");
		MaintenanceBlogPostMonitoringRemote blogRemote = (MaintenanceBlogPostMonitoringRemote) RecoverMaintenance.recoverMaintenance("BlogPostMonitoring");
		
		MaintenanceMonitoringPostTagRemote monitoringPostTagRemote = (MaintenanceMonitoringPostTagRemote)
				RecoverMaintenance.recoverMaintenance("MonitoringPostTag");
		
		setParameters(new HashMap<String, Object>());
		
		Long counts = 0L;

//		if(networks.getValue().contains("facebook")) {
//			counts += faceRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags.getValue());
//		}
		if(networks.getValue().contains("twitter")) {
			counts += twitterRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		if(networks.getValue().contains("google")) {
			counts += googleRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		if(networks.getValue().contains("youtube")) {
			counts += youtubeRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		if(networks.getValue().contains("instagram")) {
			counts += instagramRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		if(networks.getValue().contains("reclameaqui")) {
			counts += reclameAquiRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		if(networks.getValue().contains("news")) {
			counts += newsRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		if(networks.getValue().contains("blogs")) {
			counts += blogRemote.getByIntervalCount(monitoring.getIdMonitoring(), startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, 
					monitoringTags != null ? monitoringTags : null, 
					listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null);
		}
		
		if(counts > 2000) {
			getParameters().put("counts", new br.com.opsocial.client.entity.primitive.Long(counts));
		} else {
		
			List<PostMonitoringDTO> postMonitoringDTOs = new ArrayList<PostMonitoringDTO>();
			
//			if(networks.getValue().contains("facebook")) {
//			
//				// Facebook
//				
//				List<FacePostMonitoring> facebookPosts = faceRemote.getByInterval(monitoring.getIdMonitoring(), 
//						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags.getValue(), null, null, null);
//				
//				for(FacePostMonitoring facePostMonitoring : facebookPosts) {
//					
//					PostMonitoringDTO postMonitoringDTO = MountDTO.mountFacePostMonitoringNoHtml(facePostMonitoring);
//					postMonitoringDTO.setNetwork(ProfileDTO.FACEBOOK);
//					postMonitoringDTO.setCreatedTime(facePostMonitoring.getFacebookPost().getCreatedTime());
//					postMonitoringDTO.setMonitoringPostTags(
//							MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(facePostMonitoring.getFacebookPost().getPostId(), 
//								monitoring.getIdMonitoring(), facePostMonitoring.getTerm(), Profile.FACEBOOK)));
//					
//					postMonitoringDTOs.add(postMonitoringDTO);
//					
//				}
//			}
			
			if(networks.getValue().contains("twitter")) {
				
				// Twitter
				
				List<TwitterPostMonitoring> twitterPosts = twitterRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(TwitterPostMonitoring twitterPostMonitoring : twitterPosts) {
					
					PostMonitoringDTO postMonitoringDTO = MountDTO.mountTwitterPostMonitoring(twitterPostMonitoring);
					postMonitoringDTO.setNetwork(Profile.TWITTER);
					postMonitoringDTO.setCreatedTime(twitterPostMonitoring.getTwitterPost().getCreatedAt());
					postMonitoringDTO.setMonitoringPostTags(
							MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(twitterPostMonitoring.getTwitterPost().getStatusId().toString(), 
								monitoring.getIdMonitoring(), twitterPostMonitoring.getTerm(), Profile.TWITTER)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}
			
			if(networks.getValue().contains("google")) {
			
				// Google+
				
				List<GooglePlusPostMonitoring> googlePosts = googleRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(GooglePlusPostMonitoring googlePlusPostMonitoring : googlePosts) {
					
					PostMonitoringDTO postMonitoringDTO = MountDTO.mountGooglePlusPostMonitoring(googlePlusPostMonitoring);
					postMonitoringDTO.setNetwork(Profile.GOOGLE);
					postMonitoringDTO.setCreatedTime(googlePlusPostMonitoring.getGooglePlusPost().getPublished());
					postMonitoringDTO.setMonitoringPostTags(
							MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(googlePlusPostMonitoring.getGooglePlusPost().getActivityId(), 
								monitoring.getIdMonitoring(), googlePlusPostMonitoring.getTerm(), Profile.GOOGLE)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}
			
			if(networks.getValue().contains("youtube")) {
			
				// Youtube
				
				List<YoutubePostMonitoring> youtubePosts = youtubeRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(YoutubePostMonitoring youtubePostMonitoring : youtubePosts) {
					
					PostMonitoringDTO postMonitoringDTO = MountDTO.mountYoutubePostMonitoring(youtubePostMonitoring);
					postMonitoringDTO.setNetwork(Profile.YOUTUBE);
					postMonitoringDTO.setCreatedTime(youtubePostMonitoring.getYoutubePost().getPublishedAt());
					postMonitoringDTO.setMonitoringPostTags(
							MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(youtubePostMonitoring.getYoutubePost().getVideoId(), 
									monitoring.getIdMonitoring(), youtubePostMonitoring.getTerm(), Profile.YOUTUBE)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}
			
			if(networks.getValue().contains("instagram")) {
				
				// Instagram
				
				List<InstagramPostMonitoring> instagramPosts = instagramRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(InstagramPostMonitoring instagramPostMonitoring : instagramPosts) {
					
					InstagramPostMonitoringDTO instagramPostMonitoringDTO = MountDTO.mountInstagramPostMonitoring(instagramPostMonitoring);
					
//					instagramPostMonitoringDTO.getInstagramPostDTO().setMediaLink(
//							recoverMediaLink(instagramPostMonitoringDTO.getInstagramPostDTO().getIdMedia()));
					
					PostMonitoringDTO postMonitoringDTO = instagramPostMonitoringDTO;
					postMonitoringDTO.setNetwork(Profile.INSTAGRAM);
					postMonitoringDTO.setCreatedTime(new Long(instagramPostMonitoring.getInstagramPost().getCreateTime()));
					postMonitoringDTO.setMonitoringPostTags(
							MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(instagramPostMonitoring.getInstagramPost().getIdMedia().toString(), 
									monitoring.getIdMonitoring(), instagramPostMonitoring.getTerm(), Profile.INSTAGRAM)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}
			
			if(networks.getValue().contains("reclameaqui")) {
				
				// ReclameAqui
				
				List<ReclameAquiPostMonitoring> reclameAquiPosts = reclameAquiRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(ReclameAquiPostMonitoring reclameAquiPostMonitoring : reclameAquiPosts) {
					
					PostMonitoringDTO postMonitoringDTO = MountDTO.mountReclameAquiPostMonitoring(reclameAquiPostMonitoring);
					postMonitoringDTO.setNetwork(Profile.RECLAMEAQUI);
					postMonitoringDTO.setCreatedTime(new Long(reclameAquiPostMonitoring.getReclameAquiPost().getCreatedTime()));
					postMonitoringDTO.setMonitoringPostTags(
							MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(reclameAquiPostMonitoring.getReclameAquiPost().getCacheId(), 
									monitoring.getIdMonitoring(), reclameAquiPostMonitoring.getTerm(), Profile.RECLAMEAQUI)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}
			
			if(networks.getValue().contains("news")) {
				
				// News
				
				List<NewsPostMonitoring> newsPosts = newsRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(NewsPostMonitoring newsPostMonitoring : newsPosts) {
					
					PostMonitoringDTO postMonitoringDTO = MountDTO.mountNewsPostMonitoring(newsPostMonitoring);
					postMonitoringDTO.setNetwork(Profile.NEWS);
					postMonitoringDTO.setCreatedTime(new Long(newsPostMonitoring.getNewsPost().getCreatedTime()));
					postMonitoringDTO.setMonitoringPostTags(MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(newsPostMonitoring.getNewsPost().getIdNewsPost().toString(), 
							monitoring.getIdMonitoring(), newsPostMonitoring.getTerm(), Profile.NEWS)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}

			if(networks.getValue().contains("blogs")) {

				// Blogs			
				List<BlogPostMonitoring> blogPosts = blogRemote.getByInterval(monitoring.getIdMonitoring(), 
						startDate / 1000, endDate / 1000, qualification != null ? qualification.getValue() : null, monitoringTags != null ? monitoringTags : null, 
								listMonitoringTerms != null ? listMonitoringTerms : null, monitoringWords != null ? monitoringWords.getValue() : null, 0, 2000);
				
				for(BlogPostMonitoring blogPostMonitoring : blogPosts) {
					
					PostMonitoringDTO postMonitoringDTO = MountDTO.mountBlogPostMonitoring(blogPostMonitoring);
					postMonitoringDTO.setNetwork(Profile.BLOGS);
					postMonitoringDTO.setCreatedTime(new Long(blogPostMonitoring.getBlogPost().getCreatedTime()));
					postMonitoringDTO.setMonitoringPostTags(MountDTO.mountMonitoringPostTag(monitoringPostTagRemote.listByMonitoringPost(blogPostMonitoring.getBlogPost().getIdBlogPost().toString(), 
							monitoring.getIdMonitoring(), blogPostMonitoring.getTerm(), Profile.BLOGS)));
					
					postMonitoringDTOs.add(postMonitoringDTO);
				}
			}
			
			Collections.sort(postMonitoringDTOs);
			
			MonitoringHistoricFilterDTO monitoringHistoricFilter = new MonitoringHistoricFilterDTO();
			monitoringHistoricFilter.setMonitoring(monitoring);
			monitoringHistoricFilter.setStartDate(startDate);
			monitoringHistoricFilter.setEndDate(endDate);
			monitoringHistoricFilter.setQualification(qualification);
			monitoringHistoricFilter.setMonitoringTags(monitoringTags);
			monitoringHistoricFilter.setNetworks(networks);
			monitoringHistoricFilter.setMonitoringTerms(listMonitoringTerms);
			monitoringHistoricFilter.setMonitoringWords(monitoringWords);
			
			MonitoringPostsPDF monitoringPostsPDF = new MonitoringPostsPDF(postMonitoringDTOs, monitoringHistoricFilter);
			monitoringPostsPDF.createPDF();
			
			getParameters().put("pdfToDownload", new StringUtil(monitoringPostsPDF.getFileName()));
		}
	}
	
	private String recoverMediaLink(long idMedia) throws InstagramException {
		
		Instagram instagram = new Instagram(InstagramIntegration.CLIENT_ID);
		
		MediaInfoFeed mediaInfoFeed = instagram.getMediaInfo(String.valueOf(idMedia)); 
		
		String link = null;
		
		if(mediaInfoFeed.getData() != null) {
			link = mediaInfoFeed.getData().getLink(); 
		}
		
		return link;
	}

}
