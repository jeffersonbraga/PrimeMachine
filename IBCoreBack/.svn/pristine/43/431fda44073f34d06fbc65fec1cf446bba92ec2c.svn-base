package br.com.opsocial.server.utils.instagram;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;

import br.com.opsocial.OpSocialBackApplication;
import br.com.opsocial.client.entity.mount.MountDTO;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.ProxyRegion;
import br.com.opsocial.ejb.entity.sets.Post;
import br.com.opsocial.ejb.entity.sets.PostAttachment;
import br.com.opsocial.server.security.SecurityUtils;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.aws.S3Integration;
import br.com.opsocial.server.utils.instagram.entities.Children;
import br.com.opsocial.server.utils.instagram.entities.Comment;
import br.com.opsocial.server.utils.instagram.entities.CommentFeed;
import br.com.opsocial.server.utils.instagram.entities.FollowerFeed;
import br.com.opsocial.server.utils.instagram.entities.FriendshipStatus;
import br.com.opsocial.server.utils.instagram.entities.MediaChildren;
import br.com.opsocial.server.utils.instagram.entities.Paging;
import br.com.opsocial.server.utils.instagram.entities.User;
import br.com.opsocial.server.utils.networksintegrations.FacebookIntegration;
import br.com.opsocial.server.utils.streams.StreamFollowers;
import br.com.opsocial.server.utils.streams.StreamPhoto;
import br.com.opsocial.server.utils.streams.StreamPost;
import br.com.opsocial.server.utils.streams.StreamPostComment;
import br.com.opsocial.server.utils.streams.StreamPostComments;
import br.com.opsocial.server.utils.streams.StreamPostPaging;
import facebook4j.Account;
import facebook4j.Facebook;
import facebook4j.FacebookException;
import facebook4j.RawAPIResponse;
import facebook4j.auth.AccessToken;

public class InstagramAPI {
	
	private InstagramPostHelper instagramPostHelper;
	
	public static final String INSTAGRAM_BUSINESS_ACCOUNT_FIELDS = "instagram_business_account";
	public static final String INSTAGRAM_USER_FIELDS = "name,username,ig_id,followers_count,follows_count,media_count,profile_picture_url";
	public static final String INSTAGRAM_MEDIA_FIELDS = "id,ig_id,caption,comments_count,like_count,media_type,media_url,permalink,thumbnail_url,timestamp,attachment{description,media{image},target,title,type,url}";
	public static final String INSTAGRAM_MEDIA_FIELDS_CARROUSEL = "children{media_url,permalink}";
	public static final String INSTAGRAM_COMMENT_FIELDS = "id,text,timestamp,media,user{id,username}";
	
	public InstagramAPI() {
		
	}
	
	public User getUser(String instagramBussinessAccountId, Facebook facebook) throws FacebookException {
		
		User user = null;
		
		try {
			
			Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("fields", INSTAGRAM_USER_FIELDS);
			
			RawAPIResponse res = facebook.callGetAPI(instagramBussinessAccountId, queryParameters);
			
			user = gson.fromJson(res.asString(), User.class);
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		}
		
		return user;
	}
	
	public String getInstagramBussinessAccountId(Account account, Facebook facebook) {
		
		String instagramBussinessAccountId = null;
		
		try {
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("fields", INSTAGRAM_BUSINESS_ACCOUNT_FIELDS);
			
			RawAPIResponse res = facebook.callGetAPI(account.getId(), queryParameters);
			
			JsonParser parser = new JsonParser();			
			JsonObject jsonResponse = parser.parse(res.asString()).getAsJsonObject();
			
			if(jsonResponse.has("instagram_business_account")) {
				instagramBussinessAccountId = jsonResponse.get("instagram_business_account").getAsJsonObject().get("id").getAsString();
			}
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			e.printStackTrace();
		}
		
		return instagramBussinessAccountId;
	}

	// WoopSocial
	public StreamPostComment comment(String postId, StreamPostComment streamPostComment, Profile profile) throws FacebookException {
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		try {
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("message", streamPostComment.getMessage());
			
			RawAPIResponse res = facebook.callPostAPI(postId + "/comments", queryParameters);
			
			JsonParser parser = new JsonParser();			
			JsonObject jsonResponse = parser.parse(res.asString()).getAsJsonObject();
			
			if(jsonResponse.has("id")) {
				
				String commentId = jsonResponse.get("id").getAsString();	
				streamPostComment = getComment(commentId, profile);
			}
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			e.printStackTrace();
		}
			
		return streamPostComment;
	}

	public boolean postFirstComment(String postId, String postFirstComment, Profile profile) throws FacebookException {

		boolean flag = false;
		AccessToken accessToken = new AccessToken(profile.getToken(), null);

		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);

		try {

			String mediaId = null;
			try {

				InstagramBusinessBO instagramBO = new InstagramBusinessBO();
				instagramBO.getMediaData(profile.getInstagramBusinessId(), profile);
				System.out.println(instagramBO.listaColetada.size());

				for (Object o : instagramBO.listaColetada) {		
					

					
					for (JsonElement jsonElement : ((JsonArray) o)) {
						
						String ig_id = ((Long) ((JsonObject) jsonElement).get("ig_id").getAsLong()).toString();
						if (ig_id.equals(postId)) {
							mediaId = ((Long) ((JsonObject) jsonElement).get("id").getAsLong()).toString();
							break;
						}
					}
				}

			} catch (com.face4j.facebook.exception.FacebookException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("message", postFirstComment);

			RawAPIResponse res = facebook.callPostAPI(mediaId + "/comments", queryParameters);

			JsonParser parser = new JsonParser();			
			JsonObject jsonResponse = parser.parse(res.asString()).getAsJsonObject();

			if(jsonResponse.has("id")) {

				String commentId = jsonResponse.get("id").getAsString();
				flag = true;
			}

		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			e.printStackTrace();
		}
			
		return flag;
	}
	
	public StreamPostComment getComment(String commentId, Profile profile) {
		
		StreamPostComment streamPostComment = new StreamPostComment();
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		try {
			
			Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("fields", INSTAGRAM_COMMENT_FIELDS);
			
			RawAPIResponse res = facebook.callGetAPI(commentId + "/", queryParameters);
			
			Comment comment = gson.fromJson(res.asString(), Comment.class);
			
			streamPostComment = MountDTO.mountStreamPostCommentForInstagram(comment);
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			e.printStackTrace();
		}
		
		return streamPostComment;
	}

//	// OpSocial
//	public StreamPostComment comment(String postId, StreamPostComment streamPostComment, Profile profile) {
//		
//		InstagramIntegration instagramIntegration = new InstagramIntegration();
//		
//		Instagram instagram = instagramIntegration.getInstagram(profile);
//		
//		try {
//			
//			MediaCommentResponse mediaCommentResponse = instagram.setMediaComments(postId, streamPostComment.getMessage());
//			
//			streamPostComment = MountDTO.mountStreamPostCommentForInstagram(mediaCommentResponse.getCommentData());
//			
//		} catch (InstagramException e) {
//			e.printStackTrace();
//		}
//		
//		return streamPostComment;
//	}
	
	// WoopSocial
	public Boolean follow(String userId, Profile profile) {
		
		ProxyRegion proxyRegion = UtilFunctions.getProxyRegion(profile.getAccount().getCountry(), ProxyRegion.ONE_MINUTE);
		
		instagramPostHelper = new InstagramPostHelper(profile.getInstagramCookies(), profile.getInstagramLastLoginTime(),
				proxyRegion, profile.getInstagramDevice(), UtilFunctions.getResidentialPort(proxyRegion));
		
		Boolean followed = false;
		
		try {
			
			FriendshipStatus friendshipStatus = instagramPostHelper.follow(profile, userId);
			
			if(instagramPostHelper != null && instagramPostHelper.isAccountAuthenticated() != null && !instagramPostHelper.isAccountAuthenticated()) {
				instagramPostHelper.deactivateProfileScheduling(profile.getIdProfile());	
			} else {
				
				followed = friendshipStatus.getFollowing();
				
				MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
				
				profile = profileRemote.getById(profile.getIdProfile());
				profile.setInstagramCookies(getCookies());
				profile.setInstagramLastLoginTime(getLastLoginTime());
				
				profileRemote.save(profile);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return followed;
	}
	
	// WoopSocial
	public Boolean unfollow(String userId, Profile profile) {
		
		ProxyRegion proxyRegion = UtilFunctions.getProxyRegion(profile.getAccount().getCountry(), ProxyRegion.ONE_MINUTE);
		
		instagramPostHelper = new InstagramPostHelper(profile.getInstagramCookies(), profile.getInstagramLastLoginTime(), 
				proxyRegion, profile.getInstagramDevice(), UtilFunctions.getResidentialPort(proxyRegion));
		
		Boolean unfollowed = false;
		
		try {
			
			FriendshipStatus friendshipStatus = instagramPostHelper.unfollow(profile, userId);
			
			if(instagramPostHelper != null && instagramPostHelper.isAccountAuthenticated() != null && !instagramPostHelper.isAccountAuthenticated()) {
				instagramPostHelper.deactivateProfileScheduling(profile.getIdProfile());	
			} else { 
				
				unfollowed = friendshipStatus.getFollowing();
				
				MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
				
				profile = profileRemote.getById(profile.getIdProfile());
				profile.setInstagramCookies(getCookies());
				profile.setInstagramLastLoginTime(getLastLoginTime());
				
				profileRemote.save(profile);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return unfollowed;
	}
	
	// WoopSocial
	public StreamFollowers getFollowers(Profile profile, StreamPostPaging paging) {
		
		StreamFollowers streamFollowers = new StreamFollowers();
		
		ProxyRegion proxyRegion = UtilFunctions.getProxyRegion(profile.getAccount().getCountry(), ProxyRegion.TEN_MINUTES);
		
		instagramPostHelper = new InstagramPostHelper(profile.getInstagramCookies(), profile.getInstagramLastLoginTime(),
				proxyRegion, profile.getInstagramDevice() ,UtilFunctions.getResidentialPort(proxyRegion));
		
		try {
			
			FollowerFeed followerFeed = instagramPostHelper.getFollowers(profile, paging.getUntil());

			if(instagramPostHelper != null && instagramPostHelper.isAccountAuthenticated() != null && !instagramPostHelper.isAccountAuthenticated()) {
				instagramPostHelper.deactivateProfileScheduling(profile.getIdProfile());	
			} else { 
				
				paging.setUntil(followerFeed.getNextMaxId());
				
				streamFollowers.setFollowers(MountDTO.mountFollowersForInstagram(followerFeed.getUsers(), profile.getIdProfile()));
				streamFollowers.setPaging(paging);
				
				MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
				
				profile = profileRemote.getById(profile.getIdProfile());
				profile.setInstagramCookies(getCookies());
				profile.setInstagramLastLoginTime(getLastLoginTime());
				
				profileRemote.save(profile);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return streamFollowers;
	}
	
	public CommentFeed getComments(Profile profile, String idMedia) throws FacebookException {
		
		CommentFeed commentFeed = new CommentFeed();
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		try {
			
			Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("fields", INSTAGRAM_COMMENT_FIELDS);
			
			RawAPIResponse res = facebook.callGetAPI(idMedia + "/comments", queryParameters);
			
			commentFeed = gson.fromJson(res.asString(), CommentFeed.class);
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			e.printStackTrace();
			// TODO: Used to treat bug on Instagram Graph API: https://developers.facebook.com/bugs/1800002713377666/
			commentFeed.setData(new ArrayList<Comment>());
		}

		return commentFeed;
	}
	
	// WoopSocial
	public StreamPostComments getComments(StreamPost streamPost, Profile profile) {
		
		StreamPostComments streamPostComments = new StreamPostComments();
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		try {
			
			Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("fields", INSTAGRAM_COMMENT_FIELDS);
			
			RawAPIResponse res = facebook.callGetAPI(streamPost.getPostId() + "/comments", queryParameters);
			
			CommentFeed commentFeed = gson.fromJson(res.asString(), CommentFeed.class);
			
			streamPostComments.setComments(MountDTO.mountStreamPostCommentsForInstagram(commentFeed));
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			e.printStackTrace();
			// TODO: Used to treat bug on Instagram Graph API: https://developers.facebook.com/bugs/1800002713377666/
			streamPostComments.setComments(new ArrayList<StreamPostComment>());
		}

		return streamPostComments;
	}
	
	public br.com.opsocial.server.utils.instagram.entities.MediaFeed getMedia(Profile profile, Paging paging, Integer limit) throws FacebookException {
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		br.com.opsocial.server.utils.instagram.entities.MediaFeed mediaFeed = new br.com.opsocial.server.utils.instagram.entities.MediaFeed();
		
		try {
			
			if(paging != null) {
				
				Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
				
				Map<String, String> queryParameters = new HashMap<String, String>();
				queryParameters.put("fields", INSTAGRAM_MEDIA_FIELDS);
				queryParameters.put("limit", limit.toString());
				queryParameters.put("after", paging.getCursors().getAfter());
				
				RawAPIResponse res = facebook.callGetAPI(profile.getInstagramBusinessId() + "/media", queryParameters);
				
				mediaFeed = gson.fromJson(res.asString(), br.com.opsocial.server.utils.instagram.entities.MediaFeed.class);
				
			} else {
				
				Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
				
				Map<String, String> queryParameters = new HashMap<String, String>();
				queryParameters.put("fields", INSTAGRAM_MEDIA_FIELDS);
				queryParameters.put("limit", limit.toString());
				
				RawAPIResponse res = facebook.callGetAPI(profile.getInstagramBusinessId() + "/media", queryParameters);
				
				mediaFeed = gson.fromJson(res.asString(), br.com.opsocial.server.utils.instagram.entities.MediaFeed.class);
			}
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		}
		
		return mediaFeed;
	}
	
	public List<StreamPhoto> getChildren(StreamPost streamPost, Profile profile) {
		
		List<StreamPhoto> streamPhotos = new ArrayList<StreamPhoto>();
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		MediaChildren mediaChildren;
		
		try {
			
			Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
			
			Map<String, String> queryParameters = new HashMap<String, String>();
			queryParameters.put("fields", INSTAGRAM_MEDIA_FIELDS_CARROUSEL);
			
			RawAPIResponse res = facebook.callGetAPI(streamPost.getPostId() , queryParameters);
			
			JsonParser parser = new JsonParser();			
			JsonObject jsonResponse = parser.parse(res.asString()).getAsJsonObject();
			
			mediaChildren = gson.fromJson(jsonResponse.get("children").getAsJsonObject().toString(), MediaChildren.class);
			
			for(Children children : mediaChildren.getData()) {
				
				StreamPhoto streamPhoto = new StreamPhoto();
				streamPhoto.setUrl(children.getMediaUrl());
				
				streamPhotos.add(streamPhoto);
			}
			
			streamPost.setStreamPhotos(streamPhotos);
			
		} catch (FacebookException e) {
			e.printStackTrace();
		}
		
		return streamPhotos;
	}
	
	// WopSocial.
	public List<StreamPost> getMyPosts(Profile profile, StreamPostPaging streamPostPaging) {
		
		List<StreamPost> streamPosts = new ArrayList<StreamPost>();
		
		AccessToken accessToken = new AccessToken(profile.getToken(), null);
		
		facebook4j.Facebook facebook = new FacebookIntegration().getFacebook(accessToken);
		
		br.com.opsocial.server.utils.instagram.entities.MediaFeed mediaFeed;
		
		try {
			
			if(streamPostPaging.getSince() != null) {
				
				Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
				
				Map<String, String> queryParameters = new HashMap<String, String>();
				queryParameters.put("fields", INSTAGRAM_MEDIA_FIELDS);
				queryParameters.put("limit", streamPostPaging.getLimit().toString());
				queryParameters.put("after", streamPostPaging.getSince());
				
				RawAPIResponse res = facebook.callGetAPI(profile.getInstagramBusinessId() + "/media", queryParameters);
				
				mediaFeed = gson.fromJson(res.asString(), br.com.opsocial.server.utils.instagram.entities.MediaFeed.class);
				
				if(mediaFeed.getData().size() > 0) {
					streamPostPaging.setSince(mediaFeed.getPaging().getCursors().getAfter());
				}
				
			} else {
				
				Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
				
				Map<String, String> queryParameters = new HashMap<String, String>();
				queryParameters.put("fields", INSTAGRAM_MEDIA_FIELDS);
				queryParameters.put("limit", streamPostPaging.getLimit().toString());
				
				RawAPIResponse res = facebook.callGetAPI(profile.getInstagramBusinessId() + "/media", queryParameters);
				
				mediaFeed = gson.fromJson(res.asString(), br.com.opsocial.server.utils.instagram.entities.MediaFeed.class);
				
				if(mediaFeed.getData().size() > 0) {
					streamPostPaging.setSince(mediaFeed.getPaging().getCursors().getAfter());
				}
			}
			
			streamPosts.addAll(MountDTO.mountStreamPostsForInstagram(mediaFeed.getData(), profile));
			
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (FacebookException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return streamPosts;
		
	}
	
	public boolean post(Post post, Profile profile) {

		Boolean wasSent = true;
		String imagePostsPath = OpSocialBackApplication.UPLOAD_DIR_IMAGES_POSTS;
		String videoPostsPath = OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS;

		try {

			if(post.getAppendType() != null && post.getAppendType().equals(Post.APPEND_PICTURE)) {
				
				ProxyRegion proxyRegion = UtilFunctions.getProxyRegion(profile.getAccount().getCountry(), ProxyRegion.TEN_MINUTES); 
				
				instagramPostHelper = new InstagramPostHelper(profile.getInstagramCookies(), profile.getInstagramLastLoginTime(), 
						proxyRegion, profile.getInstagramDevice(), UtilFunctions.getResidentialPort(proxyRegion));

				if(post.getTargetFeed().equals(Post.TIMELINE_FEED)) {
					
					PostAttachment pAttachment = post.getPostsAttachments().get(0);
					
					new S3Integration().downloadS3Object(S3Integration.WOOPSOCIAL_BUCKET_NAME, 
							S3Integration.WOOPSOCIAL_IMAGES_POSTS_FOLDER, pAttachment.getFileName(), imagePostsPath);
					
					wasSent = instagramPostHelper.uploadTimelinePhoto(profile, post.getText(), new File(imagePostsPath, pAttachment.getFileName()));
					
					if(wasSent && post.getHashtags() != null) {
						this.postFirstComment(instagramPostHelper.uploadedPostId, post.getHashtags(), profile);
					}
					
				} else if(post.getTargetFeed().equals(Post.STORY_FEED)) {
					wasSent = instagramPostHelper.uploadStoryPhoto(profile, post.getText(), post);
				}

			} else if(post.getAppendType() != null && post.getAppendType().equals(Post.APPEND_VIDEO)) {
				
				ProxyRegion proxyRegion = UtilFunctions.getProxyRegion(profile.getAccount().getCountry(), ProxyRegion.THIRTY_MINUTES); 
				
				instagramPostHelper = new InstagramPostHelper(profile.getInstagramCookies(), profile.getInstagramLastLoginTime(), 
						proxyRegion, profile.getInstagramDevice(), UtilFunctions.getResidentialPort(proxyRegion));

				PostAttachment pAttachment = post.getPostsAttachments().get(0);
				
				new S3Integration().downloadS3Object(S3Integration.WOOPSOCIAL_BUCKET_NAME, 
						S3Integration.WOOPSOCIAL_VIDEOS_POSTS_FOLDER, pAttachment.getFileName(), videoPostsPath);
				
				if(post.getTargetFeed().equals(Post.TIMELINE_FEED)) {
					wasSent = instagramPostHelper.uploadTimelineVideo(profile, post, new File(videoPostsPath, pAttachment.getFileName()));
				} else if(post.getTargetFeed().equals(Post.STORY_FEED)) {
					wasSent = instagramPostHelper.uploadStoryVideo(profile, post, new File(videoPostsPath, pAttachment.getFileName()));
				}

			} else if(post.getAppendType().equals(Post.APPEND_ALBUM)) {
				
				ProxyRegion proxyRegion = UtilFunctions.getProxyRegion(profile.getAccount().getCountry(), ProxyRegion.THIRTY_MINUTES); 
				
				instagramPostHelper = new InstagramPostHelper(profile.getInstagramCookies(), profile.getInstagramLastLoginTime(), 
						proxyRegion, profile.getInstagramDevice(), UtilFunctions.getResidentialPort(proxyRegion));
				
				wasSent = instagramPostHelper.uploadTimelineAlbum(profile, post);
				
			} else if(post.getAppendType().equals(Post.APPEND_RESUME)) {
				wasSent = false;
			}

			if(!wasSent && (instagramPostHelper != null) && (instagramPostHelper.isAccountAuthenticated() != null) && (!instagramPostHelper.isAccountAuthenticated())) {
				instagramPostHelper.deactivateProfileScheduling(profile.getIdProfile());
			}

		} catch (Exception e) {
			wasSent = false;
			e.printStackTrace();
		}

		return wasSent;
	}

	public String extractSendImageErrorMessage() {
		return instagramPostHelper.extractSendImageErrorMessage();
	}

	public String getCookies() {
		return instagramPostHelper.getCookies();
	}

	public boolean tryToPostAgain() {
		return instagramPostHelper.tryToPostAgain();
	}

	public Long getLastLoginTime() {
		return instagramPostHelper.getLastLoginTime();
	}

	public void setLastLoginTime(Long lastLoginTime) {
		instagramPostHelper.setLastLoginTime(lastLoginTime);
	}
	
}
