package br.com.opsocial.server.actions.monitorings;

import javax.persistence.OptimisticLockException;

import br.com.opsocial.client.entity.application.MonitoringDTO;
import br.com.opsocial.client.entity.monitoring.MonitoringReportDTO;
import br.com.opsocial.client.entity.mount.MountDTO;
import br.com.opsocial.client.entity.primitive.Date;
import br.com.opsocial.ejb.das.MaintenanceMonitoringTagRemote;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.GenericDateInterval;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.monitorings.UtilMonitorings;

public class MonitoringReportAction extends ServerAction {

	private MonitoringDTO monitoring;
	private Integer period;
	
	private GenericDateInterval genericDateInterval;
	
	@Override
	public void doAction() throws Exception, OptimisticLockException {
		
		monitoring = (MonitoringDTO) getParameters().get("monitoring");
		
		if(getParameters().containsKey("period")) {
			
			period = ((br.com.opsocial.client.entity.primitive.Integer) getParameters().get("period")).getValue(); 
			
			genericDateInterval = UtilMonitorings.getReportDatesByPeriod(period, monitoring);
		} else {

			java.util.Date dateFrom = ((Date) getParameters().get("dateFrom")).getValue();
            java.util.Date dateUntil = ((Date) getParameters().get("dateUntil")).getValue();
            
            genericDateInterval = new GenericDateInterval(UtilFunctions.getMidnightDateNoDaylightTime(dateFrom), 
            											  UtilFunctions.getMidnightDateNoDaylightTime(dateUntil));
		}
		
		MaintenanceMonitoringTagRemote monitoringTagRemote = (MaintenanceMonitoringTagRemote) RecoverMaintenance.recoverMaintenance("MonitoringTag");
		
		monitoring.setMonitoringTags(MountDTO.mountMonitoringTag(
				monitoringTagRemote.listByMonitoring(monitoring.getIdMonitoring(), monitoring.getAccount().getIdAccount())));
		
		MonitoringReportDTO monitoringReportDTO = UtilMonitorings.mountMonitoringReportDTO(monitoring, genericDateInterval, UtilMonitorings.WEB);
		
		getParameters().put("monitoringReport", monitoringReportDTO);	
	}	
}
