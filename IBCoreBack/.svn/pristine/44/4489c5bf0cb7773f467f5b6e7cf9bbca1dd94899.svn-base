package br.com.opsocial.server.actions.application;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.OptimisticLockException;
import javax.validation.Valid;

import org.apache.commons.lang3.SerializationUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;

import br.com.opsocial.ejb.das.MaintenancePostRemote;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.sets.Post;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.Reflection;

@RestController
@RequestMapping("opsocial")
public class ComposeAction extends ServerAction {

	@CrossOrigin(origins = "*")
	@RequestMapping(value = "/get_profiles",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Profile>> doAction(Integer idAccount) throws Exception {

		MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");

//		User user = (User) getSession().getAttribute("user");

		List<Character> types = new ArrayList<Character>();
		types.add(Profile.FACEBOOK);
		types.add(Profile.FACEBOOK_PAGE);
		types.add(Profile.TWITTER);
		types.add(Profile.INSTAGRAM);
		types.add(Profile.LINKEDIN);
		types.add(Profile.LINKEDIN_PAGE);

		List<Profile> profiles = remote.getEntityByNetworkType(types, new Long(idAccount));

		List<Profile> profileDTOs = new ArrayList<Profile>();

		// Carregar primeiro PÃ¡ginas/Perfis Facebook.
		for(Profile profile : profiles) {
			if(profile.getType().equals(Profile.FACEBOOK_PAGE) || profile.getType().equals(Profile.FACEBOOK)) {
				profileDTOs.add(profile);
			}
		}

		// Carregar restante das redes.
		for(Profile profile : profiles) {
			if(!profile.getType().equals(Profile.FACEBOOK_PAGE) && !profile.getType().equals(Profile.FACEBOOK)) {
//				if(profile.getType().equals(Profile.INSTAGRAM)) {
//					if(profile.getIsSchedulingAuthenticated() == Profile.ACTIVE) {
//						profileDTOs.add(profile);
//					}
//				} else {
					profileDTOs.add(profile);
//				}
			}			
		}

		return new ResponseEntity<>(profileDTOs, HttpStatus.OK);
	}

	@Override
	public void doAction() throws Exception, OptimisticLockException {
		// TODO Auto-generated method stub
		
	}

	@CrossOrigin
	@RequestMapping(value = "/persist_post",
    method = RequestMethod.PUT,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> persistCompose(@Valid @RequestBody ArrayList<Object> objPersistir) {
		try {

			Gson gsonDeserializer = new Gson();
			Post post = new Post();
			Reflection.montarObjetoAbstrato(post, (LinkedHashMap<String, Object>) objPersistir.get(0));
			ArrayList<LinkedHashMap<String, Object>> listProfiles = (ArrayList<LinkedHashMap<String, Object>>) objPersistir.get(1);

			MaintenancePostRemote remote = (MaintenancePostRemote) RecoverMaintenance.recoverMaintenance("Post");
			List<Profile> profilesToPost = new ArrayList<>();

			for ( LinkedHashMap<String, Object> itemProfile : listProfiles ) {
				Profile profile = new Profile();
				Reflection.montarObjetoAbstrato(profile, itemProfile);
				Post post_item = SerializationUtils.clone(post);
				post_item.setProfile(profile);
				remote.setIdUserSession(1L);
				remote.save(post_item);

				profilesToPost.add(profile);
			}

			new PostAction().generatePost(profilesToPost, post);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return new ResponseEntity<>(objPersistir, HttpStatus.OK);
	}
}