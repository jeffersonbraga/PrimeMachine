package br.com.opsocial.server.services.linkedin;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

import javax.servlet.http.HttpSession;

import org.json.JSONException;
import org.json.simple.parser.ParseException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.linkedin.OAuth2Details;
import br.com.opsocial.server.utils.linkedin.OAuthConstants;
import br.com.opsocial.server.utils.linkedin.OAuthUtils;
import br.com.opsocial.server.utils.linkedin.entities.LinkedinCompany;

@RestController
@RequestMapping("opsocial")
public class AuthLinkedInCallbackServlet {
	
	@CrossOrigin
	@RequestMapping(value = "/authLinkedInCallback",
	method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	protected void saveProfile(String code, HttpSession session) throws InterruptedException, ExecutionException, IOException, JSONException, ParseException {

		Gson gson = new GsonBuilder().serializeNulls().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
		Properties config = OAuthUtils.getClientConfigProps(OAuthConstants.CONFIG_FILE_PATH);
		OAuth2Details oauthDetails = OAuthUtils.createOAuthDetails(config);
		
		Map<String,String> map = new HashMap<String, String>();
		Map<String,String> person = new HashMap<String, String>();
		String accessToken = "";
		String tokenSecret = "";
		
		if(OAuthUtils.isValid(code)) {
			
			map = OAuthUtils.getAccessToken(oauthDetails, code);
			oauthDetails.setResourceServerUrl("https://api.linkedin.com/v1/people/~:(id,first-name,last-name,num-connections,picture-url,positions,public-profile-url)?format=json");
			oauthDetails.setAccessToken(map.get("access_token"));
			accessToken = oauthDetails.getAccessToken();
			
			person = OAuthUtils.getProtectedResource(oauthDetails);

            MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
			
            User userSystem = (User) session.getAttribute("user");
            
        	List<Profile> profilesToAdd = new ArrayList<Profile>();
			
            Profile baseProfile = remote.getEntityByNetworkId(person.get("id"), userSystem.getAccount().getIdAccount());
			
			Profile accountProfile = new Profile();
            
        	if(baseProfile == null) {
        		
				accountProfile.setAccount(userSystem.getAccount());
				accountProfile.setNetworkId(person.get("id"));
				accountProfile.setScreenName(person.get("firstName") + " " + person.get("lastName"));
				accountProfile.setAvatar(person.get("pictureUrl"));
				accountProfile.setType(Profile.LINKEDIN);
				accountProfile.setToken(map.get("access_token"));
				accountProfile.setActive('T');
				accountProfile.setFollowers(Long.valueOf(String.valueOf(person.get("numConnections"))));
				
				profilesToAdd.add(accountProfile);
				
			} else {
				
				if(baseProfile.isActive()) {
					session.setAttribute("message", "Perfil já cadastrado");
				}
			}
        	
        	if(Integer.valueOf(getCompaniesThatUserIsAdm(oauthDetails).get("_total")) > 0) {
            	
    			String jsonResponse = String.valueOf(person.get("values"));

    			jsonResponse = jsonResponse.replaceAll("\\{\\}", "[]");
            	
            	JsonParser parser = new JsonParser();

            	JsonArray jsonResponseData = parser.parse(jsonResponse).getAsJsonObject().get("values").getAsJsonArray();
        		
				Iterator<JsonElement> companies = jsonResponseData.iterator();
				while (companies.hasNext() ) {
	
					JsonObject jsonObject = (JsonObject) companies.next();

//					LinkedinCompany linkedinCompany = gson.fromJson(jsonObject.get("company"), LinkedinCompany.class);

        			String companyId = String.valueOf(jsonObject.get("id"));
        			String companyName = String.valueOf(jsonObject.get("name"));
        			
    				Profile basePage = remote.getEntityByNetworkId(companyId, userSystem.getAccount().getIdAccount());

    	        	if(basePage == null) {
    	            	
    					Profile profile = new Profile();
    					profile.setAccount(userSystem.getAccount());
    					profile.setNetworkId(companyId);
    					profile.setScreenName(companyName);
    					profile.setAvatar(getCompanyAvatar("https://api.linkedin.com/v1/companies/"+ companyId +":(logo-url)?format=json", oauthDetails));
    					profile.setType(Profile.LINKEDIN_PAGE);
    					profile.setActive('T');
    					profile.setToken(accessToken);
    					profile.setTokenSecret(tokenSecret);
    					
    					profilesToAdd.add(profile);
    	        	} else {
    					
    					if(baseProfile.isActive()) {
    						session.setAttribute("message", "Perfil já cadastrado");
    					}
    				}
				}
        	}
	    	
			session.setAttribute("profilesToAdd", profilesToAdd);
			
		} else {
			String error = "Invalid token auth request";
			session.setAttribute("message", error);
			System.out.println(error);
		}
	}

	private Map<String,String> getCompaniesThatUserIsAdm(OAuth2Details oauthDetails) {

		Map<String,String> map = new HashMap<String, String>();
		
		oauthDetails.setResourceServerUrl("https://api.linkedin.com/v1/companies?format=json&is-company-admin=true");
		map = OAuthUtils.getProtectedResource(oauthDetails);
		
		return map;
	}

	private String getCompanyAvatar(String url, OAuth2Details oauthDetails) {

		Map<String,String> map = new HashMap<String, String>();
		
		oauthDetails.setResourceServerUrl(url);
		map = OAuthUtils.getProtectedResource(oauthDetails);
		
		return map.get("logoUrl");
	}
	
}