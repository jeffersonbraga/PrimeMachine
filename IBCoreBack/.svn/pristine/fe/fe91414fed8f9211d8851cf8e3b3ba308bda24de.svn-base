package br.com.opsocial.server.actions.monitorings;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.persistence.OptimisticLockException;

import br.com.opsocial.client.entity.monitoring.MonitoringTagDTO;
import br.com.opsocial.client.entity.mount.MountDTO;
import br.com.opsocial.client.entity.primitive.PersistentList;
import br.com.opsocial.ejb.das.MaintenanceMonitoringTagRemote;
import br.com.opsocial.ejb.entity.monitoring.MonitoringTag;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;

public class DeleteTagsAction extends ServerAction {

	@Override
	public void doAction() throws Exception, OptimisticLockException {
		
		List<MonitoringTagDTO> monitoringTagsDTO = ((PersistentList<MonitoringTagDTO>) getParameters().get("monitoringTags")).getPersistences();

		setParameters(new HashMap<String, Object>());
		
		MaintenanceMonitoringTagRemote monitoringTagRemote = (MaintenanceMonitoringTagRemote) 
				RecoverMaintenance.recoverMaintenance("MonitoringTag");
		
		List<MonitoringTag> monitoringTagsExcluded = new ArrayList<>();
		List<MonitoringTag> monitoringTagsNotExcluded = new ArrayList<>();
		for(MonitoringTagDTO monitoringTagDTO : monitoringTagsDTO) {
			
			MonitoringTag monitoringTag = MountDTO.mountMonitoringTag(monitoringTagDTO);
			
			try {
				
				monitoringTagRemote.delete(monitoringTag);
				
				monitoringTagsExcluded.add(monitoringTag);
				
			} catch (Exception e) {
				e.printStackTrace();
				monitoringTagsNotExcluded.add(monitoringTag);
			}
			
		}
		
		getParameters().put("monitoringTagsExcluded", MountDTO.mountMonitoringTag(monitoringTagsExcluded));
		getParameters().put("monitoringTagsNotExcluded", MountDTO.mountMonitoringTag(monitoringTagsNotExcluded));
	}

}
