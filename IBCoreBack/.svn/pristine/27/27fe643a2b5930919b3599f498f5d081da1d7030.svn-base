package br.com.opsocial.server.actions.profiles;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.persistence.OptimisticLockException;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonObject;

import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.das.MaintenanceRateLimitStatusRemote;
import br.com.opsocial.ejb.das.MaintenanceReportGenerateRemote;
import br.com.opsocial.ejb.entity.application.Account;
import br.com.opsocial.ejb.entity.application.Notification;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.report.ReportGenerate;
import br.com.opsocial.ejb.entity.twitter.RateLimitStatus;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.monitorings.MonitoringTwitter;
import br.com.opsocial.server.utils.networksintegrations.TwitterIntegration;
import br.com.opsocial.server.utils.reports.ReportFacebook;
import br.com.opsocial.server.utils.reports.ReportGenerateRunnable;
import br.com.opsocial.server.utils.reports.ReportGenerateThread;
import br.com.opsocial.server.utils.reports.ReportGenerateVerification;
import br.com.opsocial.server.utils.reports.ReportInstagram;
import twitter4j.Twitter;

@RestController
@RequestMapping("opsocial")
public class InsertProfilesAction extends ServerAction {
	
	@CrossOrigin
	@RequestMapping(value = "/insert_profiles",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> doAction(@RequestBody List<Profile> profiles, HttpSession session) throws Exception {
		
		Profile parentProfile = null;
		ResponseEntity<Object> responseEntity;
		List<Profile> profilesInserted = new ArrayList<Profile>();
		
		MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote) 
				RecoverMaintenance.recoverMaintenance("Profile");
		
		MaintenanceReportGenerateRemote reportGenerateRemote = (MaintenanceReportGenerateRemote) 
				RecoverMaintenance.recoverMaintenance("ReportGenerate");
		
		ReportGenerateThread reportGenerateThread = new ReportGenerateThread();
		
		User user = (User) session.getAttribute("user");
		
		Boolean canInsertMoreProfiles = true;
		String profileControlMessage = "";
		
		List<Character> profileTypes = new ArrayList<Character>();
		profileTypes.add(Profile.FACEBOOK_PAGE);
		profileTypes.add(Profile.TWITTER);
		profileTypes.add(Profile.FACEBOOK);
		profileTypes.add(Profile.INSTAGRAM);
		profileTypes.add(Profile.LINKEDIN);
		profileTypes.add(Profile.LINKEDIN_PAGE);
		
		List<Profile> existingProfiles = profileRemote.getEntityByNetworkType(profileTypes, user.getAccount().getIdAccount());
		
		if(user.getAccount().getPlanType().equals(Account.FREE) && existingProfiles.size() + profiles.size() > 5) {
			profileControlMessage = "Você possui o plano gratuito, que permite a inserção de 5 perfis.";
			canInsertMoreProfiles = false;
			
		} else if(existingProfiles.size() + profiles.size() > user.getAccount().getProfiles()) {
			profileControlMessage = "O plano contratado permite a inserção de até " + user.getAccount().getProfiles() + " perfis/páginas";
			canInsertMoreProfiles = false;	
		}
		
		JsonObject response = new JsonObject();
		response.addProperty("error", profileControlMessage);
		
		if(canInsertMoreProfiles) {
			
			for(Profile profile : profiles) {
				
				profile.setInsertionDate(Calendar.getInstance().getTimeInMillis() / 1000L);
				
				if(profile.getType().equals(Profile.FACEBOOK_PAGE) || profile.getType().equals(Profile.FACEBOOK)) {
					
					Profile baseProfile = profileRemote.getEntityByNetworkId(profile.getNetworkId(), user.getAccount().getIdAccount());
					
					if(baseProfile == null) {

						if(profile.getType().equals(Profile.FACEBOOK)) {
							
							parentProfile = profileRemote.save(profile);
							
							String message = user.getName() + " adicionou o canal do Facebook " + parentProfile.getScreenName() + ".";
							UtilFunctions.addNotification(message, parentProfile.getAccount().getIdAccount(), Notification.COLOR_SUCCESS, "");
							
							profilesInserted.add(parentProfile);
							
							List<Profile> childPages = profileRemote.getEntitiesByProfileInformation(
									profile.getNetworkId(), user.getAccount().getIdAccount());
							
							// Atualiza o Parent Profile de páginas que já se encontram inseridas no banco.
							for(Profile childPage : childPages) {
								
								childPage.setParentProfile(parentProfile);
								childPage.setProfileInformation(null);
								profileRemote.save(childPage);
							}
							
						} else if(profile.getType().equals(Profile.FACEBOOK_PAGE)) {
							
							if(parentProfile != null) {
								profile.setParentProfile(parentProfile);
								profile.setProfileInformation(null);
							}
							
							profile = profileRemote.save(profile);
							
							String message = user.getName() + " adicionou o canal do Facebook " + profile.getScreenName() + ".";
							UtilFunctions.addNotification(message, profile.getAccount().getIdAccount(), Notification.COLOR_SUCCESS, "");
							
							profilesInserted.add(profile);
						
							if(!reportGenerateRemote.hasEntity(profile.getNetworkId(), profile.getType())) {
								
								ReportGenerate reportGenerate = new ReportGenerate();
								reportGenerate.setNetworkId(profile.getNetworkId());
								reportGenerate.setNetworkType(profile.getType());
								reportGenerate.setTokenSecret(profile.getTokenSecret());
								reportGenerate.setState(ReportFacebook.UNAVAILABLE);
								
								// Verifica se a página pode resgatar seus insights.
								if(ReportGenerateVerification.isReportActive(reportGenerate)) {
									
									reportGenerate.setState(ReportFacebook.GENERATING);
									reportGenerate = reportGenerateRemote.save(reportGenerate);
									
									reportGenerateThread.addReportGenerateRunnable(new ReportGenerateRunnable(profile, ReportGenerateRunnable.REPORT_DAYS));
								} else {
									reportGenerate = reportGenerateRemote.save(reportGenerate);
								}
							} else {
								
								ReportGenerate reportGenerate = reportGenerateRemote.getEntity(profile.getNetworkId(), profile.getType());
								reportGenerate.setTokenSecret(profile.getTokenSecret());
								reportGenerate.setState(ReportFacebook.FINALIZED);
								
								reportGenerateRemote.save(reportGenerate);
							}
						}	
					}
					
				} else if(profile.getType().equals(Profile.TWITTER)) {
					
					profile = profileRemote.save(profile);
					profilesInserted.add(profile);

					String message = user.getName() + " adicionou o canal do Twitter " + profile.getScreenName() + ".";
					UtilFunctions.addNotification(message, profile.getAccount().getIdAccount(), Notification.COLOR_SUCCESS, "");
					
					MaintenanceRateLimitStatusRemote rateLimitStatusRemote = (MaintenanceRateLimitStatusRemote) RecoverMaintenance.recoverMaintenance("RateLimitStatus");

	            	Twitter twitter = new TwitterIntegration().getTwitter(profile.getToken(), profile.getTokenSecret());

	            	twitter4j.RateLimitStatus rateLimitStatusResponse = twitter.getRateLimitStatus("search").get(MonitoringTwitter.RESOURCE_SEARCH_TWEETS);

	            	RateLimitStatus rateLimitStatus = new RateLimitStatus();
	            	rateLimitStatus.setProfile(profile);
	            	rateLimitStatus.setResource(MonitoringTwitter.RESOURCE_SEARCH_TWEETS);
	            	rateLimitStatus.setRequestsLimit(rateLimitStatusResponse.getLimit());
	            	rateLimitStatus.setRequestsRemaining(rateLimitStatusResponse.getRemaining());
	            	rateLimitStatus.setResetDate(Long.valueOf(rateLimitStatusResponse.getResetTimeInSeconds()));

	            	rateLimitStatusRemote.save(rateLimitStatus);
	            	
				} else if(profile.getType().equals(Profile.INSTAGRAM)) {
					
					profile = profileRemote.save(profile);
					profilesInserted.add(profile);
					
					String message = user.getName() + " adicionou o canal do Instagram " + profile.getScreenName() + ".";
					UtilFunctions.addNotification(message, profile.getAccount().getIdAccount(), Notification.COLOR_SUCCESS, "");
	            	
	            	if(!reportGenerateRemote.hasEntity(profile.getNetworkId(), profile.getType())) {
	            		
	            		ReportGenerate reportGenerate = new ReportGenerate();
						reportGenerate.setNetworkId(profile.getNetworkId());
						reportGenerate.setNetworkType(profile.getType());
						reportGenerate.setTokenSecret(profile.getToken());
						reportGenerate.setState(ReportFacebook.GENERATING);
						reportGenerate.setIsInNewInstaFollowersReports('T');	
						
						reportGenerate = reportGenerateRemote.save(reportGenerate);
							
	            		Calendar reportDate = Calendar.getInstance();
	    				reportDate.add(Calendar.DATE, -1);	

	    				Long reportDateStamp = UtilFunctions.getMidnightDateNoDaylightTime(reportDate.getTime());

	    				ReportInstagram reportInstagram = new ReportInstagram(profile, reportDateStamp);
	    				reportInstagram	.setReportGenerate(reportGenerate);
	    				
	    				new Thread(reportInstagram).start();
	            	}
	            } else if(profile.getType().equals(Profile.LINKEDIN)) {
					
					parentProfile = profileRemote.save(profile);
					
					profilesInserted.add(parentProfile);
					
					List<Profile> childPages = profileRemote.getEntitiesByProfileInformation(
							profile.getNetworkId(), user.getAccount().getIdAccount());
					
					// Atualiza o Parent Profile de páginas que já se encontram inseridas no banco.
					for(Profile childPage : childPages) {
						
						childPage.setParentProfile(parentProfile);
						childPage.setProfileInformation(null);
						profileRemote.save(childPage);
					}
					
//					MaintenanceRateLimitStatusRemote rateLimitStatusRemote = (MaintenanceRateLimitStatusRemote) RecoverMaintenance.recoverMaintenance("RateLimitStatus");
//
//	    			LinkedInApiClientFactory factory = LinkedInApiClientFactory.
//	    					newInstance(InsertByLinkedInAction.CLIENT_ID, InsertByLinkedInAction.CLIENT_SECRET); 
//	    			
//	    			LinkedInApiClient client = factory.createLinkedInApiClient(profile.getToken(), profile.getTokenSecret());
//
//	    			twitter4j.RateLimitStatus rateLimitStatusResponse = twitter.getRateLimitStatus("search").get(MonitoringTwitter.RESOURCE_SEARCH_TWEETS);
//
//	            	RateLimitStatus rateLimitStatus = new RateLimitStatus();
//	            	rateLimitStatus.setProfile(profile);
//	            	rateLimitStatus.setResource(MonitoringTwitter.RESOURCE_SEARCH_TWEETS);
//	            	rateLimitStatus.setRequestsLimit(rateLimitStatusResponse.getLimit());
//	            	rateLimitStatus.setRequestsRemaining(rateLimitStatusResponse.getRemaining());
//	            	rateLimitStatus.setResetDate(Long.valueOf(rateLimitStatusResponse.getResetTimeInSeconds()));
//
//	            	rateLimitStatusRemote.save(rateLimitStatus);
				} else if(profile.getType().equals(Profile.LINKEDIN_PAGE)) {
					
//					if(parentProfile != null) {
//						profile.setParentProfile(parentProfile);
//						profile.setProfileInformation(null);
//					}
					
					profile = profileRemote.save(profile);
					profilesInserted.add(profile);
					
//					MaintenanceRateLimitStatusRemote rateLimitStatusRemote = (MaintenanceRateLimitStatusRemote) RecoverMaintenance.recoverMaintenance("RateLimitStatus");
//
//	    			LinkedInApiClientFactory factory = LinkedInApiClientFactory.
//	    					newInstance(InsertByLinkedInAction.CLIENT_ID, InsertByLinkedInAction.CLIENT_SECRET); 
//	    			
//	    			LinkedInApiClient client = factory.createLinkedInApiClient(profile.getToken(), profile.getTokenSecret());
//
//	    			twitter4j.RateLimitStatus rateLimitStatusResponse = twitter.getRateLimitStatus("search").get(MonitoringTwitter.RESOURCE_SEARCH_TWEETS);
//
//	            	RateLimitStatus rateLimitStatus = new RateLimitStatus();
//	            	rateLimitStatus.setProfile(profile);
//	            	rateLimitStatus.setResource(MonitoringTwitter.RESOURCE_SEARCH_TWEETS);
//	            	rateLimitStatus.setRequestsLimit(rateLimitStatusResponse.getLimit());
//	            	rateLimitStatus.setRequestsRemaining(rateLimitStatusResponse.getRemaining());
//	            	rateLimitStatus.setResetDate(Long.valueOf(rateLimitStatusResponse.getResetTimeInSeconds()));
//
//	            	rateLimitStatusRemote.save(rateLimitStatus);
				}
			}
			
			reportGenerateThread.start();
			
			responseEntity = new ResponseEntity<Object>(profilesInserted, HttpStatus.OK);
		} else {
			responseEntity = new ResponseEntity<Object>(response.toString(), HttpStatus.FORBIDDEN);
		}
		
		return responseEntity;
	}

	@Override
	public void doAction() throws Exception, OptimisticLockException {
		// TODO Auto-generated method stub
		
	}
}
