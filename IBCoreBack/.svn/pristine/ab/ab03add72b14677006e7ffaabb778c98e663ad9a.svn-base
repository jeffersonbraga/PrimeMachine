package br.com.opsocial.server.actions.application;

import java.util.List;

import javax.persistence.OptimisticLockException;

import org.jinstagram.Instagram;
import org.jinstagram.auth.model.Token;
import org.jinstagram.entity.users.basicinfo.UserInfoData;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.server.services.AuthFacebookCallbackServlet;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;

@RestController
@RequestMapping("opsocial")
public class AuthInstagramAction extends ServerAction {

	private String instagramAuthAction;
	
	private MaintenanceProfileRemote remoteProfile;
	private User user;
	
	private Instagram instagram;
	private UserInfoData userInfoData;
	
	private Profile profile;
	
	@Override
	@RequestMapping(value = "/auth_instagram",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		StringUtil accessToken = (StringUtil) getParameters().get("accessToken");
		
		instagram = new Instagram(new Token(accessToken.getValue(), null));
		
		user = (User) getRequest().getSession().getAttribute("user");
		
		userInfoData = instagram.getCurrentUserInfo().getData();
		
		remoteProfile = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
		
		profile = remoteProfile.getEntityByNetworkId(String.valueOf(userInfoData.getId()), user.getAccount().getIdAccount());
		
		instagramAuthAction = (String) getRequest().getSession().getAttribute("instagram_auth_action");
		
		if(instagramAuthAction.equals(AuthFacebookCallbackServlet.GET_ACCESS_TOKEN)) {
			getAccessToken();
		} else if(instagramAuthAction.equals(AuthFacebookCallbackServlet.REFRESH_TOKEN)) {
			refreshToken();
		}
		
		getParameters().put("instagramAuthAction", new StringUtil(instagramAuthAction));
	}
	
	private void getAccessToken() {

		try {

			if(profile == null) {

				profile = new Profile();
				profile.setActive('T');
				profile.setAvatar(userInfoData.getProfilePicture());
				profile.setNetworkId(String.valueOf(userInfoData.getId()));
				profile.setToken(instagram.getAccessToken().getToken());
				profile.setTokenSecret(instagram.getAccessToken().getSecret());
				profile.setScreenName(userInfoData.getUsername());
				profile.setType(Profile.INSTAGRAM);
				profile.setAccount(user.getAccount());
				profile.setIsSchedulingAuthenticated(Profile.INACTIVE);
				
				getParameters().put("profile", profile);
				
			} else {
				getParameters().put("message", new StringUtil("Perfil já cadastrado. Para adicionar outro perfil, faça o logout desta conta no Instagram e logue com a conta que deseja adicionar"));
			}
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	private void refreshToken() {
		
		try {
			
			Profile profileToRefresh = ((Profile) getRequest().getSession().getAttribute("profile"));
			
			if(profile != null) {
			
				if(profileToRefresh.getIdProfile().equals(profile.getIdProfile())) {
					
					profile.setActive('T');
					profile.setToken(instagram.getAccessToken().getToken());
					profile.setTokenSecret(instagram.getAccessToken().getSecret());
					
					remoteProfile.save(profile);
					
					profileToRefresh = remoteProfile.getById(profile.getIdProfile());
					
					List<Profile> expiredProfiles = (List<Profile>) getSession().getServletContext().getAttribute("expiredProfiles"+ profile.getAccount().getIdAccount());
					int position = 0;
					int i = 0;
					for (Profile expiredProfile : expiredProfiles) {
						if(profileToRefresh.getIdProfile().equals(expiredProfile.getIdProfile())) {
							position = i;
							break;
						}
						i++;
					}
					
					expiredProfiles.remove(position);
					
					if(expiredProfiles.isEmpty()) {
						getSession().getServletContext().removeAttribute("expiredProfiles" + profile.getAccount().getIdAccount());
					} else {
						getSession().getServletContext().setAttribute("expiredProfiles" + profile.getAccount().getIdAccount(), expiredProfiles);	
					}
					
				} else {
					getParameters().put("message", new StringUtil("Para reconectar o perfil escolhido, você deverá " +
							"primeiramente estar logado no Instagram com o perfil que deseja reconectar."));
				}
			} else {
				getParameters().put("message", new StringUtil("Para reconectar o perfil escolhido, você deverá " +
						"primeiramente estar logado no Instagram com o perfil que deseja reconectar."));
			}
			
			getParameters().put("profile", profileToRefresh);
			
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

}
