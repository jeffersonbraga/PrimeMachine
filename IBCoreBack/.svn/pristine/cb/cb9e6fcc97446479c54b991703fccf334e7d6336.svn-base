package br.com.opsocial.server.actions.reports.instagram;

import java.util.Calendar;
import java.util.Date;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

import br.com.opsocial.client.entity.report.instagram.ReportInstagramOverviewDTO;
import br.com.opsocial.ejb.das.MaintenanceReportGenerateRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.report.ReportGenerate;
import br.com.opsocial.server.utils.GenericDateInterval;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.reports.ReportFacebook;
import br.com.opsocial.server.utils.reports.ReportInstagram;
import br.com.opsocial.server.utils.reports.UtilReports;

@RestController
@RequestMapping("opsocial")
public class ReportInstagramOverviewAction {

	private GenericDateInterval genericDateInterval;
	
	@CrossOrigin("*")
	@RequestMapping(value = "/report_instagram_overview",
    method = RequestMethod.POST,
    consumes = MediaType.APPLICATION_JSON_VALUE,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> doAction(@Valid @RequestBody Profile profile, Long dateFrom_, Long dateUntil_) {
		
		MaintenanceReportGenerateRemote reportGenerateRemote = (MaintenanceReportGenerateRemote)
				RecoverMaintenance.recoverMaintenance("ReportGenerate");

		ReportInstagramOverviewDTO reportInstagramOverview;
		
    	try {
    		
			Date dateFrom = new Date(dateFrom_);
			Date dateUntil = new Date(dateUntil_);

			genericDateInterval = new GenericDateInterval(UtilFunctions.getMidnightDateNoDaylightTime(dateFrom), 
					  UtilFunctions.getMidnightDateNoDaylightTime(dateUntil));
			
			if(!reportGenerateRemote.hasEntity(profile.getNetworkId(), profile.getType())) {
				
				ReportGenerate reportGenerate = new ReportGenerate();
				reportGenerate.setNetworkId(profile.getNetworkId());
				reportGenerate.setNetworkType(profile.getType());
				reportGenerate.setTokenSecret(profile.getToken());
				reportGenerate.setState(ReportFacebook.GENERATING);
				reportGenerate.setIsInNewInstaFollowersReports('T');
				
				reportGenerate = reportGenerateRemote.save(reportGenerate);
				
				Calendar reportDate = Calendar.getInstance();
				reportDate.add(Calendar.DATE, -1);

				Long reportDateStamp = UtilFunctions.getMidnightDateNoDaylightTime(reportDate.getTime());

				ReportInstagram reportInstagram = new ReportInstagram(profile, reportDateStamp);
				reportInstagram.setReportGenerate(reportGenerate);
				
				new Thread(reportInstagram).start();
			}
			
			
			Character reportState = UtilReports.getReportState(profile);
			
			if(reportState.equals(Profile.REPORT_FINALIZED) || reportState.equals(Profile.REPORT_REFRESH_TOKEN)) {
				reportInstagramOverview = UtilReports.mountReportInstagramOverviewDTO(profile, genericDateInterval);
			} else {
				reportInstagramOverview = new ReportInstagramOverviewDTO();
			}
			
			JsonObject response = new JsonObject();
			response.add("reportInstagramOverview", new Gson().toJsonTree(reportInstagramOverview));
			response.addProperty("reportState", reportState);
			
			return new ResponseEntity<>(response.toString(), HttpStatus.OK);
			
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
}
