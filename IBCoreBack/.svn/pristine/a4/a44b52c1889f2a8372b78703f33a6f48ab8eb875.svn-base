package br.com.opsocial.server.actions.monitorings;

import java.util.HashMap;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.application.MonitoringDTO;
import br.com.opsocial.client.entity.monitoring.MonitoringReportDTO;
import br.com.opsocial.client.entity.monitoring.SampleDTO;
import br.com.opsocial.client.entity.mount.MountDTO;
import br.com.opsocial.client.entity.primitive.PersistentMap;
import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.client.entity.report.ReportLogoDTO;
import br.com.opsocial.ejb.das.MaintenanceMonitoringTagRemote;
import br.com.opsocial.ejb.das.MaintenanceReportLogoRemote;
import br.com.opsocial.ejb.entity.application.idclass.ReportLogoId;
import br.com.opsocial.ejb.entity.report.ReportLogo;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.GenericDateInterval;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.monitorings.UtilMonitorings;
import br.com.opsocial.server.utils.monitorings.pdf.MonitoringReportPDF;

@RestController
@RequestMapping("opsocial")
public class MonitoringReportPDFAction extends ServerAction {

	@Override
	@RequestMapping(value = "/monitoring_report_pdf",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		HashMap<String, String> chartsImages = ((PersistentMap<String, String>) getParameters().get("chartsImages")).getValue();
		MonitoringDTO monitoring = (MonitoringDTO) getParameters().get("monitoring");
		
		MaintenanceReportLogoRemote reportLogoRemote = (MaintenanceReportLogoRemote) RecoverMaintenance.recoverMaintenance("ReportLogo");
		
		ReportLogoId reportLogoId = new ReportLogoId();
		reportLogoId.setObjectId(monitoring.getIdMonitoring());
		reportLogoId.setType(ReportLogo.MONITORING);
		
		ReportLogo reportLogo = reportLogoRemote.getById(reportLogoId);
		
		if(reportLogo != null) {
			monitoring.setReportLogo((ReportLogoDTO) MountDTO.mountReportLogo(reportLogo));
		}
		
		MaintenanceMonitoringTagRemote monitoringTagRemote = (MaintenanceMonitoringTagRemote) RecoverMaintenance.recoverMaintenance("MonitoringTag");
		
		monitoring.setMonitoringTags(MountDTO.mountMonitoringTag(
				monitoringTagRemote.listByMonitoring(monitoring.getIdMonitoring(), monitoring.getAccount().getIdAccount())));
		
		MonitoringReportDTO monitoringReportDTO = null;
		
		if(getParameters().get("sample") == null) {
		
			Long dateFrom = ((br.com.opsocial.client.entity.primitive.Long) getParameters().get("dateFrom")).getValue();
			Long dateUntil = ((br.com.opsocial.client.entity.primitive.Long) getParameters().get("dateUntil")).getValue();
			
			GenericDateInterval genericDateInterval = new GenericDateInterval(dateFrom, dateUntil);
				
			monitoringReportDTO = UtilMonitorings.mountMonitoringReportDTO(monitoring, genericDateInterval, UtilMonitorings.PDF);
		} else {
			SampleDTO sample = (SampleDTO) getParameters().get("sample");
			monitoringReportDTO = GenerateSampleReportAction.mountMonitoringReport(sample);
		}

		MonitoringReportPDF monitoringReportPDF = new MonitoringReportPDF(monitoringReportDTO, monitoring, chartsImages);
		monitoringReportPDF.createPDF();
		
		getParameters().put("pdfToDownload", new StringUtil(monitoringReportPDF.getFileName()));
	}

}
