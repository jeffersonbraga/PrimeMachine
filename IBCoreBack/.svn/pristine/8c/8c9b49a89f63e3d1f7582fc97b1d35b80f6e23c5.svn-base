package br.com.opsocial.server.actions.application;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.ejb.das.MaintenanceSetRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.generic.Persistent;
import br.com.opsocial.ejb.entity.sets.Post;
import br.com.opsocial.ejb.entity.sets.Sets;

@RestController
@RequestMapping("opsocial")
public class ScheduleAction extends ServerAction {
	
	@Override
	@RequestMapping(value = "/schedule_action",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {

		List<Profile> profilesToPost = (List<Profile>) getParameters().get("profiles");
		Character imageType = (Character) getParameters().get("imageType");
		Sets scheduleView = (Sets) getParameters().get("schedule");
		
		Date scheduleDate = ((br.com.opsocial.client.entity.primitive.Date) getParameters().get("scheduledate")).getValue();
		
		Date now = new Date();
		
		//TODO Felipe - e se tiver em alguma timezone com hora maior?
		
		if(scheduleDate.getTime() <= now.getTime()) {
			
			getParameters().put("message", new StringUtil
					("Data e hora inicial deve ser maior que a hora atual (BRT)."));
		} else {
			
			List<Profile> profilesToUpdate = new ArrayList<Profile>();
			//profilesToUpdate.setPersistences(new ArrayList<Profile>());
			
			if(imageType != null) {
				if(imageType.equals(Persistent.FILTERED_PICTURE)) {
					String picture = ((StringUtil) getParameters().get("picture")).getValue();
					scheduleView.getPosts().get(0).setPicture(UtilFunctions.createFilteredPicture(picture));
				}
			}
			
			setParameters(new HashMap<String, Object>());
		
			for(Profile profileDTO : profilesToPost) {
				
				MaintenanceSetRemote remote = (MaintenanceSetRemote) RecoverMaintenance.recoverMaintenance("Set");

				List<Sets> setsByProfile = remote.getByProfile(profileDTO.getIdProfile(), 
						((User) getSession().getAttribute("user")).getIdUser());
				
				Boolean canSave = true;
				
				for(Sets set : setsByProfile) {
					
					Date startDate = new Date(set.getStartDate() * 1000);
						
					if(profileDTO.getType().equals(Profile.TWITTER) &&
							(startDate.getYear() + startDate.getMonth() + startDate.getDate() ==
							scheduleDate.getYear() + scheduleDate.getMonth() + scheduleDate.getDate())) {
						
						for(Post post : set.getPosts()) {
							if(post.getText().equals(scheduleView.getPosts().get(0).getText())) {

								getParameters().put("message", new StringUtil("O twitter não aceita conteúdo idêntico no prazo de 24 horas."));
								canSave = false;
								break;
							}
						}
					}
				}
						
				if(canSave) {
				
					Sets scheduleBase = null;
					
					if(scheduleView.getIdSet() != null) {
						scheduleBase = scheduleView;
						getParameters().put("isedit", true);
					} else {
						scheduleView.setProfile(profileDTO);
						scheduleBase = scheduleView;
					}
								
					scheduleBase.setActive('T');
					scheduleBase.setEndDate(scheduleDate.getTime() / 1000);
					scheduleBase.setIsSchedule('T');
					scheduleBase.setProfile(profileDTO);
					scheduleBase.setStartDate(scheduleDate.getTime() / 1000);
					scheduleBase.setState(Sets.ON);
					scheduleBase.setStatus(Sets.SCHEDULED);
			
					scheduleBase = remote.save(scheduleBase);
					
					getParameters().put("schedule", scheduleBase);
				}
			}
		}
	}
}
