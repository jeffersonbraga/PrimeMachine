package br.com.opsocial.client.entity.rssfeed;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.XMLEvent;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.util.EntityUtils;
import org.jsoup.Jsoup;

import br.com.opsocial.server.utils.instagram.InstagramPostHelper;
import br.com.opsocial.server.utils.instagram.InstagramProxyClient;

public class RSSFeedParser {
	
	static final String TITLE = "title";
    static final String DESCRIPTION = "description";
    static final String CHANNEL = "channel";
    static final String LANGUAGE = "language";
    static final String COPYRIGHT = "copyright";
    static final String LINK = "link";
    static final String AUTHOR = "author";
    static final String ITEM = "item";
    static final String PUB_DATE = "pubDate";
    static final String UPDATED = "updated";
    static final String GUID = "guid";

    final URL url;

    public RSSFeedParser(String feedUrl) throws MalformedURLException {
        try {
            this.url = new URL(feedUrl);
        } catch (MalformedURLException e) {
            throw new MalformedURLException();
        }
    }

    public Feed readFeed() throws IOException {
        Feed feed = null;
        try {
            boolean isFeedHeader = true;
            // Set header values intial to the empty string
            String description = "";
            String title = "";
            String link = "";
            String language = "";
            String copyright = "";
            String author = "";
            String pubdate = "";
            String guid = "";

            // First create a new XMLInputFactory
            XMLInputFactory inputFactory = XMLInputFactory.newInstance();
            // Setup a new eventReader
            InputStream in;
            try {
            	in = read();
            } catch (IOException e){

				InstagramProxyClient instagramProxyClient = new InstagramProxyClient(null, InstagramPostHelper.PHOTO);
				
				CloseableHttpResponse response = (CloseableHttpResponse) instagramProxyClient.requestGET(this.url.toString(), "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36");
				
				in = response.getEntity().getContent();
			}
            
            XMLEventReader eventReader = inputFactory.createXMLEventReader(in);
            // read the XML document
            while (eventReader.hasNext()) {
            	
                XMLEvent event = eventReader.nextEvent();
                
                if (event.isStartElement()) {
                	
                    String localPart = event.asStartElement().getName()
                            .getLocalPart();
                    switch (localPart) {
                    case ITEM:
                        if (isFeedHeader) {
                            isFeedHeader = false;
                            feed = new Feed(title, link, description, language,
                                    copyright, pubdate);
                        }
                        event = eventReader.nextEvent();
                        break;
                    case TITLE:
                        title = getCharacterData(event, eventReader);
                        break;
                    case DESCRIPTION:
                        description = getCharacterData(event, eventReader);
                        break;
                    case LINK:
                        link = getCharacterData(event, eventReader);
                        break;
                    case GUID:
                        guid = getCharacterData(event, eventReader);
                        break;
                    case LANGUAGE:
                        language = getCharacterData(event, eventReader);
                        break;
                    case AUTHOR:
                        author = getCharacterData(event, eventReader);
                        break;
                    case PUB_DATE:
                        pubdate = getCharacterData(event, eventReader);
                        break;
                    case UPDATED:
                        pubdate = getCharacterData(event, eventReader);
                        break;
                    case COPYRIGHT:
                        copyright = getCharacterData(event, eventReader);
                        break;
                    }
                } else if (event.isEndElement()) {
                    if (event.asEndElement().getName().getLocalPart() == (ITEM)) {
                        FeedMessage message = new FeedMessage();
                        message.setAuthor(author);
                        message.setDescription(description);
                        message.setGuid(guid);
                        message.setLink(link);
                        message.setTitle(title);
                        message.setPubDate(pubdate);
                        feed.getMessages().add(message);
                        event = eventReader.nextEvent();
                        continue;
                    }
                }
            }
            
        } catch (XMLStreamException e) {
            throw new RuntimeException(e);
        }
        
        return feed;
    }

    private String getCharacterData(XMLEvent event, XMLEventReader eventReader) throws XMLStreamException {
        
    	String result = "";
        event = eventReader.nextEvent();
        
        if (event instanceof Characters) {
            result = event.asCharacters().getData();
        }
        
        return result;
    }

    private InputStream read() throws IOException {
        try { 
        	System.setProperty("http.agent", "Chrome");
//        	HttpURLConnection httpcon = (HttpURLConnection) url.openConnection(); 
//        	httpcon.addRequestProperty("User-Agent", "Mozilla/4.76"); 
            return url.openStream();
        } catch (IOException e) {
            e.printStackTrace();
            throw new IOException();
        }
    }
}
