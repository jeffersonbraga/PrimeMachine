package br.com.opsocial.server.site;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonObject;

import br.com.opsocial.ejb.das.MaintenanceAccountRemote;
import br.com.opsocial.ejb.das.MaintenanceColorTagRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringTagRemote;
import br.com.opsocial.ejb.das.MaintenanceUserRemote;
import br.com.opsocial.ejb.entity.application.Account;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.monitoring.MonitoringTag;
import br.com.opsocial.server.services.SendMail;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.emails.EmailSender;

@RestController
@RequestMapping("opsocial")
public class TestServlet {

	@CrossOrigin
	@RequestMapping(value = "/test_account",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	protected void doPost(String phone, String password, String email, String name, 
			String promotionalcode, String state, String city, HttpServletRequest req, 
			HttpServletResponse resp)
			throws ServletException, IOException {
	
		MaintenanceUserRemote remote = (MaintenanceUserRemote) RecoverMaintenance.recoverMaintenance("User");
		
		resp.setContentType("text/html");
		resp.setCharacterEncoding("UTF-8");
		
		PrintWriter out = resp.getWriter();
		
		JsonObject object = new JsonObject();
		
		if(remote.getByEmail(email) == null) {
			
			try {
			
				User user = new User();
				
				Date testExpire = new Date();
				testExpire.setDate(testExpire.getDate() + 7);
				
				Account account = new Account();
				account.setCity(city.trim());
				account.setState(state.trim());
				account.setPlanType(new Byte("0"));
				account.setCadastreDate(new Date());
				account.setTestExpire(testExpire);
				
				if(!promotionalcode.trim().isEmpty()) {
					account.setPromotionalCode(promotionalcode.trim());
				}
				
				account.setProfiles(5);
				account.setMonitorings(5);
				
				MaintenanceAccountRemote accountRemote = (MaintenanceAccountRemote) RecoverMaintenance.recoverMaintenance("Account");
				
				user.setAccount(accountRemote.save(account));
				
				user.setName(name.trim());
				user.setEmail(email.trim().toLowerCase());
				user.setPassword(password.trim());
				user.setPhone(phone);
				user.setCadastreDate(new Date());
				user.setType('A');
				user.setShowInstagramAuthWindow('F');
				user.setShowLettersToClientsWindow('F');
				
				user = remote.save(user);
				
				insertGloblaMonitoringsTags(user.getAccount());
				
				object.addProperty("idUser", String.valueOf(user.getIdUser()));
				object.addProperty("success", "true");
				
				new Thread(new TestEmail(user, req.getSession().getServletContext())).start();
				
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		} else {
			object.addProperty("message", "Usuário já registrado no sistema.");
			object.addProperty("success", "false");
		}

		out.print(object);
		out.flush();
	}
	
	class TestEmail implements Runnable {
		
		private User user;
		private ServletContext servletContext;
		
		public TestEmail(User user, ServletContext servletContext) {
			this.user = user;
			this.servletContext = servletContext;
		}

		@Override
		public void run() {
			
			try {
				
				String subject = "Seja bem vindo ao OpSocial";
				
				File email = new File(servletContext.getRealPath("email/" + "dia-1.html"));  
				Document doc = Jsoup.parse(email, "UTF-8");
				doc.getElementById("username").html("Oi " + user.getName().split(" ")[0]);
				
				new SendMail(EmailSender.HELLO_WOOP_EMAIL, subject, user.getEmail(), doc.html(), EmailSender.HELLO_WOOP_PERSONAL);
				
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}
	}
	
	private void insertGloblaMonitoringsTags(Account account) {
		
		MaintenanceMonitoringTagRemote monitoringTagRemote = (MaintenanceMonitoringTagRemote)
				RecoverMaintenance.recoverMaintenance("MonitoringTag");
		
		MaintenanceColorTagRemote colorTagRemote = (MaintenanceColorTagRemote) 
				RecoverMaintenance.recoverMaintenance("ColorTag");
		
		try {
			
			MonitoringTag monitoringTagSuggestion = new MonitoringTag();
			monitoringTagSuggestion.setAccount(account);
			monitoringTagSuggestion.setColorTag(colorTagRemote.getById(1L));
			monitoringTagSuggestion.setName("sugestão");
			
			monitoringTagRemote.save(monitoringTagSuggestion);
			
			MonitoringTag monitoringTagCritic = new MonitoringTag();
			monitoringTagCritic.setAccount(account);
			monitoringTagCritic.setColorTag(colorTagRemote.getById(2L));
			monitoringTagCritic.setName("crítica");
			
			monitoringTagRemote.save(monitoringTagCritic);

			MonitoringTag monitoringTagComplaint = new MonitoringTag();
			monitoringTagComplaint.setAccount(account);
			monitoringTagComplaint.setColorTag(colorTagRemote.getById(3L));
			monitoringTagComplaint.setName("reclamação");
			
			monitoringTagRemote.save(monitoringTagComplaint);
			
			MonitoringTag monitoringTagInfluencer = new MonitoringTag();
			monitoringTagInfluencer.setAccount(account);
			monitoringTagInfluencer.setColorTag(colorTagRemote.getById(4L));
			monitoringTagInfluencer.setName("influenciador");
			
			monitoringTagRemote.save(monitoringTagInfluencer);
			
			MonitoringTag monitoringTagCrisis = new MonitoringTag();
			monitoringTagCrisis.setAccount(account);
			monitoringTagCrisis.setColorTag(colorTagRemote.getById(5L));
			monitoringTagCrisis.setName("crise");
			
			monitoringTagRemote.save(monitoringTagCrisis);
			
			MonitoringTag monitoringTagCompliment = new MonitoringTag();
			monitoringTagCompliment.setAccount(account);
			monitoringTagCompliment.setColorTag(colorTagRemote.getById(6L));
			monitoringTagCompliment.setName("elogio");
			
			monitoringTagRemote.save(monitoringTagCompliment);
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
