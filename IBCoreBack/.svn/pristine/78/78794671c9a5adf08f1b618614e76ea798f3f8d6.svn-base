package br.com.opsocial.server.utils.tasks;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import br.com.opsocial.ejb.das.MaintenanceAccountRemote;
import br.com.opsocial.ejb.das.MaintenanceUserRemote;
import br.com.opsocial.ejb.entity.application.Account;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.generic.Persistent;
import br.com.opsocial.server.services.SendMail;
import br.com.opsocial.server.utils.RecoverMaintenance;

public class EmailsController {  
	
	private Timer timer;
	
	public EmailsController() {
		
		timer = new Timer();
		
		Calendar taskDate = Calendar.getInstance(); 
		taskDate.set(Calendar.DAY_OF_MONTH, taskDate.get(Calendar.DAY_OF_MONTH) + 1);
		taskDate.set(Calendar.HOUR_OF_DAY, 8);
		taskDate.set(Calendar.MINUTE, 0);
		taskDate.set(Calendar.SECOND, 0);
		Date taskTime = taskDate.getTime();

		timer.schedule(new Task(), taskTime, 86400 * 1000L);
	}
	
    class Task extends TimerTask {
        
    	public void run() {
    		sendEmail("Vamos falar sobre o OpSocial?", 2);
    		sendEmail("O dia está perfeito para uma análise de dados", 4);
    		sendEmail("Tudo tranquilo nos seus dias com o Op?", 5);
    		sendEmail("Amanhã é seu último dia de teste no OpSocial", 6);
    		sendEmail("Hoje é seu último dia de testes no OpSocial.", 7);
    		sendEmail("Como está sua experiência?", 9);
    		sendEmail("Hoje é seu último dia de testes no OpSocial. ", 13);
    		sendEmail("Como você está? Vamos marcar um dia pra conversar? ", 14);
    	}
	}

	private void sendEmail(String subject, Integer day) {
		
		Date date = new Date();
		date.setDate(date.getDate() - day);
		
		Date dateInit = new Date(date.getTime());
		dateInit.setTime(dateInit.getTime() / 1000 * 1000);
		dateInit.setHours(0);
		dateInit.setMinutes(0);
		dateInit.setSeconds(0);
		
		Date dateEnd = new Date(date.getTime());
		dateEnd.setHours(23);
		dateEnd.setMinutes(59);
		dateEnd.setSeconds(59);
			
		MaintenanceAccountRemote remote = (MaintenanceAccountRemote) RecoverMaintenance.recoverMaintenance("Account");
		
		MaintenanceUserRemote userRemote = (MaintenanceUserRemote) RecoverMaintenance.recoverMaintenance("User");

		List<Account> accounts = remote.listByCadastreDate(dateInit, dateEnd);
		
		for(Account account : accounts) { 
			
			boolean canContinue = true;
			
			if((day == 9 || day == 13) && account.getExtendTest().equals('F')) {
				canContinue = false;
			} else if(day == 14 && account.getClientType().equals('P')) {
				canContinue = false;
			}
			
			if(canContinue) {
			
				if(account.getPlanType().equals(Account.FREE)) {
					
					List<User> users = userRemote.listUsersByAccount(account.getIdAccount());
					
					for(User user : users) {
						
						try {
							
							File email = new File(Persistent.EMAILS_PATH + "dia-" + String.valueOf(day) + ".html");  
							Document doc = Jsoup.parse(email, "UTF-8");
							doc.getElementById("username").html("Oi " + user.getName().split(" ")[0]);
							
							if(day == 6 || day == 7) {
								new SendMail(subject, user.getEmail(), doc.html().replace("extendTestAccount", String.valueOf(account.getIdAccount())));	
							} else {
								new SendMail(subject, user.getEmail(), doc.html());
							}
							
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}
}
