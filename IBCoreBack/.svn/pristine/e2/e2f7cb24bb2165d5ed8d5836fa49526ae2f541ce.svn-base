package br.com.opsocial.server.actions.schedulings;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;

@RestController
@RequestMapping("opsocial")
public class ListSchedulingsAction extends ServerAction {
	
	@Override
	@RequestMapping(value = "/list_schedulings",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception {
		
		setParameters(new HashMap<String, Object>());

		User user = (User) getSession().getAttribute("user");
		
		MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
		
		// Facebook profiles
		
		List<Character> profileTypes = new ArrayList<Character>();
		profileTypes.add(Profile.FACEBOOK_PAGE);
		profileTypes.add(Profile.FACEBOOK);

		List<Profile> facebookProfiles = remote.getEntityByNetworkType(profileTypes, user.getAccount().getIdAccount());

		List<Profile> facebookProfilesDTOs = new ArrayList<Profile>();

		for(Profile profile : facebookProfiles) {
			facebookProfilesDTOs.add(profile);
		}

		getParameters().put("facebookprofiles", facebookProfilesDTOs);

		// Twitter profiles

		profileTypes = new ArrayList<Character>();
		profileTypes.add(Profile.TWITTER);

		List<Profile> twitterProfiles = remote.getEntityByNetworkType(profileTypes, user.getAccount().getIdAccount());

		List<Profile> twitterProfilesDTOs = new ArrayList<Profile>();

		for(Profile profile : twitterProfiles) {
			twitterProfilesDTOs.add(profile);
		}

		getParameters().put("twitterprofiles", twitterProfilesDTOs);

		// Instagram profiles

		profileTypes = new ArrayList<Character>();
		profileTypes.add(Profile.INSTAGRAM);

		List<Profile> instagramProfiles = remote.getEntityByNetworkType(profileTypes, user.getAccount().getIdAccount());

		List<Profile> instagramProfilesDTOs = new ArrayList<Profile>();

		for(Profile profile : instagramProfiles) {
			instagramProfilesDTOs.add(profile);
		}

		getParameters().put("instagramprofiles", instagramProfilesDTOs);

	}
}
