package br.com.opsocial.server.services;

import java.io.File;
import java.io.IOException;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.application.AccountUserDTO;
import br.com.opsocial.ejb.das.MaintenanceAccountRemote;
import br.com.opsocial.ejb.das.MaintenanceColorTagRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringTagRemote;
import br.com.opsocial.ejb.das.MaintenanceUserRemote;
import br.com.opsocial.ejb.entity.application.Account;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.generic.Persistent;
import br.com.opsocial.ejb.entity.monitoring.MonitoringTag;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.emails.EmailSender;

@RestController
@RequestMapping("opsocial")
public class AccountController {
	
	@CrossOrigin
	@RequestMapping(value = "/create_account",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Account> createAccount(AccountUserDTO accountUserDTO, HttpSession session, HttpServletRequest request) {
		
		MaintenanceAccountRemote accountRemote = (MaintenanceAccountRemote) RecoverMaintenance.recoverMaintenance("Account");
		MaintenanceUserRemote userRemote = (MaintenanceUserRemote) RecoverMaintenance.recoverMaintenance("User");
		
		Account account = new Account();
		User user = new User();
		
		try {
			
			account.setCity(accountUserDTO.getCity());
			//TODO é necessário somento no OpSocial BR
//			account.setState(accountUserDTO.getCountry());
			account.setCountry(accountUserDTO.getCountry());
			account.setPlanType(Account.FREEMIUM);
			account.setEnterprise(accountUserDTO.getCompany());
			account.setCadastreDate(new Date());
			account.setPlanExpire(null);
			
			//TODO é necessário somento no OpSocial BR
//				if(!req.getParameter("promotionalcode").trim().isEmpty()) {
//					account.setPromotionalCode(req.getParameter("promotionalcode").trim());
//				}

			user.setAccount(accountRemote.save(account));

			user.setName(accountUserDTO.getFirstName() + " " + accountUserDTO.getLastName());
			user.setEmail(accountUserDTO.getEmail());
			user.setPhone(accountUserDTO.getPhoneNumber());
			user.setPassword(accountUserDTO.getPassword());

			user.getAccount().setCadastreDate(new Date());	

			if(user.getCadastreDate() == null) {
				user.setCadastreDate(new Date());
			}

			user.setType('A');
			user.setShowInstagramAuthWindow('F');
			user.setShowLettersToClientsWindow('F');
			
			user = userRemote.save(user);
			
			//TODO é necessário somento no OpSocial BR
//			insertGlobalMonitoringsTags(user.getAccount());
			
			//TODO é necessário somento no OpSocial BR
//			new Thread(new PaymentEmail(user)).start();
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(null, HttpStatus.FORBIDDEN);		
		}
		
		//TODO Ver se retorna user ou account
		return new ResponseEntity<>(account, HttpStatus.OK);	
	}

	class PaymentEmail implements Runnable {
		
		private User user;
		
		public PaymentEmail(User user) {
			this.user = user;
		}

		@Override
		public void run() {
			
			try {
				
				String subject = "Olá, novo cliente OpSocial. ";
				
				File email = new File(Persistent.EMAILS_PATH + "email-novo-cliente.html");  
				Document doc = Jsoup.parse(email, "UTF-8");
				doc.getElementById("username").html("Oi " + user.getName().split(" ")[0]);
				
				new SendMail(EmailSender.HELLO_WOOP_EMAIL, subject, user.getEmail(), doc.html(), EmailSender.HELLO_WOOP_PERSONAL);
				
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}
	}

	private void insertGlobalMonitoringsTags(Account account) {

		MaintenanceMonitoringTagRemote monitoringTagRemote = (MaintenanceMonitoringTagRemote)
				RecoverMaintenance.recoverMaintenance("MonitoringTag");

		MaintenanceColorTagRemote colorTagRemote = (MaintenanceColorTagRemote) 
				RecoverMaintenance.recoverMaintenance("ColorTag");

		try {

			MonitoringTag monitoringTagSuggestion = new MonitoringTag();
			monitoringTagSuggestion.setAccount(account);
			monitoringTagSuggestion.setColorTag(colorTagRemote.getById(1L));
			monitoringTagSuggestion.setName("sugestão");

			monitoringTagRemote.save(monitoringTagSuggestion);

			MonitoringTag monitoringTagCritic = new MonitoringTag();
			monitoringTagCritic.setAccount(account);
			monitoringTagCritic.setColorTag(colorTagRemote.getById(2L));
			monitoringTagCritic.setName("crítica");

			monitoringTagRemote.save(monitoringTagCritic);

			MonitoringTag monitoringTagComplaint = new MonitoringTag();
			monitoringTagComplaint.setAccount(account);
			monitoringTagComplaint.setColorTag(colorTagRemote.getById(3L));
			monitoringTagComplaint.setName("reclamação");

			monitoringTagRemote.save(monitoringTagComplaint);

			MonitoringTag monitoringTagInfluencer = new MonitoringTag();
			monitoringTagInfluencer.setAccount(account);
			monitoringTagInfluencer.setColorTag(colorTagRemote.getById(4L));
			monitoringTagInfluencer.setName("influenciador");

			monitoringTagRemote.save(monitoringTagInfluencer);

			MonitoringTag monitoringTagCrisis = new MonitoringTag();
			monitoringTagCrisis.setAccount(account);
			monitoringTagCrisis.setColorTag(colorTagRemote.getById(5L));
			monitoringTagCrisis.setName("crise");

			monitoringTagRemote.save(monitoringTagCrisis);

			MonitoringTag monitoringTagCompliment = new MonitoringTag();
			monitoringTagCompliment.setAccount(account);
			monitoringTagCompliment.setColorTag(colorTagRemote.getById(6L));
			monitoringTagCompliment.setName("elogio");

			monitoringTagRemote.save(monitoringTagCompliment);

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

