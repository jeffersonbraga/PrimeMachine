package br.com.opsocial.server.actions.dashboard;

import java.util.Date;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.client.entity.primitive.PersistentList;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.das.MaintenanceProfileUserDashboardRemote;
import br.com.opsocial.ejb.das.MaintenanceUserRemote;
import br.com.opsocial.ejb.entity.application.ProfileUserDashboard;
import br.com.opsocial.ejb.entity.application.idclass.ProfileUserDashboardId;

@RestController
@RequestMapping("opsocial")
public class InsertProfileDashboardAction extends ServerAction {

	@Override
	@RequestMapping(value = "/insert_profile_dashboard",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		PersistentList<Profile> profilesChecked = (PersistentList<Profile>) getParameters().get("profilesChecked");
		PersistentList<Profile> profilesUnChecked = (PersistentList<Profile>) getParameters().get("profilesUnChecked");
		
		MaintenanceUserRemote userRemote = (MaintenanceUserRemote)
				RecoverMaintenance.recoverMaintenance("User");
		
		MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote)
				RecoverMaintenance.recoverMaintenance("Profile");
		
		MaintenanceProfileUserDashboardRemote profileUserDashboardRemote = (MaintenanceProfileUserDashboardRemote) 
				RecoverMaintenance.recoverMaintenance("ProfileUserDashboard");
		
		Long idUser = getUser().getIdUser();
		
		for(Profile profileDTO : profilesChecked.getPersistences()) {
			
			ProfileUserDashboardId profileUserDashboardId = new ProfileUserDashboardId();
			profileUserDashboardId.setProfile(profileDTO.getIdProfile());
			profileUserDashboardId.setUser(idUser);
			
			if(profileUserDashboardRemote.getById(profileUserDashboardId) == null) {
				
				ProfileUserDashboard profileUserDashboard = new ProfileUserDashboard();
				profileUserDashboard.setUser(userRemote.getById(idUser));
				profileUserDashboard.setProfile(profileRemote.getById(profileDTO.getIdProfile()));
				profileUserDashboard.setInsertionDate(new Date().getTime() / 1000L);
				
				profileUserDashboardRemote.save(profileUserDashboard);
			}
		}
		
		for(Profile profileDTO : profilesUnChecked.getPersistences()) {
			
			ProfileUserDashboardId profileUserDashboardId = new ProfileUserDashboardId();
			profileUserDashboardId.setProfile(profileDTO.getIdProfile());
			profileUserDashboardId.setUser(idUser);
			
			ProfileUserDashboard profileUserDashboard = profileUserDashboardRemote.getById(profileUserDashboardId);
			
			if(profileUserDashboard != null) {
				profileUserDashboardRemote.delete(profileUserDashboard);
			}
		}
		
	}

}
