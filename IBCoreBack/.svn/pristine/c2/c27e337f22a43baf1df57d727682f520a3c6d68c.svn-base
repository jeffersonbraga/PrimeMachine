package br.com.opsocial.server.actions.reports.twitter;

import java.util.HashMap;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.client.entity.report.twitter.ReportTwitterOverviewDTO;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.GenericDateInterval;
import br.com.opsocial.server.utils.reports.UtilReports;
import br.com.opsocial.server.utils.reports.xls.ReportTwitterOverviewXLS;

@RestController
@RequestMapping("opsocial")
public class ReportTwitterOverviewXLSAction extends ServerAction {

	@Override
	@RequestMapping(value = "/report_twitter_overview_xls",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		Profile profile = (Profile) getParameters().get("profile");
		Long dateFrom = ((br.com.opsocial.client.entity.primitive.Long) getParameters().get("dateFrom")).getValue();
		Long dateUntil = ((br.com.opsocial.client.entity.primitive.Long) getParameters().get("dateUntil")).getValue();
		
		setParameters(new HashMap<String, Object>());
		
		ReportTwitterOverviewDTO reportTwitterOverview = UtilReports.mountReportTwitterOverviewDTO(profile, new GenericDateInterval(dateFrom, dateUntil), null);

		ReportTwitterOverviewXLS reportTwitterOverviewXLS = new ReportTwitterOverviewXLS(reportTwitterOverview, profile); 
		reportTwitterOverviewXLS.createXLS();

		getParameters().put("xlsToDownload", new StringUtil(reportTwitterOverviewXLS.getFileName()));
		getParameters().put("xlsNameToDownload", new StringUtil(reportTwitterOverviewXLS.getFormattedFileName()));
		getParameters().put("idAccount", new br.com.opsocial.client.entity.primitive.Long(profile.getAccount().getIdAccount()));
		
	}

}
