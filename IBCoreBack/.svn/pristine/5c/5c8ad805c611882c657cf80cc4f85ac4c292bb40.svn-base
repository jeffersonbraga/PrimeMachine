package br.com.opsocial.server.utils.reports;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.TimerTask;

import org.jinstagram.Instagram;
import org.jinstagram.entity.comments.CommentData;
import org.jinstagram.entity.common.Pagination;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.users.basicinfo.UserInfoData;
import org.jinstagram.entity.users.feed.MediaFeed;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.jinstagram.entity.users.feed.UserFeed;
import org.jinstagram.entity.users.feed.UserFeedData;
import org.jinstagram.exceptions.InstagramBadRequestException;
import org.jinstagram.exceptions.InstagramException;
import org.jinstagram.exceptions.InstagramRateLimitException;

import br.com.opsocial.server.services.ServicesImpl;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.networksintegrations.InstagramIntegration;
import br.com.opsocial.server.utils.tasks.ValidateTokensController;
import br.com.opsocial.ejb.das.MaintenanceInstagramFollowerRemote;
import br.com.opsocial.ejb.das.MaintenanceInstagramPostCommentRemote;
import br.com.opsocial.ejb.das.MaintenanceInstagramPostLikeRemote;
import br.com.opsocial.ejb.das.MaintenanceInstagramPostTagRemote;
import br.com.opsocial.ejb.das.MaintenanceInstagramReportPostRemote;
import br.com.opsocial.ejb.das.MaintenanceInstagramReportRemote;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.das.MaintenanceReportControlRemote;
import br.com.opsocial.ejb.das.MaintenanceReportGenerateRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.idclass.InstagramFollowerId;
import br.com.opsocial.ejb.entity.application.idclass.InstagramPostLikeId;
import br.com.opsocial.ejb.entity.application.idclass.InstagramPostTagId;
import br.com.opsocial.ejb.entity.instagram.InstagramFollower;
import br.com.opsocial.ejb.entity.instagram.InstagramFollowerTrend;
import br.com.opsocial.ejb.entity.instagram.InstagramPostComment;
import br.com.opsocial.ejb.entity.instagram.InstagramPostLike;
import br.com.opsocial.ejb.entity.instagram.InstagramPostTag;
import br.com.opsocial.ejb.entity.instagram.InstagramReport;
import br.com.opsocial.ejb.entity.instagram.InstagramReportPost;
import br.com.opsocial.ejb.entity.report.ReportControl;
import br.com.opsocial.ejb.entity.report.ReportGenerate;

public class ReportInstagram extends TimerTask {

	private InstagramIntegration instagramIntegration;
	private Instagram instagram;

	private Profile profile;
	private Long reportDateStamp;

	private MaintenanceProfileRemote profileRemote;
	private MaintenanceReportGenerateRemote reportGenerateRemote;
	private MaintenanceReportControlRemote reportControlRemote;

	private MaintenanceInstagramReportPostRemote instagramReportPostRemote;
	private MaintenanceInstagramPostCommentRemote instagramPostCommentRemote;
	private MaintenanceInstagramPostLikeRemote instagramPostLikeRemote;
	private MaintenanceInstagramPostTagRemote instagramPostTagRemote;
	private MaintenanceInstagramFollowerRemote instagramFollowerRemote;
	private MaintenanceInstagramReportRemote instagramReportRemote;

	public static final Character IS_A_FOLLOWER = 'T';
	public static final Character NOT_A_FOLLOWER = 'F';

	public static final String PROFILE_FOLLOWERS = "profile_followers";
	public static final String PROFILE_FOLLOWERS_ADDS = "profile_followers_adds";
	public static final String PROFILE_FOLLOWERS_REMOVES = "profile_followers_removes";

	public static final Integer UPDATE_POSTS_PERIOD = 30;
	
	public static final Long MAX_ALREADY_FOLLOWERS_SEQUENCE = 500L;

	private boolean isFirstDay;

	private ReportGenerate reportGenerate;

	// 1 hora e 1 minuto (acrescentado 1 minuto de "delay") 
	public static final Long REQUEST_WINDOW_TIME = 3660000L;

	public ReportInstagram(Profile profile, Long reportDateStamp) {

		instagramIntegration = new InstagramIntegration();

		this.reportDateStamp = reportDateStamp;
		this.profile = profile;

		profileRemote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
		reportGenerateRemote = (MaintenanceReportGenerateRemote) RecoverMaintenance.recoverMaintenance("ReportGenerate");
		reportControlRemote = (MaintenanceReportControlRemote) RecoverMaintenance.recoverMaintenance("ReportControl");

		instagramReportPostRemote = (MaintenanceInstagramReportPostRemote) RecoverMaintenance.recoverMaintenance("InstagramReportPost");
		instagramPostCommentRemote = (MaintenanceInstagramPostCommentRemote) RecoverMaintenance.recoverMaintenance("InstagramPostComment");
		instagramPostLikeRemote = (MaintenanceInstagramPostLikeRemote) RecoverMaintenance.recoverMaintenance("InstagramPostLike");
		instagramPostTagRemote = (MaintenanceInstagramPostTagRemote) RecoverMaintenance.recoverMaintenance("InstagramPostTag");
		instagramFollowerRemote = (MaintenanceInstagramFollowerRemote) RecoverMaintenance.recoverMaintenance("InstagramFollower");
		instagramReportRemote = (MaintenanceInstagramReportRemote) RecoverMaintenance.recoverMaintenance("InstagramReport");
	}

	@Override
	public void run() {

		try {

			updateInstagramReportFollowers(Long.valueOf(profile.getNetworkId()));
			retrieveInsightsForDay();
			if(reportControlRemote.getEntityCount(profile.getNetworkId(), Profile.INSTAGRAM) > 1) {

				instagram = instagramIntegration.getInstagram(profile);

				refreshPostsInsights(Long.valueOf(profile.getNetworkId()));
			} else {

				if(reportGenerate != null) {

					MaintenanceReportGenerateRemote reportGenerateRemote = (MaintenanceReportGenerateRemote) RecoverMaintenance.recoverMaintenance("ReportGenerate");

					reportGenerate = reportGenerateRemote.getById(reportGenerate.getIdReportGenerate());

					reportGenerate.setState(ReportFacebook.FINALIZED);
					reportGenerateRemote.save(reportGenerate);
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	/**
	 * 
	 * Método que exporta todos os dados relativos a followers/unfollowers da estrutura antiga existente na entidade InstagramFollower 
	 * para a nova concentrada na entidade InstagramReport, caso ainda não tenha sido feito esse processo.
	 * 
	 * Muito importante manter esse método sendo utilizado antes da geração de relatórios, já que dessa forma,
	 * quando um perfil voltar a ter seus dados de relatório gerados, o Op será capaz de atualizar os dados de forma incremental, 
	 * na medida em que perfis inseridos em algum momento na história do OP=p voltem a ser inclusos.
	 * 
	 * @param idInstagramUser
	 */
	public void updateInstagramReportFollowers(Long idInstagramUser) {
		
		try {
			
			String idProfile = idInstagramUser.toString();
			
			ReportGenerate reportGenerate = reportGenerateRemote.getEntity(idProfile, Profile.INSTAGRAM);
			
			if(reportGenerate.getIsInNewInstaFollowersReports().equals('F')) {
				
				Long followersTotal = 0L;
				
				List<InstagramFollowerTrend> instagramFollowerTrends = 
						instagramFollowerRemote.getInstagramFollowersCount(idInstagramUser);
				
				if(!instagramFollowerTrends.isEmpty()) {
					
					InstagramFollowerTrend instagramFollowerTrend = instagramFollowerTrends.get(0);
					
					InstagramReport instagramReportFollowers = new InstagramReport();
					instagramReportFollowers.setIdInstagramUser(idProfile);
					instagramReportFollowers.setProperty(PROFILE_FOLLOWERS);
					instagramReportFollowers.setDate(instagramFollowerTrend.getDate());
					instagramReportFollowers.setValue(instagramFollowerTrend.getNewFollowers());
					
					instagramReportRemote.save(instagramReportFollowers);
					
					followersTotal = instagramFollowerTrend.getNewFollowers();
					instagramFollowerTrends.remove(0);
				}
				
				for (InstagramFollowerTrend instagramFollowerTrend : instagramFollowerTrends) {
					
					try {
						
						followersTotal += instagramFollowerTrend.getBalanceFollowers();
						
						InstagramReport followers = new InstagramReport();
						followers.setIdInstagramUser(idProfile);
						followers.setProperty(PROFILE_FOLLOWERS);
						followers.setDate(instagramFollowerTrend.getDate());
						followers.setValue(followersTotal);
						
						instagramReportRemote.save(followers);
						
						InstagramReport followersAdds = new InstagramReport();
						followersAdds.setIdInstagramUser(idProfile);
						followersAdds.setProperty(PROFILE_FOLLOWERS_ADDS);
						followersAdds.setDate(instagramFollowerTrend.getDate());
						followersAdds.setValue(instagramFollowerTrend.getNewFollowers());
						
						instagramReportRemote.save(followersAdds);
						
						InstagramReport followersRemoves = new InstagramReport();
						followersRemoves.setIdInstagramUser(idProfile);
						followersRemoves.setProperty(PROFILE_FOLLOWERS_REMOVES);
						followersRemoves.setDate(instagramFollowerTrend.getDate());
						followersRemoves.setValue(instagramFollowerTrend.getUnfollowers());
						
						instagramReportRemote.save(followersRemoves);
						
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				
				reportGenerate = reportGenerateRemote.getEntity(idProfile, Profile.INSTAGRAM);
				reportGenerate.setIsInNewInstaFollowersReports('T');
				
				try {
					
					reportGenerateRemote.save(reportGenerate);
					
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	public void retrieveInsightsForDay() {

		boolean insightsSaved = true;

		if(reportControlRemote.getEntityByNetwork(profile.getNetworkId(), Profile.INSTAGRAM, reportDateStamp) == null) {

			do {

				try {

					if(reportControlRemote.getEntityCount(profile.getNetworkId(), Profile.INSTAGRAM) > 0) {
						isFirstDay = false;
					} else {
						isFirstDay = true;
					}

					instagram = instagramIntegration.getInstagram(profile);

					UserInfoData userInfoData = instagram.getCurrentUserInfo().getData();
					
					profile.setScreenName(userInfoData.getUsername());
					profile.setAvatar(userInfoData.getProfilePicture());
					profile.setFollowers(Long.valueOf(userInfoData.getCounts().getFollowedBy()));
					profile.setFollows(Long.valueOf(userInfoData.getCounts().getFollows()));

					try {

						profileRemote.save(profile);

					} catch (Exception e) {
						e.printStackTrace();
					}

					ReportControl reportControl = new ReportControl();
					reportControl.setNetworkId(profile.getNetworkId());
					reportControl.setNetworkType(profile.getType());
					reportControl.setDate(reportDateStamp);
					reportControl.setStartDate(new Date().getTime() / 1000L);

					reportControl = reportControlRemote.save(reportControl);

					// Save Instagram Followers total until reportDateStamp.
					InstagramReport instRepFollowers = new InstagramReport();
					instRepFollowers.setIdInstagramUser(profile.getNetworkId());
					instRepFollowers.setProperty(PROFILE_FOLLOWERS);
					instRepFollowers.setDate(reportDateStamp);
					instRepFollowers.setValue(Long.valueOf(userInfoData.getCounts().getFollowedBy()));

					instagramReportRemote.save(instRepFollowers);

					if(isFirstDay) {

						saveInstagramFollowers(Long.valueOf(profile.getNetworkId()));

					} else {
						InstagramReport instRepFollowersYesterday = 
								instagramReportRemote.getEntityBeforeDate(profile.getNetworkId(), PROFILE_FOLLOWERS, reportDateStamp);

						InstagramReport instRepFollowersAdds = updateInstagramFollowers(Long.valueOf(profile.getNetworkId()));

						// Save Instagram Followers Removes until reportDateStamp.
						InstagramReport instRepFollowersRemoves = new InstagramReport();
						instRepFollowersRemoves.setIdInstagramUser(profile.getNetworkId());
						instRepFollowersRemoves.setProperty(PROFILE_FOLLOWERS_REMOVES);
						instRepFollowersRemoves.setDate(reportDateStamp);
						if(instRepFollowers.getValue() > instRepFollowersYesterday.getValue()) {
							instRepFollowersRemoves.setValue(Math.abs((instRepFollowers.getValue() - instRepFollowersYesterday.getValue()) - instRepFollowersAdds.getValue()));
						} else {
							instRepFollowersRemoves.setValue((instRepFollowersYesterday.getValue() - instRepFollowers.getValue()) + instRepFollowersAdds.getValue());
						}

						instagramReportRemote.save(instRepFollowersRemoves);
					}

					Long nextMinId = instagramReportPostRemote.getLastIdMedia(Long.valueOf(profile.getNetworkId()));
					Pagination pagination;
					if(nextMinId == null) {
						pagination = null;
					} else {
						pagination = new Pagination();
						pagination.setNextMinId(nextMinId + "_" + profile.getNetworkId());
					}

					saveInstagramReportsPosts(Long.valueOf(profile.getNetworkId()), pagination);

					reportControl = reportControlRemote.getById(reportControl.getIdReportsControl());

					reportControl.setFinishDate(new Date().getTime() / 1000L);
					reportControlRemote.save(reportControl);

					insightsSaved = true;

				}  catch (InstagramBadRequestException e) {
					
					insightsSaved = true;
					
					ValidateTokensController.validatingTokens(profile.getAccount());
					
					e.printStackTrace();
					
				} catch (InstagramRateLimitException e) {
					if(e.getRemainingLimitStatus() <= 0) {

						insightsSaved = false;

						try {
							System.out.println("Parando relatório..:" + profile.getNetworkId());
							Thread.sleep(REQUEST_WINDOW_TIME);
							System.out.println("Continuando relatório..:" + profile.getNetworkId());
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
					e.printStackTrace();
				} catch (InstagramException e) {
					if(e.getRemainingLimitStatus() <= 0) {

						insightsSaved = false;

						try {
							System.out.println("Parando relatório..:" + profile.getNetworkId());
							Thread.sleep(REQUEST_WINDOW_TIME);
							System.out.println("Continuando relatório..:" + profile.getNetworkId());
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
					e.printStackTrace();
				} catch (Exception e) {
					insightsSaved = true;
					e.printStackTrace();
				}

			} while (!insightsSaved);
		}
	}

	private void refreshPostsInsights(Long idInstagramUser) {

		Calendar untilDate = new GregorianCalendar();
		untilDate.set(Calendar.DAY_OF_MONTH, untilDate.get(Calendar.DAY_OF_MONTH) - 1);

		Calendar fromDate = new GregorianCalendar(untilDate.get(Calendar.YEAR),
				untilDate.get(Calendar.MONTH),
				untilDate.get(Calendar.DAY_OF_MONTH));
		fromDate.set(Calendar.DAY_OF_MONTH, untilDate.get(Calendar.DAY_OF_MONTH) - (UPDATE_POSTS_PERIOD - 1));

		Long dateFrom = UtilFunctions.getMidnightDateNoDaylightTime(fromDate.getTime());

		Pagination pagination = null;

		do {

			try {

				MediaFeed mediaFeed;
				if(pagination == null) {
					mediaFeed = instagram.getRecentMediaFeed(idInstagramUser.toString(), 20, null, null, untilDate.getTime(), null);
				} else {
					mediaFeed = instagram.getRecentMediaNextPage(pagination);
				}

				pagination = mediaFeed.getPagination();
				List<MediaFeedData> feeds = mediaFeed.getData();

				if(feeds != null) {
					for(MediaFeedData feed : feeds) {

						try {

							InstagramReportPost instagramReportPost = instagramReportPostRemote.getById(new java.lang.Long(feed.getId().substring(0,feed.getId().indexOf("_"))));
							instagramReportPost.setAvatar(feed.getUser().getProfilePictureUrl());
							instagramReportPost.setLikes(feed.getLikes().getCount());
							instagramReportPost.setComments(feed.getComments().getCount());

							instagramReportPost.setPictureCaption(feed.getCaption() != null ? feed.getCaption().getText() : null);

							instagramReportPostRemote.save(instagramReportPost);

							instagramReportPost = instagramReportPostRemote.getById(instagramReportPost.getIdMedia());

							saveInstagramTags(feed.getTags(), instagramReportPost);

							if(feed.getComments().getCount() > 0) {
								saveInstagramPostComments(instagramReportPost);
							}
							if(feed.getLikes().getCount() > 0) {
								saveInstagramLikes(instagramReportPost, feed.getCreatedTime());
							}

						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					
					// Verifica se os posts do perído definido em UPDATE_POSTS_PERIOD já foram todos atualizados.
					if(!feeds.isEmpty()) {
						Long createdTime = Long.valueOf(feeds.get(feeds.size() - 1).getCreatedTime());
						if(dateFrom > createdTime) {
							break;
						}
					}
					
				}

			} catch (InstagramBadRequestException e) {
				
				ValidateTokensController.validatingTokens(profile.getAccount());
				pagination.setNextMaxId(null);
				pagination.setNextMinId(null);
				
				e.printStackTrace();
			} catch (InstagramRateLimitException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idInstagramUser);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (InstagramException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idInstagramUser);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}

		} while (pagination.getNextMaxId() != null || pagination.getNextMinId() != null);
	}

	private void saveInstagramFollowers(Long idProfile) {

		Pagination pagination = null;

		do {

			try {

				UserFeed userFeed;
				if(pagination == null) {
					userFeed = instagram.getUserFollowedByList(idProfile.toString());
				} else {
					userFeed = instagram.getUserFollowListNextPage(pagination);
				}

				pagination = userFeed.getPagination();
				List<UserFeedData> users = userFeed.getUserList();

				for(UserFeedData user : users) {

					InstagramFollower instagramFollower = new InstagramFollower();
					instagramFollower.setIdProfile(idProfile);
					instagramFollower.setFollowerId(Long.valueOf(user.getId()));
					instagramFollower.setUserName(user.getUserName());
					instagramFollower.setFullName(user.getFullName());
					instagramFollower.setProfilePicture(user.getProfilePictureUrl());
					instagramFollower.setIsStillFollower(IS_A_FOLLOWER);
					instagramFollower.setFollowingDate(reportDateStamp);

					try {

						instagramFollowerRemote.save(instagramFollower);

					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} catch (InstagramBadRequestException e) {
				
				ValidateTokensController.validatingTokens(profile.getAccount());
				pagination.setNextUrl(null);
				
				e.printStackTrace();
			} catch (InstagramRateLimitException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idProfile);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (InstagramException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idProfile);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			}

		} while (pagination.getNextUrl() != null);

	}

	private InstagramReport updateInstagramFollowers(Long idProfile) {

		// Save Instagram Followers for the current day.
		InstagramReport instRepFollowersAdds = new InstagramReport();
		instRepFollowersAdds.setIdInstagramUser(idProfile.toString());
		instRepFollowersAdds.setProperty(PROFILE_FOLLOWERS_ADDS);
		instRepFollowersAdds.setDate(reportDateStamp);

		Long alreadyFollowersSequence = 0L;
		
		Long followersAdds = 0L;
		Pagination pagination = null;

		do {

			try {

				UserFeed userFeed;
				if(pagination == null) {
					userFeed = instagram.getUserFollowedByList(idProfile.toString());
				} else {
					userFeed = instagram.getUserFollowedByListNextPage(pagination);
				}

				pagination = userFeed.getPagination();
				List<UserFeedData> users = userFeed.getUserList();

				for(UserFeedData user : users) {

					InstagramFollowerId instagramFollowerId = new InstagramFollowerId();
					instagramFollowerId.setFollowerId(Long.valueOf(user.getId()));
					instagramFollowerId.setIdProfile(idProfile);

					InstagramFollower instagramFollower = instagramFollowerRemote.getById(instagramFollowerId);

					if(instagramFollower == null) {

						instagramFollower = new InstagramFollower();
						instagramFollower.setIdProfile(idProfile);
						instagramFollower.setFollowerId(Long.valueOf(user.getId()));
						instagramFollower.setUserName(user.getUserName());
						instagramFollower.setFullName(user.getFullName());
						instagramFollower.setProfilePicture(user.getProfilePictureUrl());
						instagramFollower.setIsStillFollower(IS_A_FOLLOWER);
						instagramFollower.setFollowingDate(reportDateStamp);

						try {

							instagramFollowerRemote.save(instagramFollower);
							followersAdds++;
							followersAdds += alreadyFollowersSequence;
							alreadyFollowersSequence = 0L;

						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						alreadyFollowersSequence++;
						if(alreadyFollowersSequence.equals(MAX_ALREADY_FOLLOWERS_SEQUENCE)) {
							pagination.setNextUrl(null);
							break;
						}
					}
				}

			} catch (InstagramBadRequestException e) {
				
				ValidateTokensController.validatingTokens(profile.getAccount());
				pagination.setNextUrl(null);
				
				e.printStackTrace();
			} catch (InstagramRateLimitException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idProfile);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (InstagramException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idProfile);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			}

		} while (pagination.getNextUrl() != null);

		instRepFollowersAdds.setValue(followersAdds);

		try {

			instRepFollowersAdds = instagramReportRemote.save(instRepFollowersAdds);

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return instRepFollowersAdds;
	}

	private void saveInstagramReportsPosts(Long idInstagramUser, Pagination pagination) {

		do {

			try {

				MediaFeed mediaFeed;
				if(pagination == null) {
					mediaFeed = instagram.getRecentMediaFeed(idInstagramUser.toString());
				} else {
					if(pagination.getNextMaxId() != null) {
						mediaFeed = instagram.getRecentMediaNextPage(pagination);
					} else {
						mediaFeed = instagram.getRecentMediaFeed(idInstagramUser.toString(), 20, pagination.getNextMinId(), null, null, null);
					}
				}

				pagination = mediaFeed.getPagination();
				List<MediaFeedData> feeds = mediaFeed.getData();

				if(feeds != null) {
					for(MediaFeedData feed : feeds) { 

						InstagramReportPost instagramReportPost = new InstagramReportPost();
						instagramReportPost.setIdMedia(new java.lang.Long(feed.getId().substring(0,feed.getId().indexOf("_"))));
						instagramReportPost.setIdInstagramUser(Long.valueOf(feed.getUser().getId()));
						instagramReportPost.setUserName(feed.getUser().getUserName());
						instagramReportPost.setFullName(feed.getUser().getFullName());
						instagramReportPost.setAvatar(feed.getUser().getProfilePictureUrl());
						instagramReportPost.setCreateTime(feed.getCreatedTime());
						instagramReportPost.setFilter(feed.getImageFilter());
						instagramReportPost.setLink(feed.getLink());
						instagramReportPost.setType(feed.getType());
						instagramReportPost.setLikes(feed.getLikes().getCount());
						instagramReportPost.setComments(feed.getComments().getCount());

						instagramReportPost.setPictureUrl(feed.getImages().getLowResolution().getImageUrl());
						instagramReportPost.setPictureHeight(feed.getImages().getLowResolution().getImageHeight());
						instagramReportPost.setPictureWidth(feed.getImages().getLowResolution().getImageWidth());
						instagramReportPost.setPictureCaption(feed.getCaption() != null ? feed.getCaption().getText() : null);

						try {

							instagramReportPostRemote.save(instagramReportPost);

							instagramReportPost = instagramReportPostRemote.getById(instagramReportPost.getIdMedia());

							saveInstagramTags(feed.getTags(), instagramReportPost);

							if(feed.getComments().getCount() > 0) {
								saveInstagramPostComments(instagramReportPost);
							}
							if(feed.getLikes().getCount() > 0) {
								saveInstagramLikes(instagramReportPost, feed.getCreatedTime());
							}

						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (Exception e) {
							e.printStackTrace();
						}

					}
				}

			} catch (InstagramBadRequestException e) {
				
				ValidateTokensController.validatingTokens(profile.getAccount());
				pagination.setNextMaxId(null);
				pagination.setNextMinId(null);
				
				e.printStackTrace();
			} catch (InstagramRateLimitException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idInstagramUser);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (InstagramException e) {
				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + idInstagramUser);
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}

		} while (pagination.getNextMaxId() != null || pagination.getNextMinId() != null);

	}

	private void saveInstagramPostComments(InstagramReportPost instagramReportPost) {

		boolean commentsSaved = true;

		do {

			List<CommentData> comments = new ArrayList<CommentData>();

			try {

				comments = instagram.getMediaComments(instagramReportPost.getIdMedia() + "_" + instagramReportPost.getIdInstagramUser()).getCommentDataList();

				for(CommentData comment : comments) {

					try {
					
						InstagramPostComment instagramPostComment = new InstagramPostComment();
						instagramPostComment.setIdComment(Long.valueOf(comment.getId()));
						instagramPostComment.setText(comment.getText());
						instagramPostComment.setIdInstagramUser(Long.valueOf(comment.getCommentFrom().getId()));
						instagramPostComment.setUserName(comment.getCommentFrom().getUsername());
						instagramPostComment.setFullName(comment.getCommentFrom().getFullName());
						instagramPostComment.setProfilePicture(comment.getCommentFrom().getProfilePicture());
						instagramPostComment.setCreateTime(comment.getCreatedTime());
						instagramPostComment.setInstagramReportPost(instagramReportPost);

						instagramPostCommentRemote.save(instagramPostComment);

					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				commentsSaved = true;

			} catch (InstagramBadRequestException e) {
				
				ValidateTokensController.validatingTokens(profile.getAccount());
				commentsSaved = true;
				
				e.printStackTrace();
			} catch (InstagramRateLimitException e) {
				if(e.getRemainingLimitStatus() <= 0) {

					commentsSaved = false;

					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + instagramReportPost.getIdInstagramUser());
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (InstagramException e) {
				if(e.getRemainingLimitStatus() <= 0) {

					commentsSaved = false;

					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + instagramReportPost.getIdInstagramUser());
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (Exception e) {
				commentsSaved = true;
				e.printStackTrace();
			}

		} while (!commentsSaved);

	}

	private void saveInstagramLikes(InstagramReportPost instagramReportPost, String createdTime) {

		boolean likesSaved = true;

		do {

			List<User> users = new ArrayList<User>();

			try {

				users = instagram.getUserLikes(instagramReportPost.getIdMedia() + "_" + instagramReportPost.getIdInstagramUser()).getUserList();

				for(User user : users) {

					InstagramPostLike instagramPostLike;

					InstagramPostLikeId instagramPostLikeId = new InstagramPostLikeId();
					instagramPostLikeId.setIdInstagramUser(Long.valueOf(user.getId()));
					instagramPostLikeId.setInstagramReportPost(instagramReportPost.getIdMedia());

					instagramPostLike = instagramPostLikeRemote.getById(instagramPostLikeId);

					if(instagramPostLike == null) {

						instagramPostLike = new InstagramPostLike();
						instagramPostLike.setInstagramReportPost(instagramReportPost);
						instagramPostLike.setIdInstagramUser(Long.valueOf(user.getId()));
						instagramPostLike.setProfilePicture(user.getProfilePictureUrl());
						instagramPostLike.setUserName(user.getUserName());
						instagramPostLike.setFullName(user.getFullName());
						instagramPostLike.setCreateTime(createdTime);

						try {

							instagramPostLikeRemote.save(instagramPostLike);

						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (Exception e) {
							e.printStackTrace();
						}
					}			
				}

				likesSaved = true;

			} catch (InstagramBadRequestException e) {
				
				ValidateTokensController.validatingTokens(profile.getAccount());
				likesSaved = true;
				
				e.printStackTrace();
			} catch (InstagramRateLimitException e) {

				likesSaved = false;

				if(e.getRemainingLimitStatus() <= 0) {
					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + instagramReportPost.getIdInstagramUser());
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (InstagramException e) {
				if(e.getRemainingLimitStatus() <= 0) {

					likesSaved = false;

					try {
						System.out.println("Parando relatório..:" + profile.getNetworkId());
						Thread.sleep(REQUEST_WINDOW_TIME);
						System.out.println("Continuando relatório..:" + instagramReportPost.getIdInstagramUser());
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			} catch (Exception e) {
				likesSaved = true;
				e.printStackTrace();
			}

		} while (!likesSaved);

	}

	private void saveInstagramTags(List<String> tags, InstagramReportPost instagramReportPost) {

		for(String tag : tags) {

			try {

				InstagramPostTag instagramPostTag;

				InstagramPostTagId instagramPostTagId = new InstagramPostTagId();
				instagramPostTagId.setInstagramReportPost(instagramReportPost.getIdMedia());
				instagramPostTagId.setTag(tag);

				instagramPostTag = instagramPostTagRemote.getById(instagramPostTagId);

				if(instagramPostTag == null) {

					instagramPostTag = new InstagramPostTag();
					instagramPostTag.setInstagramReportPost(instagramReportPost);
					instagramPostTag.setTag(tag);

					try {

						instagramPostTagRemote.save(instagramPostTag);

					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	public ReportGenerate getReportGenerate() {
		return reportGenerate;
	}

	public void setReportGenerate(ReportGenerate reportGenerate) {
		this.reportGenerate = reportGenerate;
	}

}
