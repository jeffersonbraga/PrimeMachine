package br.com.opsocial.server.actions.reports.facebook;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.primitive.Date;
import br.com.opsocial.client.entity.report.facebook.ReportFacebookContentDTO;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.GenericDateInterval;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.reports.UtilReports;
import br.com.opsocial.ejb.entity.application.Profile;

@RestController
@RequestMapping("opsocial")
public class ReportFacebookContentAction extends ServerAction {

	private Profile profile;
	private Integer period;
	
	private GenericDateInterval genericDateInterval;
	
	@Override
	@RequestMapping(value = "/report_facebook_content",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		profile = (Profile) getParameters().get("profile");
		
		if(getParameters().containsKey("period")) {
            period = (Integer) getParameters().get("period");
            getDatesByPeriod(period);
        } else {
            Date dateFrom = (Date) getParameters().get("dateFrom");
            Date dateUntil = (Date) getParameters().get("dateUntil");

            Calendar fromDate = new GregorianCalendar(dateFrom.getValue().getYear() + 1900, dateFrom.getValue().getMonth(), dateFrom.getValue().getDate());
            Calendar untilDate = new GregorianCalendar(dateUntil.getValue().getYear() + 1900, dateUntil.getValue().getMonth(), dateUntil.getValue().getDate());

            getDates(fromDate, untilDate);
        }
		
		setParameters(new HashMap<String, Object>());
		
		ReportFacebookContentDTO reportFacebookContent = UtilReports.mountReportFacebookContentDTO(profile, genericDateInterval);
		
		getParameters().put("reportFacebookContent", reportFacebookContent);
	}

	private void getDatesByPeriod(Integer period) {

        Calendar untilDate = new GregorianCalendar();
        untilDate.set(Calendar.DAY_OF_MONTH,untilDate.get(Calendar.DAY_OF_MONTH) - 3);
        Calendar fromDate = new GregorianCalendar(untilDate.get(Calendar.YEAR),
                                                    untilDate.get(Calendar.MONTH),
                                                    untilDate.get(Calendar.DAY_OF_MONTH));
        fromDate.set(Calendar.DAY_OF_MONTH, untilDate.get(Calendar.DAY_OF_MONTH) - (period - 1));

        genericDateInterval = new GenericDateInterval(UtilFunctions.getDateForFacebookReport(fromDate), UtilFunctions.getDateForFacebookReport(untilDate));
    }

    private void getDates(Calendar fromDate, Calendar untilDate) {
    	genericDateInterval = new GenericDateInterval(UtilFunctions.getDateForFacebookReport(fromDate), UtilFunctions.getDateForFacebookReport(untilDate));
    }
}
