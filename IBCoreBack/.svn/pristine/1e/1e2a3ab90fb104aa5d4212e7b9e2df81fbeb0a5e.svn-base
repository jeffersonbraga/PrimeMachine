package br.com.opsocial.server.actions.profiles;

import java.util.HashMap;
import java.util.UUID;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.instagram.InstagramPostHelper;
import das.MaintenanceInstagramDeviceRemote;
import das.MaintenanceProfileRemote;
import entity.application.Profile;
import entity.instagram.InstagramDevice;

@RestController
@RequestMapping("opsocial")
public class InsertInstagramSchedulingAction extends ServerAction {

	@Override
	@RequestMapping(value = "/insert_instagram_scheduling",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {
		
		Profile profileDTO = (Profile) getParameters().get("profile");
		
		setParameters(new HashMap<String, Object>());
		
		Boolean isAuthenticated;
		
		MaintenanceInstagramDeviceRemote instagramDeviceRemote = (MaintenanceInstagramDeviceRemote) 
				RecoverMaintenance.recoverMaintenance("InstagramDevice");
		MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote)
				RecoverMaintenance.recoverMaintenance("Profile");
		
		Profile profile = profileRemote.getById(profileDTO.getIdProfile());
		
		String instagramGUID;
		String instagramDeviceId;
		String instagramPhoneId;
		InstagramDevice instagramDevice;
		if(profile.getInstagramDevice() == null) {
			
			instagramGUID = UUID.randomUUID().toString();
			instagramPhoneId = UUID.randomUUID().toString();
			instagramDeviceId = "android-" + UtilFunctions.generateMD5Hash(profile.getScreenName() + profile.getInstagramPassword());
			
			instagramDevice = instagramDeviceRemote.getById(instagramDeviceRemote.getInstagramDeviceLessUsedId());
		} else {
			instagramGUID = profile.getInstagramGUID();
			instagramDeviceId = profile.getInstagramDeviceId();
			instagramPhoneId = profile.getInstagramPhoneId();
			instagramDevice = profile.getInstagramDevice();
		}
		
		InstagramPostHelper instagramPostHelper = new InstagramPostHelper();
		isAuthenticated = instagramPostHelper.authenticateUser(profileDTO.getNetworkId(), profileDTO.getScreenName(), profileDTO.getInstagramPassword(), 
				instagramDevice, instagramGUID, instagramDeviceId, instagramPhoneId);
		
		profile = profileRemote.getById(profileDTO.getIdProfile());
		profile.setInstagramGUID(instagramGUID);
		profile.setInstagramDeviceId(instagramDeviceId);
		profile.setInstagramPhoneId(instagramPhoneId);
		profile.setInstagramDevice(instagramDevice);
		
		if(isAuthenticated) {
			profile.setScreenName(profileDTO.getScreenName());
			profile.setInstagramPassword(profileDTO.getInstagramPassword());
			profile.setIsSchedulingAuthenticated(Profile.ACTIVE);
		}
		
		profileRemote.save(profile);
		
		getParameters().put("errorMessage", new StringUtil(instagramPostHelper.extractLoginErrorMessage()));
		getParameters().put("isAuthenticated", new br.com.opsocial.client.entity.primitive.Boolean(isAuthenticated));
	}

}
