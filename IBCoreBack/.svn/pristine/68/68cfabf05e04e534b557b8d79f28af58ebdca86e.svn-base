package br.com.opsocial.server.site;

import java.io.File;
import java.io.IOException;

import org.apache.commons.lang3.RandomStringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.OpSocialBackApplication;
import br.com.opsocial.ejb.das.MaintenanceUserRemote;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.generic.Persistent;
import br.com.opsocial.server.services.SendMail;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.emails.EmailSender;

@RestController
@RequestMapping("opsocial")
public class RedefinePasswordServlet {

	private User user;

	@CrossOrigin
	@RequestMapping(value = "/redefine_password_site",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<String> doPost(String email) throws IOException {
		
		MaintenanceUserRemote userRemote = (MaintenanceUserRemote) RecoverMaintenance
				.recoverMaintenance("User");

		user = userRemote.getByEmail(email);

		if (user != null) {
			
			String newPassWord = RandomStringUtils.random(10, true, true);
			
			// WoopSocial
			String subject = "Forgotten password";
			
			// OpSocial
//			String subject = "Nova senha OpSocial";
			
			File fileEmail = new File(OpSocialBackApplication.EMAILS_DIR + "new-password.html");
			Document doc = Jsoup.parse(fileEmail, "UTF-8");
			doc.getElementById("username").html("Hello " + user.getName().split(" ")[0] + ",");
			doc.getElementById("useremail").html(user.getEmail());
			doc.getElementById("userpassword").html(newPassWord);
			
			new SendMail(EmailSender.HELLO_WOOP_EMAIL, subject, user.getEmail(), doc.html(), EmailSender.HELLO_WOOP_PERSONAL);
			
			String password = newPassWord; //user.getPassword();
			PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
			String hashedPassword = passwordEncoder.encode(password);
			
			user.setPassword(hashedPassword);
			
			try {
				
				userRemote.save(user);
				
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}

			return new ResponseEntity<>("Nova senha enviada com sucesso!", HttpStatus.OK);
				
		} else {
			return new ResponseEntity<>("E-mail n√£o encontrado.", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
}
