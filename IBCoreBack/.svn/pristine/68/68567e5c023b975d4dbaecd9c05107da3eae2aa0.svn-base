package br.com.opsocial.server.actions.application;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.OptimisticLockException;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;

@RestController
@RequestMapping("opsocial")
public class ComposeAction extends ServerAction {

	@CrossOrigin
	@RequestMapping(value = "/get_profiles",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Profile>> doAction(Integer idAccount) throws Exception {
		
		MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");

//		User user = (User) getSession().getAttribute("user");
		
		List<Character> types = new ArrayList<Character>();
		types.add(Profile.FACEBOOK);
		types.add(Profile.FACEBOOK_PAGE);
		types.add(Profile.TWITTER);
		types.add(Profile.INSTAGRAM);
		
		List<Profile> profiles = remote.getEntityByNetworkType(types, new Long(idAccount));

		List<Profile> profileDTOs = new ArrayList<Profile>();

		// Carregar primeiro PÃ¡ginas/Perfis Facebook.
		for(Profile profile : profiles) {
			if(profile.getType().equals(Profile.FACEBOOK_PAGE) || profile.getType().equals(Profile.FACEBOOK)) {
				profileDTOs.add(profile);
			}
		}

		// Carregar restante das redes.
		for(Profile profile : profiles) {
			if(!profile.getType().equals(Profile.FACEBOOK_PAGE) && !profile.getType().equals(Profile.FACEBOOK)) {
				if(profile.getType().equals(Profile.INSTAGRAM)) {
					if(profile.getIsSchedulingAuthenticated() == Profile.ACTIVE) {
						profileDTOs.add(profile);
					}
				} else {
					profileDTOs.add(profile);
				}
			}			
		}
		
		return new ResponseEntity<>(profileDTOs, HttpStatus.OK);
	}

	@Override
	public void doAction() throws Exception, OptimisticLockException {
		// TODO Auto-generated method stub
		
	}
}
