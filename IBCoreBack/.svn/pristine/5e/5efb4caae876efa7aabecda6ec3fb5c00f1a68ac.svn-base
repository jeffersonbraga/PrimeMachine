package br.com.opsocial.server.actions.application;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.OptimisticLockException;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.lang3.SerializationUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;

import br.com.opsocial.OpSocialBackApplication;
import br.com.opsocial.ejb.das.MaintenanceInstagramDeviceRemote;
import br.com.opsocial.ejb.das.MaintenancePostRemote;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.User;
import br.com.opsocial.ejb.entity.sets.Post;
import br.com.opsocial.ejb.entity.sets.PostAttachment;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.Reflection;

@RestController
@RequestMapping("opsocial")
public class ComposeAction extends ServerAction {
	@Override
	public void doAction() throws Exception, OptimisticLockException {
		// TODO Auto-generated method stub
		
	}

	@CrossOrigin
	@RequestMapping(value = "/persist_post",
    method = RequestMethod.PUT,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> persistCompose(@Valid @RequestBody ArrayList<Object> objPersistir) {
	//public ResponseEntity<Object> persistCompose(@Valid @RequestBody Post postdata, @Valid @RequestBody List<Profile> profilelist) {
	//public ResponseEntity<Object> persistCompose(@Valid @RequestBody List<Profile> profilelist) {
	try {

			Gson gsonDeserializer = new Gson();
			Post post = new Post();
			Reflection.montarObjetoAbstrato(post, (LinkedHashMap<String, Object>) objPersistir.get(0));
			ArrayList<LinkedHashMap<String, Object>> listProfiles = (ArrayList<LinkedHashMap<String, Object>>) objPersistir.get(1);

			MaintenancePostRemote remote = (MaintenancePostRemote) RecoverMaintenance.recoverMaintenance("Post");

			List<Profile> profilesToPost = new ArrayList<>();
			HashMap<Boolean, String> mapPostsSent = new HashMap<Boolean, String>();

			Boolean isSchedule = true;
			DateFormat df2 = new SimpleDateFormat("d/M/yyyy H:m:s z");
			df2.setLenient (false); 

			for ( LinkedHashMap<String, Object> itemProfile : listProfiles ) {
				Profile profile = new Profile();
				Reflection.montarObjetoAbstrato(profile, itemProfile);
				Post post_item = SerializationUtils.clone(post);
				post_item.setProfile(profile);

				if (post_item.getScheduleDate() != null && post_item.getScheduleDate() != "") {
					post_item.setPostDate(df2.parse(post_item.getScheduleDate()));
					post_item.setStartDate(post_item.getPostDate().getTime());
				}

				if (post_item.getPostsAttachments() != null) {
					for ( PostAttachment itemAtt : post_item.getPostsAttachments() ) {
						itemAtt.setPost(post_item);
					}
				}

				post_item = remote.save(post_item);
				/*
				if (profile.getType().equals("I")) {
					MaintenanceInstagramDeviceRemote instagramDeviceRemote = (MaintenanceInstagramDeviceRemote) 
							RecoverMaintenance.recoverMaintenance("InstagramDevice");
	
					String instagramGUID = UUID.randomUUID().toString();
					String instagramPhoneId = UUID.randomUUID().toString();
					String instagramDeviceId = "android-" + UtilFunctions.generateMD5Hash(profile.getScreenName() + profile.getInstagramPassword());
	
					InstagramDevice instagramDevice = instagramDeviceRemote.getById(instagramDeviceRemote.getInstagramDeviceLessUsedId());
	
					profile.setInstagramGUID(instagramGUID);
					profile.setInstagramDeviceId(instagramDeviceId);
					profile.setInstagramPhoneId(instagramPhoneId);
					profile.setInstagramDevice(instagramDevice);
	
					if (profile.getInstagramDevice() != null) {
						InstagramPostHelper instagramPostHelper = new InstagramPostHelper();
						String r = instagramPostHelper.getBusinessInformation(profile.getInstagramDevice());
					}
				}*/

				profilesToPost.add(profile);

				if (post_item.getScheduleDate() == null || post_item.getScheduleDate() == "") {
					new PostAction().makeSingleProfilePost(profile, post, mapPostsSent);
				}
			}

			//HashMap<Boolean, String> results = new PostAction().generatePost(profilesToPost, post);
			System.out.println(mapPostsSent.size());

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return new ResponseEntity<>(objPersistir, HttpStatus.OK);
	}

	@CrossOrigin(origins = "*")
	@RequestMapping(value = "/getPostById",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Post> getPostById(@Valid @RequestBody Post post) throws Exception {

		MaintenancePostRemote remote = (MaintenancePostRemote) RecoverMaintenance.recoverMaintenance("Post");
		return new ResponseEntity<>(remote.getById(post.getIdPost()), HttpStatus.OK);
	}

//	@CrossOrigin(origins = "*")
//	@RequestMapping(value = "/schedule_post",
//    method = RequestMethod.POST,
//    produces = MediaType.APPLICATION_JSON_VALUE)
//	public ResponseEntity<Boolean> schedulePost(@Valid @RequestBody Post post) throws Exception {
//		
//		JobDetailImpl job = new JobDetailImpl();
//		job.setName( "post_schedule" + post.getIdPost() );
//		job.setJobClass(ScheduleAction.class);
//		
//		job.getJobDataMap().put("post_schedule", post.getIdPost());
//		
//		 //configure the scheduler time
//		SimpleTriggerImpl trigger = new SimpleTriggerImpl();
//		trigger.setName("trigger_schedule_post_"+ post.getIdPost());
//		
//		//trigger.setStartTime( dataInicial );
//		//trigger.setStartTime(new Date(System.currentTimeMillis() + 10000));
//		trigger.setStartTime(post.getPostDate());
//		
//		//trigger.setRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY);
//		//trigger.setRepeatInterval(tempo);
//				//schedule it
//		Scheduler scheduler = new StdSchedulerFactory().getScheduler();
//		scheduler.start();
//	 	scheduler.scheduleJob(job, trigger);
//	 	
//		return new ResponseEntity<Boolean>(true, HttpStatus.OK);
//	}

	@RequestMapping(value = "/reload_post",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Post> validateReloadPostFeature() throws Exception {

		User loggedUser = new User();

		MaintenancePostRemote remote = (MaintenancePostRemote) RecoverMaintenance.recoverMaintenance("Post");
		return new ResponseEntity<Post>((Post) remote.getPostReloadFeature(loggedUser), HttpStatus.OK);
	}
}