package br.com.opsocial.server.utils.tasks;

import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import javax.servlet.ServletContext;

import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.tasks.MonitoringController.TaskMonitoring;
import das.MaintenanceAccountRemote;
import das.MaintenanceMonitoringRemote;
import das.MaintenanceSetRemote;
import entity.application.Account;
import entity.monitoring.Monitoring;
import entity.sets.Set;

public class AccountActiveController {
	
	public AccountActiveController(final ServletContext context) {
		
		Timer timer = new Timer();
		
		timer.schedule(new TimerTask() {
			
			@Override
			public void run() {
				
				try {
					
					MaintenanceAccountRemote remote = (MaintenanceAccountRemote) RecoverMaintenance.recoverMaintenance("Account");
					
					List<Account> accounts = remote.listInactiveAccounts(new Date());
					
					for(Account account : accounts) {
						account.setActive('F');
						remote.save(account);
						
						MaintenanceSetRemote setRemote = (MaintenanceSetRemote) RecoverMaintenance.recoverMaintenance("Set");
						
						List<Set> sets = setRemote.listByAccount(account.getIdAccount());
						
						for(Set set : sets) {
							set.setActive('F');
							setRemote.save(set);
						}
						
						MaintenanceMonitoringRemote monitoringRemote = (MaintenanceMonitoringRemote) RecoverMaintenance.recoverMaintenance("Monitoring");
						
						MonitoringController controller = (MonitoringController) context.getAttribute("monitoring_controller");
						
						List<Monitoring> monitorings = monitoringRemote.getMonitoringsByAccount(account.getIdAccount());
						
						try {
							for(Monitoring monitoring : monitorings) {
								
								TaskMonitoring taskToCancel = controller.getMappedTasks().get(monitoring.getIdMonitoring());
								
								controller.getMappedTasks().remove(monitoring.getIdMonitoring());
								controller.getAlreadyMonitoring().remove(monitoring.getIdMonitoring());
								taskToCancel.cancel();
							}	
						} catch (Exception e) {
							e.printStackTrace();
						}
					} 
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}, 0, 60000L * 60 * 24);
	}
}
