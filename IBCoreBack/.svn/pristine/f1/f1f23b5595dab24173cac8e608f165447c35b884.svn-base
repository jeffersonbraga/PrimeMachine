package br.com.opsocial.server.services;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import br.com.opsocial.ejb.entity.application.User;

public class ExportXLSServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	private User user; 

	private String reportsPath;
	private String fileName;
	private String formattedFileName;
	private Long idAccount;

	private static final int DEFAULT_BUFFER_SIZE = 10240; // 10KB.

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		this.reportsPath = request.getSession().getServletContext().getInitParameter("getDirReporstXLS");
		this.fileName = request.getParameter("file");
		this.formattedFileName = request.getParameter("filename"); 
		this.idAccount = Long.valueOf(request.getParameter("idAccount"));

		user = (User) request.getSession().getAttribute("user");

		if(user != null && user.getAccount().getIdAccount().equals(idAccount)) {

			File reportFile = new File(reportsPath, fileName);

			// Init servlet response.
			response.reset();
			response.setBufferSize(DEFAULT_BUFFER_SIZE);
			response.setContentType("application/ms-excel");
			response.setHeader("Content-Length", String.valueOf(reportFile.length()));
			response.setHeader("Content-Disposition", "attachment; filename=\"" + formattedFileName + ".xls\"");

			// Prepare streams.
			BufferedInputStream input = null;
			BufferedOutputStream output = null;

			try {
				// Open streams.
				input = new BufferedInputStream(new FileInputStream(reportFile), DEFAULT_BUFFER_SIZE);
				output = new BufferedOutputStream(response.getOutputStream(), DEFAULT_BUFFER_SIZE);

				// Write file contents to response.
				byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
				int length;
				while ((length = input.read(buffer)) > 0) {
					output.write(buffer, 0, length);
				}
			} finally {
				// Gently close streams.
				close(output);
				close(input);
			}
		}
	}

	// Helpers (can be refactored to public utility class) ----------------------------------------
	private static void close(Closeable resource) {
		if (resource != null) {
			try {
				resource.close();
			} catch (IOException e) {
				// Do your thing with the exception. Print it, log it or mail it.
				e.printStackTrace();
			}
		}
	}

}	