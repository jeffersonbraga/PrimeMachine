package br.com.opsocial.server.actions.upload;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import javax.servlet.ServletException;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import br.com.opsocial.OpSocialBackApplication;
import br.com.opsocial.ejb.entity.sets.PostAttachment;

@RestController
@RequestMapping("api")
public class UploadPictureAction {

	private static final long serialVersionUID = 1L;
	private static final long SIZE_LIMIT = 2097152L;

	private String contentType;

	private final static String IMG_JPEG = ".jpeg";
	private final static String IMG_PNG = ".png";
	private final static String VIDEO_AVI = ".avi";
	private final static String VIDEO_ASF = ".x-ms-asf";
	private final static String VIDEO_DV = ".x-dv";
	private final static String VIDEO_MOD = ".mod";
	private final static String VIDEO_MOV = ".quicktime";
	private final static String VIDEO_MP4 = ".mp4";
	private final static String VIDEO_MPEG = ".mpeg";
	private final static String VIDEO_XFLV = ".x-flv";
	private final static String VIDEO_3GP = ".3gpp";
	private final static String VIDEO_MKV = ".x-matroska";

    private Path rootLocation;

	@CrossOrigin
	@RequestMapping(value = "/upload",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public void uploadAction(@RequestParam("file") MultipartFile file) throws Exception, ServletException, IOException {

		this.contentType = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."), file.getOriginalFilename().length());
		if ( this.getVideoExtension(this.contentType) == "" ) {
			this.uploadPicture(file);
		} else {
			this.uploadVideo(file);
			//this.getVideoThumbnails(file.getOriginalFilename());
		}
	}

	@CrossOrigin
	@RequestMapping(value = "/uploadvideo",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public void uploadVideo(@RequestParam("file") MultipartFile file) throws Exception, ServletException, IOException {

		this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS);
        try {
            if (file.isEmpty()) {
                throw new Exception("Failed to store empty file " + file.getOriginalFilename());
            }
            Files.copy(file.getInputStream(), this.rootLocation.resolve(file.getOriginalFilename()));
        } catch (IOException e) {
            throw new Exception("Failed to store file " + file.getOriginalFilename(), e);
        }
	}

	@SuppressWarnings("unchecked")
	@CrossOrigin
	@RequestMapping(value = "/getThumbnail",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> getThumbnail(@RequestBody PostAttachment attachment) throws Exception, ServletException, IOException {

		Object listUrlFiles = null;
        try {
            listUrlFiles = this.getVideoThumbnails(attachment.getFileName());
        } catch (Exception e) {
            throw new Exception("Failed to retrieve thumbnail");
        }
        return new ResponseEntity<>(listUrlFiles, HttpStatus.OK);
	}

	public List<String> getVideoThumbnails(String file) throws Exception, ServletException, IOException {

		this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS);
		List<String> listUrlFiles;
        try {
            listUrlFiles = new VideoThumbnailAction().createListVideoIcon(new File(OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS + "\\" + file));
        } catch (Exception e) {
            throw new Exception("Failed to retrieve thumbnail");
        }
        return listUrlFiles;
	}

	private Boolean isVideoExtensionAllowed(String contentType) {
		return Arrays.asList(VIDEO_AVI,VIDEO_ASF,VIDEO_DV,VIDEO_MOD,VIDEO_MOV,VIDEO_MP4,VIDEO_MPEG,VIDEO_XFLV,VIDEO_3GP,VIDEO_MKV).contains(contentType);
	}

	private String getVideoExtensions() {

		StringBuilder builder = new StringBuilder();

		for(String extension : Arrays.asList(VIDEO_AVI,VIDEO_ASF,VIDEO_DV,VIDEO_MOD,VIDEO_MOV,VIDEO_MP4,VIDEO_MPEG,VIDEO_XFLV,VIDEO_3GP,VIDEO_MKV)) {
			builder.append(getVideoExtension(extension) + ", ");
		}

		builder.replace(builder.lastIndexOf(", "), builder.length(), ".");

		return builder.toString();
	}

	private String getVideoExtension(String contentType) {

		String videoExtension = "";

		if(contentType.equals(VIDEO_AVI)) {
			videoExtension = "avi";
		} else if(contentType.equals(VIDEO_ASF)) {
			videoExtension = "asf";
		} else if(contentType.equals(VIDEO_DV)) {
			videoExtension = "dv";
		} else if(contentType.equals(VIDEO_MOD)) {
			videoExtension = "mod";
		} else if(contentType.equals(VIDEO_MOV)) {
			videoExtension = "mov";
		} else if(contentType.equals(VIDEO_MP4)) {
			videoExtension = "mp4";
		} else if(contentType.equals(VIDEO_MPEG)) {
			videoExtension = "mpeg";
		} else if(contentType.equals(VIDEO_XFLV)) {
			videoExtension = "flv";
		} else if(contentType.equals(VIDEO_3GP)) {
			videoExtension = "3gp";
		} else if(contentType.equals(VIDEO_MKV)) {
			videoExtension = "mkv";
		}

		return videoExtension;
	}

	/*@CrossOrigin
	@RequestMapping(value = "/uploadpicture",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.MULTIPART_FORM_DATA_VALUE)*/
	protected void uploadPicture(@RequestParam("file") MultipartFile file) throws Exception, ServletException, IOException {

		this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_TEMP);
        try {
            if (file.isEmpty()) {
                throw new Exception("Failed to store empty file " + file.getOriginalFilename());
            }
            Files.copy(file.getInputStream(), this.rootLocation.resolve(file.getOriginalFilename()));
        } catch (IOException e) {
            throw new Exception("Failed to store file " + file.getOriginalFilename(), e);
        }
	}

	private String getImageExtension(String contentType) {

		String imageExtension = "";

		if(contentType.equals(IMG_JPEG)) {
			imageExtension = "jpg";
		} else if(contentType.equals(IMG_PNG)) {
			imageExtension = "png";
		}

		return imageExtension;
	}
}