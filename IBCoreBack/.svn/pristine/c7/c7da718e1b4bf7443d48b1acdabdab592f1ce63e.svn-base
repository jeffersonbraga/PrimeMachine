package br.com.opsocial.server.actions.reports.instagram;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

import br.com.opsocial.client.entity.report.instagram.ReportInstagramHistoricalDTO;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.server.utils.reports.UtilReports;

@RestController
@RequestMapping("opsocial")
public class ReportInstagramHistoricalAction {

	@CrossOrigin
	@RequestMapping(value = "/report_instagram_historical",
    method = RequestMethod.POST,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> doAction(@Valid @RequestBody Profile profile) {
		
		ReportInstagramHistoricalDTO reportInstagramHistorical;
		
		try {
			
			Character reportState = UtilReports.getReportState(profile);
			
			if(reportState.equals(Profile.REPORT_FINALIZED) || reportState.equals(Profile.REPORT_REFRESH_TOKEN)) {
				reportInstagramHistorical = UtilReports.mountReportInstagramHistoricalDTO(profile);
			} else {
				reportInstagramHistorical = new ReportInstagramHistoricalDTO();
			}
			
			JsonObject response = new JsonObject();
			response.add("reportInstagramHistorical", new Gson().toJsonTree(reportInstagramHistorical));
			response.addProperty("reportState", reportState);
			
			return new ResponseEntity<>(response.toString(), HttpStatus.OK);
			
		} catch (Exception e) {			
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
