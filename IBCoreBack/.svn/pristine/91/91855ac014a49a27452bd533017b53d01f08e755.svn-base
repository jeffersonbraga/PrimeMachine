package br.com.opsocial.server.utils.reports;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.naming.NamingException;

import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.facebook.FacebookAPI;
import das.MaintenanceMonitoringReportControlRemote;
import das.MaintenanceMonitoringReportRemote;
import das.MaintenanceProfileRemote;
import das.MaintenanceReportControlRemote;
import das.MaintenanceReportGenerateRemote;
import entity.application.Profile;
import entity.monitoring.Monitoring;
import entity.report.ReportGenerate;

public abstract class ReportGenerateVerification {

	public ReportGenerateVerification() {

	}

	public static boolean isReportActive(ReportGenerate reportGenerate) throws Exception {

		if(new FacebookAPI().recoverValueByProperty(reportGenerate.getNetworkId(), reportGenerate.getTokenSecret(), FacebookAPI.INSIGHT_PAGE_FANS) > Profile.FANS_FACEBOOK_TO_REPORT) {
			return true;
		} else {
			return false;
		}
	}

	public static void removeRefreshTokenState(List<Profile> pagesProfile) {

		try {

			MaintenanceReportGenerateRemote reportGenerateRemote = (MaintenanceReportGenerateRemote) RecoverMaintenance.recoverMaintenance("ReportGenerate");

			if(!pagesProfile.isEmpty()) {
				
				ReportGenerateThread reportGenerateThread = new ReportGenerateThread();

				for(Profile page : pagesProfile) {

					if(reportGenerateRemote.hasEntity(page.getNetworkId(), page.getType())) {

						ReportGenerate reportGenerate = reportGenerateRemote.getEntity(page.getNetworkId(), page.getType());

						reportGenerate.setTokenSecret(page.getTokenSecret());

						if(ReportGenerateVerification.isReportActive(reportGenerate) && !reportGenerate.getState().equals(ReportFacebook.GENERATING)) {

							reportGenerate.setState(ReportFacebook.GENERATING);
							reportGenerate = reportGenerateRemote.save(reportGenerate);

							reportGenerateThread.addReportGenerateRunnable(new ReportGenerateRunnable(page, 
									getDaysForFacebookReport(reportGenerate.getNetworkId(), reportGenerate.getNetworkType(), ReportFacebook.GROUP_MAIN)));
						} else {

							reportGenerate.setState(ReportFacebook.UNAVAILABLE);
							reportGenerateRemote.save(reportGenerate);
						}
					} else {

						ReportGenerate reportGenerate = new ReportGenerate();
						reportGenerate.setNetworkId(page.getNetworkId());
						reportGenerate.setNetworkType(page.getType());
						reportGenerate.setTokenSecret(page.getTokenSecret());
						reportGenerate.setState(ReportFacebook.UNAVAILABLE);

						// Verifica se a página pode resgatar seus insights.
						if(ReportGenerateVerification.isReportActive(reportGenerate)) {

							reportGenerate.setState(ReportFacebook.GENERATING);
							reportGenerate = reportGenerateRemote.save(reportGenerate);

							reportGenerateThread.addReportGenerateRunnable(new ReportGenerateRunnable(page, ReportGenerateRunnable.REPORT_DAYS));
						} else {

							reportGenerate = reportGenerateRemote.save(reportGenerate);
						}
					}
				}

				reportGenerateThread.start();
			}

		} catch (NamingException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static int getDaysForFacebookReport(String networkId, Character networkType, String type) {

		int days = 0;

		Long dateUntil;
		Long maxDate;

		Calendar untilDate = new GregorianCalendar();
		untilDate.set(Calendar.DAY_OF_MONTH, untilDate.get(Calendar.DAY_OF_MONTH) - 3);

		dateUntil = UtilFunctions.getDateForFacebookReport(untilDate);

		MaintenanceReportControlRemote remoteReportControl = (MaintenanceReportControlRemote) 
				RecoverMaintenance.recoverMaintenance("ReportControl");

		maxDate = remoteReportControl.getMaxDate(networkId, networkType, type);

		days = (int) ((dateUntil - maxDate) / 86400);

		return days;
	}

	public static List<Long> getListDaysForFacebookReport(String networkId, Character networkType, String type) {

		Long dateUntil;
		List<Long> datesToSearch;
		List<Long> datesSearched;

		datesToSearch = new ArrayList<Long>();

		Calendar untilDate = new GregorianCalendar();
		untilDate.set(Calendar.DAY_OF_MONTH, untilDate.get(Calendar.DAY_OF_MONTH) - 3);

		dateUntil = UtilFunctions.getDateForFacebookReport(untilDate);

		MaintenanceReportControlRemote remoteReportControl = (MaintenanceReportControlRemote) 
				RecoverMaintenance.recoverMaintenance("ReportControl");

		datesSearched = remoteReportControl.getDates(networkId, networkType, type);

		if(!datesSearched.isEmpty()) {

			for(Long day = datesSearched.get(0); day <= dateUntil; day += 86400) {
				if(!datesSearched.contains(day)) {
					datesToSearch.add(day);
				}
			}

		}

		return datesToSearch;
	}
	
	public static List<Long> getListDaysForMonitoringReport(Monitoring monitoring, String type, Long dateUntil) {
	
		Long dateFrom;
		List<Long> datesToSearch;
		List<Long> datesSearched;

		datesToSearch = new ArrayList<Long>();

		try {
			
			dateFrom = UtilFunctions.getMidnightDateNoDaylightTime(new Date(monitoring.getCreatedAt() * 1000L));

			MaintenanceMonitoringReportControlRemote monitoringReportControlRemote =
					(MaintenanceMonitoringReportControlRemote) RecoverMaintenance.recoverMaintenance("MonitoringReportControl");

			datesSearched = monitoringReportControlRemote.getDates(monitoring.getIdMonitoring(), type);

			for(Long day = dateFrom; day <= dateUntil; day += 86400) {
				if(!datesSearched.contains(day)) {
					datesToSearch.add(day);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return datesToSearch;
	}

	public static List<Long> getListDaysForMonitoringReport(Monitoring monitoring, Long dateUntil) {

		Long dateFrom;
		List<Long> datesToSearch;
		List<Long> datesSearched;

		datesToSearch = new ArrayList<Long>();

		try {
			
			dateFrom = UtilFunctions.getMidnightDateNoDaylightTime(new Date(monitoring.getCreatedAt() * 1000L));

			MaintenanceMonitoringReportRemote remoteMonitoringReportRemote = (MaintenanceMonitoringReportRemote)
					RecoverMaintenance.recoverMaintenance("MonitoringReport");

			datesSearched = remoteMonitoringReportRemote.getDatesGeneratedReports(monitoring.getIdMonitoring());

			for(Long day = dateFrom; day <= dateUntil; day += 86400) {
				if(!datesSearched.contains(day)) {
					datesToSearch.add(day);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return datesToSearch;
	}

	public static void setRefreshTokenState(Profile profile, Boolean isChangeAdmin) {

		try {

			MaintenanceReportGenerateRemote reportGenerateRemote = (MaintenanceReportGenerateRemote) RecoverMaintenance.recoverMaintenance("ReportGenerate");

			MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");

			if(!isChangeAdmin) {
				
				List<Profile> pagesProfile;

				if(profile.getType().equals(Profile.FACEBOOK_PAGE)) {
					pagesProfile = new ArrayList<Profile>();
					if(profile.getParentProfile() == null) {
						pagesProfile = profileRemote.getEntitiesByProfileInformation(profile.getProfileInformation().split("♪")[0], 
								profile.getAccount().getIdAccount());
					} else {
						pagesProfile = profileRemote.getChildrenByProfile(profile.getParentProfile().getIdProfile());
					}
				} else {
					pagesProfile = profileRemote.getChildrenByProfile(profile.getIdProfile());
				}

				for(Profile page : pagesProfile) {

					ReportGenerate reportGenerate = reportGenerateRemote.getEntity(page.getNetworkId(), page.getType());

					reportGenerate.setState(ReportFacebook.REFRESH_TOKEN);
					reportGenerateRemote.save(reportGenerate);
				}
				
			} else {
				
				ReportGenerate reportGenerate = reportGenerateRemote.getEntity(profile.getNetworkId(), profile.getType());

				reportGenerate.setState(ReportFacebook.REFRESH_TOKEN);
				reportGenerateRemote.save(reportGenerate);
			}

		} catch (NamingException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}	
	}

}
