package br.com.opsocial.server.actions.monitorings;

import java.util.Date;
import java.util.HashMap;

import javax.persistence.OptimisticLockException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import br.com.opsocial.client.entity.mount.MountDTO;
import br.com.opsocial.client.entity.primitive.StringUtil;
import br.com.opsocial.ejb.das.MaintenanceMonitoringLogReportRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringPostTagRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringReportControlRemote;
import br.com.opsocial.ejb.das.MaintenanceMonitoringTagReportRemote;
import br.com.opsocial.ejb.entity.monitoring.MonitoringLogReport;
import br.com.opsocial.ejb.entity.monitoring.MonitoringPostTag;
import br.com.opsocial.ejb.entity.monitoring.MonitoringReportControl;
import br.com.opsocial.ejb.entity.monitoring.MonitoringTagReport;
import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.monitorings.json.MonitoringTagReportIdJSON;

@RestController
@RequestMapping("opsocial")
public class DeleteTagFromPostAction extends ServerAction {

	@Override
	@RequestMapping(value = "/delete_tag_from_post",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() throws Exception, OptimisticLockException {

		String idPostTag = ((StringUtil) getParameters().get("idPostTag")).getValue();

		setParameters(new HashMap<String, Object>());

		try {

			MaintenanceMonitoringPostTagRemote monitoringPostTagRemote = (MaintenanceMonitoringPostTagRemote)
					RecoverMaintenance.recoverMaintenance("MonitoringPostTag");

			MonitoringPostTag monitoringPostTag = monitoringPostTagRemote.getById(Long.valueOf(idPostTag));

			monitoringPostTagRemote.delete(monitoringPostTag);

			deleteMonitoringTagFromReport(monitoringPostTag);

			getParameters().put("monitoringPostTag", MountDTO.mountMonitoringPostTag(monitoringPostTag));

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void deleteMonitoringTagFromReport(MonitoringPostTag monitoringPostTag) {

		try {

			Gson gson = new GsonBuilder().serializeNulls().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();
			
			MaintenanceMonitoringReportControlRemote monitoringReportControlRemote = 
					(MaintenanceMonitoringReportControlRemote) RecoverMaintenance.recoverMaintenance("MonitoringReportControl");

			MaintenanceMonitoringTagReportRemote monitoringTagReportRemote = 
					(MaintenanceMonitoringTagReportRemote) RecoverMaintenance.recoverMaintenance("MonitoringTagReport");
			
			MaintenanceMonitoringRemote monitoringRemote = (MaintenanceMonitoringRemote)
					RecoverMaintenance.recoverMaintenance("Monitoring");
			
			MaintenanceMonitoringLogReportRemote monitoringLogReportRemote = 
					(MaintenanceMonitoringLogReportRemote) RecoverMaintenance.recoverMaintenance("MonitoringLogReport");

			Long generateDay = UtilFunctions.getMidnightDateNoDaylightTime(new Date(UtilFunctions.getRetrievedDatePost(monitoringPostTag) * 1000L));

			if(monitoringReportControlRemote.hasEntity(monitoringPostTag.getIdMonitoring(), 
					MonitoringReportControl.TAG, generateDay)) {

				MonitoringTagReport monitoringTagReport;

				if(monitoringTagReportRemote.hasEntity(monitoringPostTag.getIdMonitoring(), 
						monitoringPostTag.getMonitoringTag().getIdTag(), monitoringPostTag.getNetwork(), generateDay)) {
					
					monitoringTagReport = monitoringTagReportRemote.getEntity(monitoringPostTag.getIdMonitoring(), 
							monitoringPostTag.getMonitoringTag().getIdTag(), monitoringPostTag.getNetwork(), generateDay);

					MonitoringLogReport monitoringLogReport = new MonitoringLogReport();
					monitoringLogReport.setMonitoring(monitoringRemote.getById(monitoringPostTag.getIdMonitoring()));
					monitoringLogReport.setReportType(MonitoringLogReport.MON_TAG_REPORT);
					monitoringLogReport.setReportId(monitoringTagReport.getIdMonitoringTagReport().toString());
					monitoringLogReport.setValueToApply(-1);
					monitoringLogReport.setUpdateApplied(MonitoringLogReport.UPDATE_NOT_APPLIED);
					monitoringLogReport.setLogDate(new Date().getTime() / 1000L);

					monitoringLogReportRemote.save(monitoringLogReport);
					
				} else {
					
					try {
						
						MonitoringTagReportIdJSON monitoringTagReportIdJSON = new MonitoringTagReportIdJSON();
						monitoringTagReportIdJSON.setIdMonitoring(monitoringPostTag.getIdMonitoring());
						monitoringTagReportIdJSON.setIdTag(monitoringPostTag.getMonitoringTag().getIdTag());
						monitoringTagReportIdJSON.setNetworkType(monitoringPostTag.getNetwork());
						monitoringTagReportIdJSON.setDate(generateDay);
						
						MonitoringLogReport monitoringLogReport = new MonitoringLogReport();
						monitoringLogReport.setMonitoring(monitoringRemote.getById(monitoringPostTag.getIdMonitoring()));
						monitoringLogReport.setReportType(MonitoringLogReport.MON_TAG_REPORT_NEW);
						monitoringLogReport.setReportId(gson.toJson(monitoringTagReportIdJSON));
						monitoringLogReport.setValueToApply(-1);
						monitoringLogReport.setUpdateApplied(MonitoringLogReport.UPDATE_NOT_APPLIED);
						monitoringLogReport.setLogDate(new Date().getTime() / 1000L);

						monitoringLogReportRemote.save(monitoringLogReport);
						
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
