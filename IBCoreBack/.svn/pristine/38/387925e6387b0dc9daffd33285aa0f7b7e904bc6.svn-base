package br.com.opsocial.server.actions.profiles;

import java.util.List;

import javax.naming.NamingException;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.opsocial.server.services.ServerAction;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.tasks.PostsController;
import br.com.opsocial.server.utils.tasks.SetsController;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.das.MaintenanceRateLimitStatusRemote;
import br.com.opsocial.ejb.das.MaintenanceReportLogoRemote;
import br.com.opsocial.ejb.das.MaintenanceSetRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.idclass.ReportLogoId;
import br.com.opsocial.ejb.entity.report.ReportLogo;
import br.com.opsocial.ejb.entity.sets.Sets;
import br.com.opsocial.ejb.entity.twitter.RateLimitStatus;

@RestController
@RequestMapping("opsocial")
public class DeleteProfileAction extends ServerAction {
	
	@Override
	@RequestMapping(value = "/delete_profile",
    method = RequestMethod.GET,
    produces = MediaType.APPLICATION_JSON_VALUE)
	public void doAction() {
		
		Profile profileDTO = (Profile) getParameters().get("profile");

		try {
			
			MaintenanceProfileRemote profileRemote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");

			MaintenanceSetRemote setRemote = (MaintenanceSetRemote) RecoverMaintenance.recoverMaintenance("Set");

			if(!profileDTO.getChildrenProfiles().isEmpty()) {
				String profileInformation = profileDTO.getNetworkId()+"â™ª"+profileDTO.getScreenName();
				for(Profile childDTO : profileDTO.getChildrenProfiles()) {
					Profile child = profileRemote.getById(childDTO.getIdProfile());
					child.setParentProfile(null);
					child.setProfileInformation(profileInformation);
					profileRemote.save(child);
				}
			}

			List<Sets> setsToDelete = setRemote.getByProfile(profileDTO.getIdProfile(), getUser().getAccount().getIdAccount());
			
			for(Sets set : setsToDelete) {
				setRemote.delete(set);
			}
			
			if(SetsController.POSTS_CONTROLLERS != null) {
				for(PostsController postsController : SetsController.POSTS_CONTROLLERS) {
					if(postsController.getSet().getProfile().getIdProfile().equals(profileDTO.getIdProfile())) {
						SetsController.POSTS_CONTROLLERS.remove(postsController);
						postsController.cancel();
					}
				}
			}
			
			if(profileDTO.getType().equals(Profile.TWITTER)) {
			
				MaintenanceRateLimitStatusRemote rateLimitStatusRemote = (MaintenanceRateLimitStatusRemote) RecoverMaintenance.recoverMaintenance("RateLimitStatus");
				
				List<RateLimitStatus> rateLimitStatuses = rateLimitStatusRemote.listByProfile(profileDTO.getIdProfile());
				
				for(RateLimitStatus limitStatus : rateLimitStatuses) {
					rateLimitStatusRemote.delete(limitStatus);
				}
			}

			List<Profile> noAdminFacebookPages = (List<Profile>) getContext().getAttribute("noAdminFacebookPages" + getUser().getAccount().getIdAccount());
			
			if(noAdminFacebookPages != null) {
				
				Profile profileToExclude = null;
				
				for(Profile profileNoAdmin : noAdminFacebookPages) {
					if(profileDTO.getIdProfile().equals(profileNoAdmin.getIdProfile())) {
						profileToExclude = profileNoAdmin;
						break;
					}
				}
				
				if(profileToExclude != null) {
					noAdminFacebookPages.remove(profileToExclude);
				}
				
				if(noAdminFacebookPages.isEmpty()) {
					getContext().removeAttribute("noAdminFacebookPages" + getUser().getAccount().getIdAccount());	
				}
			}
			
			getContext().removeAttribute("expiredProfiles"+getUser().getAccount().getIdAccount());
			
			Profile profile = profileRemote.getById(profileDTO.getIdProfile());
			
			profileRemote.delete(profile);
			
			MaintenanceReportLogoRemote reportLogoRemote = (MaintenanceReportLogoRemote) 
					RecoverMaintenance.recoverMaintenance("ReportLogo");
			
			ReportLogoId reportLogoId = new ReportLogoId();
			reportLogoId.setObjectId(profileDTO.getIdProfile());
			reportLogoId.setType(profileDTO.getType());
			
			ReportLogo reportLogo = reportLogoRemote.getById(reportLogoId);
			
			if(reportLogo != null) {
				reportLogoRemote.delete(reportLogo);
			}
	 
		} catch (NamingException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
