package br.com.opsocial.server.actions.upload;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;

import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.JsonObject;

import br.com.opsocial.OpSocialBackApplication;
import br.com.opsocial.ejb.entity.generic.Persistent;
import br.com.opsocial.ejb.entity.sets.PostAttachment;
import br.com.opsocial.server.utils.UtilFunctions;
import br.com.opsocial.server.utils.aws.S3Integration;

@RestController
@RequestMapping("api")
public class UploadPictureAction {

	private static final long serialVersionUID = 1L;
	private static final long SIZE_LIMIT = 2097152L; // 2M per image at most.
	private static final long VIDEO_SIZE_LIMIT = 1073741824L; // 1GB per video at most.

	private String contentType;

	/*private final static String IMG_JPEG = ".jpeg";
	private final static String IMG_PNG = ".png";
	private final static String VIDEO_AVI = ".avi";
	private final static String VIDEO_ASF = ".x-ms-asf";
	private final static String VIDEO_DV = ".x-dv";
	private final static String VIDEO_MOD = ".mod";
	private final static String VIDEO_MOV = ".quicktime";
	private final static String VIDEO_MP4 = ".mp4";
	private final static String VIDEO_MPEG = ".mpeg";
	private final static String VIDEO_XFLV = ".x-flv";
	private final static String VIDEO_3GP = ".3gpp";
	private final static String VIDEO_MKV = ".x-matroska";*/

	private final static String VIDEO_AVI = "video/avi";
	private final static String VIDEO_ASF = "video/x-ms-asf";
	private final static String VIDEO_DV = "video/x-dv";
	private final static String VIDEO_MOD = "audio/mod";
	private final static String VIDEO_MOV = "video/quicktime";
	private final static String VIDEO_MP4 = "video/mp4";
	private final static String VIDEO_MPEG = "video/mpeg";
	private final static String VIDEO_XFLV = "video/x-flv";
	private final static String VIDEO_3GP = "video/3gpp";
	private final static String VIDEO_MKV = "video/x-matroska";

	private final static String IMG_JPEG = "image/jpeg";
	private final static String IMG_PNG = "image/png";

	private final static Character VIDEO = 'V';
	private final static Character IMAGE = 'I';

    private Path rootLocation;

	@CrossOrigin
	@RequestMapping(value = "/upload",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<String> uploadAction(@RequestParam("file") MultipartFile file) throws Exception, ServletException, IOException {
		return this.uploadPicture(file);
	}

	@CrossOrigin
	@RequestMapping(value = "/uploadcommentmedia",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<String> uploadCommentMedia(@RequestParam("file") MultipartFile file) throws Exception, ServletException, IOException {

		this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_COMMENT_POSTS);
		
		String fileName = "";
		Character fileType = 'N';
		
		JsonObject response = new JsonObject();
		
        try {
        	
        	if(isVideoExtensionAllowed(file.getContentType()) && file.getSize() <= VIDEO_SIZE_LIMIT) {
        		fileType = VIDEO;
        		fileName = RandomStringUtils.randomAlphanumeric(12) + "." + getVideoExtension(file.getContentType());
        	} else {
        		
        		if((file.getContentType().equals(IMG_JPEG) || file.getContentType().equals(IMG_PNG)) && file.getSize() <= SIZE_LIMIT) {
        			
        			fileType = IMAGE;
        			fileName = RandomStringUtils.randomAlphanumeric(12) + "." + getImageExtension(file.getContentType());
        		}
        	}
        	
            if (file.isEmpty()) {
                throw new Exception("Failed to store empty file " + file.getOriginalFilename());
            }
            Files.copy(file.getInputStream(), this.rootLocation.resolve(fileName));
            
            new S3Integration().getAmazonS3Client().putObject(
  				  S3Integration.WOOPSOCIAL_BUCKET_NAME, 
  				  S3Integration.WOOPSOCIAL_COMMENTS_FOLDER + fileName, 
  				  new File(this.rootLocation.resolve(fileName).toString()));
            
            if(fileType.equals(VIDEO)) {
            	
            	
            	response.addProperty("file_type", VIDEO);
            	response.addProperty("file_name", fileName);
    			response.addProperty("video_size", file.getSize());
    			response.addProperty("video_extension", file.getContentType());
            	
            } else if(fileType.equals(IMAGE)) {
            	response.addProperty("file_type", IMAGE);
            	response.addProperty("file_name", fileName);
            }
            
            return new ResponseEntity<String>(response.toString(), HttpStatus.OK);
        } catch (IOException e) {
            new Exception("Failed to store file " + file.getOriginalFilename(), e).printStackTrace();
            return new ResponseEntity<String>(response.toString(), HttpStatus.FORBIDDEN);
        }
	}

	@SuppressWarnings("unchecked")
	@CrossOrigin
	@RequestMapping(value = "/getThumbnail",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> getThumbnail(@RequestBody PostAttachment attachment) throws Exception, ServletException, IOException {

		Object listUrlFiles = null;
        try {
            listUrlFiles = this.getVideoThumbnails(attachment.getFileName());
        } catch (Exception e) {
            throw new Exception("Failed to retrieve thumbnail");
        }
        return new ResponseEntity<>(listUrlFiles, HttpStatus.OK);
	}

	public List<String> getVideoThumbnails(String file) throws Exception, ServletException, IOException {

		this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS);
		List<String> listUrlFiles;
        try {
            listUrlFiles = new VideoThumbnailAction().createListVideoIcon(new File(OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS + "\\" + file));
        } catch (Exception e) {
            throw new Exception("Failed to retrieve thumbnail");
        }
        return listUrlFiles;
	}

	private Boolean isVideoExtensionAllowed(String contentType) {
		return Arrays.asList(VIDEO_AVI,VIDEO_ASF,VIDEO_DV,VIDEO_MOD,VIDEO_MOV,VIDEO_MP4,VIDEO_MPEG,VIDEO_XFLV,VIDEO_3GP,VIDEO_MKV).contains(contentType);
	}

	private String getVideoExtensions() {

		StringBuilder builder = new StringBuilder();

		for(String extension : Arrays.asList(VIDEO_AVI,VIDEO_ASF,VIDEO_DV,VIDEO_MOD,VIDEO_MOV,VIDEO_MP4,VIDEO_MPEG,VIDEO_XFLV,VIDEO_3GP,VIDEO_MKV)) {
			builder.append(getVideoExtension(extension) + ", ");
		}

		builder.replace(builder.lastIndexOf(", "), builder.length(), ".");

		return builder.toString();
	}

	private String getVideoExtension(String contentType) {

		String videoExtension = "";

		if(contentType.equals(VIDEO_AVI)) {
			videoExtension = "avi";
		} else if(contentType.equals(VIDEO_ASF)) {
			videoExtension = "asf";
		} else if(contentType.equals(VIDEO_DV)) {
			videoExtension = "dv";
		} else if(contentType.equals(VIDEO_MOD)) {
			videoExtension = "mod";
		} else if(contentType.equals(VIDEO_MOV)) {
			videoExtension = "mov";
		} else if(contentType.equals(VIDEO_MP4)) {
			videoExtension = "mp4";
		} else if(contentType.equals(VIDEO_MPEG)) {
			videoExtension = "mpeg";
		} else if(contentType.equals(VIDEO_XFLV)) {
			videoExtension = "flv";
		} else if(contentType.equals(VIDEO_3GP)) {
			videoExtension = "3gp";
		} else if(contentType.equals(VIDEO_MKV)) {
			videoExtension = "mkv";
		}

		return videoExtension;
	}

	/*@CrossOrigin
	@RequestMapping(value = "/uploadpicture",
	    method = RequestMethod.POST,
	    produces = MediaType.APPLICATION_JSON_VALUE,
	    consumes = MediaType.MULTIPART_FORM_DATA_VALUE)*/
	protected ResponseEntity<String> uploadPicture(@RequestParam("file") MultipartFile file) throws Exception, ServletException, IOException {
		
		JsonObject response = new JsonObject();
		
        try {
        	
            if (file.isEmpty()) {
                throw new Exception("Failed to store empty file " + file.getOriginalFilename());
            }

    		Character fileType = 'N';
    		
    		String fileName = "";

        	if(isVideoExtensionAllowed(file.getContentType())) {
        		
        		if (file.getSize() <= VIDEO_SIZE_LIMIT) {        			
        			fileType = VIDEO;
        			fileName = RandomStringUtils.randomAlphanumeric(12) + "." + getVideoExtension(file.getContentType());
        		} else {
        			throw new Exception("Video can not be larger than 1GB");
        		}
        	} else if((file.getContentType().equals(IMG_JPEG) || file.getContentType().equals(IMG_PNG))) {
        		
        		if (file.getSize() <= SIZE_LIMIT) {
        			fileType = IMAGE;
        			fileName = RandomStringUtils.randomAlphanumeric(12) + "." + getImageExtension(file.getContentType());        			
        		} else {
        			throw new Exception("Image can not be larger than 2MB");
        		}
        	}

        	Path filePath;
        	
            if(fileType.equals(VIDEO)) {
            	
            	this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_VIDEO_POSTS);
            	
            	filePath = this.rootLocation.resolve(fileName);
            	
            	Files.copy(file.getInputStream(), filePath);
            	
            	new S3Integration().getAmazonS3Client().putObject(
        				  S3Integration.WOOPSOCIAL_BUCKET_NAME, 
        				  S3Integration.WOOPSOCIAL_VIDEOS_POSTS_FOLDER + fileName, 
        				  new File(filePath.toString()));

            	JsonObject jsonInfoVideoObject = UtilFunctions.getInfoVideo(filePath.toString());

            	response.addProperty("file_type", VIDEO);
            	response.addProperty("file_name", fileName);
    			response.addProperty("size", file.getSize());
    			response.addProperty("extension", file.getContentType());
    			response.addProperty("duration", jsonInfoVideoObject.get("duration").getAsDouble());
    			response.addProperty("height", jsonInfoVideoObject.get("height").getAsString());
    			response.addProperty("width", jsonInfoVideoObject.get("width").getAsString());

            } else if(fileType.equals(IMAGE)) {
            	
            	this.rootLocation = Paths.get(OpSocialBackApplication.UPLOAD_DIR_IMAGES_POSTS);
            	
            	filePath = this.rootLocation.resolve(fileName);
            	
            	Files.copy(file.getInputStream(), filePath);
            	
            	new S3Integration().getAmazonS3Client().putObject(
        				  S3Integration.WOOPSOCIAL_BUCKET_NAME, 
        				  S3Integration.WOOPSOCIAL_IMAGES_POSTS_FOLDER + fileName, 
        				  new File(filePath.toString()));
            	
            	BufferedImage bufferedImage = ImageIO.read(file.getInputStream());	

            	response.addProperty("file_type", IMAGE);
            	response.addProperty("file_name", fileName);
            	response.addProperty("width", bufferedImage.getWidth());
            	response.addProperty("height", bufferedImage.getHeight());
            }

            return new ResponseEntity<String>(response.toString(), HttpStatus.OK);
        } catch (IOException e) {
            throw new Exception("Failed to store file " + file.getOriginalFilename(), e);
        }
	}

	private String getImageExtension(String contentType) {

		String imageExtension = "";

		if(contentType.equals(IMG_JPEG)) {
			imageExtension = "jpg";
		} else if(contentType.equals(IMG_PNG)) {
			imageExtension = "png";
		}

		return imageExtension;
	}
}