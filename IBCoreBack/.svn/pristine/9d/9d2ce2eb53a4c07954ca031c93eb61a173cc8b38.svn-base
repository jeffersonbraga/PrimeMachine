package br.com.opsocial.server.utils.tasks;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;

import javax.servlet.ServletContext;

import org.jinstagram.Instagram;
import org.jinstagram.entity.users.basicinfo.UserInfoData;
import org.jinstagram.exceptions.InstagramBadRequestException;
import org.jinstagram.exceptions.InstagramException;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import br.com.opsocial.server.utils.RecoverMaintenance;
import br.com.opsocial.server.utils.facebook.FacebookAPI;
import br.com.opsocial.server.utils.networksintegrations.FacebookIntegration;
import br.com.opsocial.server.utils.networksintegrations.InstagramIntegration;
import br.com.opsocial.server.utils.networksintegrations.TwitterIntegration;
import br.com.opsocial.server.utils.reports.ReportGenerateVerification;
import br.com.opsocial.ejb.das.MaintenanceAccountRemote;
import br.com.opsocial.ejb.das.MaintenanceProfileRemote;
import br.com.opsocial.ejb.entity.application.Account;
import br.com.opsocial.ejb.entity.application.Profile;
import facebook4j.Facebook;
import facebook4j.auth.AccessToken;

public class ValidateTokensController {

	public ValidateTokensController(final ServletContext context) {

		Calendar taskDate = Calendar.getInstance();
		taskDate.set(Calendar.DAY_OF_MONTH, taskDate.get(Calendar.DAY_OF_MONTH));																																				
		taskDate.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
		taskDate.set(Calendar.AM_PM, Calendar.AM);
		taskDate.set(Calendar.HOUR_OF_DAY, 7);
		taskDate.set(Calendar.MINUTE, 0);
		taskDate.set(Calendar.SECOND, 0);

		Date taskTime = taskDate.getTime();

		Timer timer = new Timer();

		timer.schedule(new TimerTask() {

			@Override
			public void run() {

				MaintenanceAccountRemote accountRemote = (MaintenanceAccountRemote) RecoverMaintenance.recoverMaintenance("Account");

				List<Account> accounts = accountRemote.getAllActive(); 
				
				for(Account account : accounts) {
					validatingTokens(account, context);
					validatingAdminPages(account, context);
				}
			}
		}, taskTime, 86400 * 1000L);
	}

	public static void validatingTokens(Account account, ServletContext context) {

		try {
			
			MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");

			List<Profile> profiles = remote.listProfilesByAccount(account.getIdAccount());

			FacebookAPI facebookAPI = new FacebookAPI();

			List<Profile> expiredProfiles = new ArrayList<Profile>();

			for(Profile profile : profiles) {

				if(profile.getType().equals(Profile.FACEBOOK)) {

					Boolean validate = null;

					try {
						validate = facebookAPI.verifyAccessToken(profile.getToken());	
					} catch (Exception e) {
						validate = facebookAPI.verifyAccessToken(profile.getToken());
					}

					if(validate != null && !validate) {

						profile.setActive('F');
						profile.setTurn('F');

						try {
							expiredProfiles.add(remote.save(profile));
						} catch (IllegalArgumentException exception) {
							exception.printStackTrace();
						} catch (Exception exception) {
							exception.printStackTrace();
						}

						ReportGenerateVerification.setRefreshTokenState(profile, false);
					}					

				} else if(profile.getType().equals(Profile.FACEBOOK_PAGE)) {

					if(profile.getParentProfile() == null) {

						boolean canContinue = true;

						for(Profile expiredProfile : expiredProfiles) {
							if(profile.getProfileInformation() != null) {
								if(expiredProfile.getNetworkId().equals(profile.getProfileInformation().split("♪")[0])) {
									canContinue = false;

									profile.setActive('F');
									profile.setTurn('F');

									try {
										expiredProfiles.add(remote.save(profile));
									} catch (IllegalArgumentException exception) {
										exception.printStackTrace();
									} catch (Exception exception) {
										exception.printStackTrace();
									}
								}	
							} else {
								if(expiredProfile.getNetworkId().equals(profile.getNetworkId())) {
									canContinue = false;

									profile.setActive('F');
									profile.setTurn('F');

									try {
										expiredProfiles.add(remote.save(profile));
									} catch (IllegalArgumentException exception) {
										exception.printStackTrace();
									} catch (Exception exception) {
										exception.printStackTrace();
									}
								}
							}
						}

						if(canContinue) {

							Boolean validate = null;

							try {
								validate = facebookAPI.verifyAccessToken(profile.getToken());	
							} catch (Exception e) {
								validate = facebookAPI.verifyAccessToken(profile.getToken());
							}

							if(validate != null && !validate && !hasProfileAuthenticated(profile, account)) {

								Profile ghostParent = null;

								if(profile.getProfileInformation() != null) {

									ghostParent = new Profile();

									ghostParent.setScreenName(profile.getProfileInformation().split("♪")[1]);
									ghostParent.setType(Profile.FACEBOOK);
									ghostParent.setNetworkId(profile.getProfileInformation().split("♪")[0]);
									ghostParent.setIdProfile(profile.getIdProfile());

									ghostParent.setChildrenProfiles(remote.getEntitiesByProfileInformation(
											profile.getProfileInformation().split("♪")[0], account.getIdAccount()));
								} else {
									ghostParent = profile;
								}

								boolean canInsert = true;

								for(Profile expiredProfile : expiredProfiles) {

									if(expiredProfile.getIdProfile().equals(ghostParent.getIdProfile())) {
										canInsert = false;
										break;
									}
								}

								if(canInsert) {
									expiredProfiles.add(ghostParent);
									ReportGenerateVerification.setRefreshTokenState(profile, false);
								}
							}
						}
					}
				} else if(profile.getType().equals(Profile.TWITTER)) {

					TwitterIntegration twitterIntegration = new TwitterIntegration();

					Twitter twitter = twitterIntegration.getTwitter(profile.getToken(), profile.getTokenSecret());

					try {

						twitter.verifyCredentials();
						profile.setActive('T');

						try {
							remote.save(profile);
						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (Exception e) {
							e.printStackTrace();
						}

					} catch (TwitterException e) {

						if(e.getStatusCode() == TwitterException.UNAUTHORIZED) {

							profile.setActive('F');
							profile.setTurn('F');

							try {
								expiredProfiles.add(remote.save(profile));
							} catch (IllegalArgumentException exception) {
								exception.printStackTrace();
							} catch (Exception exception) {
								exception.printStackTrace();
							}

						} else {
							e.printStackTrace();
						}
					}
				} else if(profile.getType().equals(Profile.INSTAGRAM)) {

					Instagram instagram = new InstagramIntegration().getInstagram(profile);

					try {

						UserInfoData userInfoData = instagram.getCurrentUserInfo().getData();

					} catch (InstagramBadRequestException e) {

						profile.setActive('F');
						profile.setTurn('F');

						try {
							expiredProfiles.add(remote.save(profile));
						} catch (IllegalArgumentException exception) {
							exception.printStackTrace();
						} catch (Exception exception) {
							exception.printStackTrace();
						}

						e.printStackTrace();
					} catch (InstagramException e) {
						e.printStackTrace();
					}
				}

				if(!expiredProfiles.isEmpty()) {
					context.setAttribute("expiredProfiles"+account.getIdAccount(), expiredProfiles);	
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void validatingAdminPages(Account account, ServletContext context) {

		try {
			
			MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");

			List<Profile> facebookPages = remote.getEntityByNetworkType(Profile.FACEBOOK_PAGE, account.getIdAccount());

			List<Profile> noAdminFacebookPages = new ArrayList<Profile>();

			List<Profile> expiredProfiles = (List<Profile>) context.getAttribute("expiredProfiles" + account.getIdAccount());
			
			for(Profile facebookPage : facebookPages) {
				
				try {
					
					boolean isExpired = false;
					
					if(expiredProfiles != null) {
						
						for(Profile expiredProfile : expiredProfiles) {
							
							if(facebookPage.getParentProfile() == null) {
								if(facebookPage.getProfileInformation().split("♪")[0].equals(expiredProfile.getNetworkId())) {
									isExpired = true;
									break;
								}
							} else if(facebookPage.getParentProfile().getNetworkId().equals(expiredProfile.getNetworkId())) {
								isExpired = true;
								break;
							}
						}
					}
					
					if(!isExpired && !hasAdminProfile(facebookPage)) {

						noAdminFacebookPages.add(facebookPage);
						ReportGenerateVerification.setRefreshTokenState(facebookPage, true);
					}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			if(!noAdminFacebookPages.isEmpty()) {
				context.setAttribute("noAdminFacebookPages"+account.getIdAccount(), noAdminFacebookPages);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static boolean hasAdminProfile(Profile profile) {
		
		boolean hasAdmin = false;
		
		try {
			
			AccessToken accessToken;
			Facebook facebook;

			Profile parentProfile;

			if(profile.getParentProfile() != null) {

				accessToken = new AccessToken(profile.getParentProfile().getToken(), null);
				parentProfile = profile.getParentProfile();

			} else {

				accessToken = new AccessToken(profile.getTokenSecret(), null);

				parentProfile = new Profile();
				parentProfile.setNetworkId(profile.getProfileInformation().split("♪")[0]);
				parentProfile.setToken(profile.getTokenSecret());
			}

			facebook = new FacebookIntegration().getFacebook(accessToken);

			List<facebook4j.Account> accounts = new FacebookAPI().getAccounts(facebook);

			for(facebook4j.Account facebookAccount : accounts) {
				if(facebookAccount.getId().equals(profile.getNetworkId())) {
					hasAdmin = true;
					break;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			hasAdmin = true;
		}
		
		return hasAdmin;
	}
	
	public static boolean hasProfileAuthenticated(Profile facebookPage, Account account) {
		
		boolean hasProfileAuthenticate = false;
		
		MaintenanceProfileRemote remote = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
		
		List<Profile> facebookPages = remote.getEntitiesByProfileInformation(facebookPage.getProfileInformation().split("♪")[0], account.getIdAccount());

		FacebookAPI facebookAPI = new FacebookAPI();
		
		for(Profile profile : facebookPages) {
			try {
				hasProfileAuthenticate = facebookAPI.verifyAccessToken(profile.getTokenSecret());	
			} catch (Exception e) {
				hasProfileAuthenticate = facebookAPI.verifyAccessToken(profile.getTokenSecret());
			}
			
			if(hasProfileAuthenticate) {
				autoRefreshTokenPages(profile, account);
				break;
			}
		}
		
		return hasProfileAuthenticate;
	}
	
	public static void autoRefreshTokenPages(Profile facePageAuthenticated, Account account) {
		
		MaintenanceProfileRemote remoteProfile = (MaintenanceProfileRemote) RecoverMaintenance.recoverMaintenance("Profile");
		List<Profile> pagesToRefreshToken = new ArrayList<Profile>();
		
		List<Profile> facebookPages = remoteProfile.getEntitiesByProfileInformation(facePageAuthenticated.getProfileInformation().split("♪")[0], account.getIdAccount());
		
		Facebook facebook = new FacebookIntegration().getFacebook(new AccessToken(facePageAuthenticated.getTokenSecret(), null));
		
		if(!facebookPages.isEmpty()) {
				
			List<facebook4j.Account> accounts = new FacebookAPI().getAccounts(facebook);

			for(Profile pageProfile : facebookPages) {

				for(facebook4j.Account facebookAccount : accounts) {

					try {

						if(!facebookAccount.getCategory().equals("Application")) {
							if(facebookAccount.getId().equals(pageProfile.getNetworkId())) {

								pageProfile.setActive('T');
								pageProfile.setToken(facebookAccount.getAccessToken());
								pageProfile.setTokenSecret(facePageAuthenticated.getTokenSecret());
								pageProfile.setTokenExpiresIn(facePageAuthenticated.getTokenExpiresIn());
								pageProfile.setTokenDate(facePageAuthenticated.getTokenDate());

								remoteProfile.save(pageProfile);

								pagesToRefreshToken.add(remoteProfile.getById(pageProfile.getIdProfile()));

								break;
							}
						}

					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			
			ReportGenerateVerification.removeRefreshTokenState(pagesToRefreshToken);
		}
	}

}
