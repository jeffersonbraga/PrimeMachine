package br.com.opsocial.ejb.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.ejb.Stateless;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.NoResultException;
import javax.persistence.OptimisticLockException;

import br.com.opsocial.ejb.dao.generic.AbstractDAOImpl;
import br.com.opsocial.ejb.das.MaintenanceMonitoringPostTagRemote;
import br.com.opsocial.ejb.entity.application.Profile;
import br.com.opsocial.ejb.entity.application.idclass.YoutubePostMonitoringId;
import br.com.opsocial.ejb.entity.monitoring.Monitoring;
import br.com.opsocial.ejb.entity.youtube.YoutubePost;
import br.com.opsocial.ejb.entity.youtube.YoutubePostMonitoring;

@Stateless
public class YoutubePostMonitoringDAOImpl extends AbstractDAOImpl<YoutubePostMonitoring> implements YoutubePostMonitoringDAO {

	@Override
	public void delete(YoutubePostMonitoring object) throws Exception {
		try {
			object = em.merge(object);
			em.remove(object);
			this.flush();
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	@Override
	public Long getCountOfPosts(Long idMonitoring, Long dateFrom, Long dateUntil) {
		
		sql = "SELECT COUNT(y) FROM YoutubePostMonitoring y WHERE y.monitoring.idMonitoring = :idMonitoring " + 
				"AND (y.youtubePost.publishedAt >= :dateFrom AND y.youtubePost.publishedAt <= :dateUntil)";

		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("dateFrom", dateFrom);
		query.setParameter("dateUntil", dateUntil);

		return (Long) query.getSingleResult();
	}
	
	@Override
	public List<YoutubePostMonitoring> listMostRecents(Long idMonitoring, Integer maxResults) {
	
		sql = "select videoid from opsocial.youtubepostsmonitorings where idmonitoring=" + idMonitoring + 
				" and garbage='F' " + 
				" order by createdtime desc limit " + maxResults;
		
		query = em.createNativeQuery(sql);
		
		String ids = "";
		
		for(Object id : query.getResultList()) {
			ids += "'" + id.toString() + "',";
		}
		
		if(!ids.isEmpty()) {
			sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring and " +
					" y.youtubePost.videoId in (" + ids.substring(0,ids.length()-1) + ") order by y.createdTime desc";
			query = em.createQuery(sql);
			query.setParameter("idMonitoring", idMonitoring);
			return query.getResultList();
		} else {
			return new ArrayList<YoutubePostMonitoring>();
		}
	}
	
	@Override
	public List<YoutubePostMonitoring> listMostRecents(Long publishedAt, Long idMonitoring) {
	
		sql = "select videoid from opsocial.youtubepostsmonitorings where createdtime > " + publishedAt + 
				" and idmonitoring=" + idMonitoring + " and garbage='F' order by createdtime ";
		
		query = em.createNativeQuery(sql);
		
		String ids = "";
		
		for(Object id : query.getResultList()) {
			ids += "'" + id.toString() + "',";
		}
		
		if(!ids.isEmpty()) {
			sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring and " +
					" y.youtubePost.videoId in (" + ids.substring(0,ids.length()-1) + ") order by y.createdTime";
			query = em.createQuery(sql);
			query.setParameter("idMonitoring", idMonitoring);
			return query.getResultList();
		} else {
			return new ArrayList<YoutubePostMonitoring>();
		}
	}
	
	@Override
	public List<YoutubePostMonitoring> listElder(Long publishedAt, Long idMonitoring, Integer maxResults) {
	
		sql = "select videoid from opsocial.youtubepostsmonitorings where createdtime < " + publishedAt + 
				" and idmonitoring=" + idMonitoring + " and garbage='F' order by createdtime desc limit " + maxResults;
		
		query = em.createNativeQuery(sql);
		
		String ids = "";
		
		for(Object id : query.getResultList()) {
			ids += "'" + id.toString() + "',";
		}
		
		if(!ids.isEmpty()) {
			sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring and " +
					"y.youtubePost.videoId in (" + ids.substring(0,ids.length()-1) + ") order by y.createdTime desc";
			query = em.createQuery(sql);
			query.setParameter("idMonitoring", idMonitoring);
			return query.getResultList();
		} else {
			return new ArrayList<YoutubePostMonitoring>();
		}
	}

	@Override
	public List<Object[]> getCountOfTermPostsPerDay(Long idMonitoring, Long date) {
		
		sql = "SELECT ypm.term, COUNT(ypm) FROM YoutubePostMonitoring ypm " +
				"WHERE ypm.monitoring.idMonitoring = :idMonitoring AND (ypm.retrievedDate >= :date AND ypm.retrievedDate < (:date + 86400)) " +
				"AND ypm.garbage = 'F' " +
				"GROUP BY ypm.term";

		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("date", date);
		
		List<Object[]> result = query.getResultList();
		
		return result;
	}
	
	@Override
	public Long getCountOfPostsPerDay(Long idMonitoring, Long date) {
		
		sql = "SELECT COUNT(ypm) FROM YoutubePostMonitoring ypm WHERE ypm.monitoring.idMonitoring = :idMonitoring " + 
				"AND (ypm.retrievedDate >= :date AND ypm.retrievedDate < (:date + 86400)) AND ypm.garbage = 'F'";

		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("date", date);

		return (Long) query.getSingleResult();
	}

	@Override
	public List<Object[]> getCountOfPostsPerHourDay(Long idMonitoring, Long date) {
		
		sql = "SELECT series.hour, count(ypm) FROM (SELECT generate_series(0,23)*1 AS hour) AS series " +
				"LEFT JOIN (SELECT ypm.* FROM opsocial.youtubepostsmonitorings as ypm INNER JOIN opsocial.monitorings AS m ON ypm.idmonitoring = m.idmonitoring " +
					"WHERE ypm.idmonitoring = " + idMonitoring + " AND (ypm.retrieveddate >= " + date + " AND ypm.retrieveddate < (" + date + " + 86400)) AND ypm.garbage = 'F') AS ypm ON " +
				"series.hour = date_part('hour', TO_TIMESTAMP(ypm.retrieveddate)::timestamp with time zone) " +
			  "GROUP BY series.hour " +
			  "ORDER BY series.hour";

		query = em.createNativeQuery(sql);
		
		List<Object[]> result = query.getResultList();
		
		return result;
	}
	
	@Override
	public List<Object[]> getCountQualificPostsPerDay(Long idMonitoring, Long date) {
		
		sql = "SELECT ypm.qualification, ypm.term, COUNT(*) FROM opsocial.youtubepostsmonitorings ypm WHERE ypm.idmonitoring = " + idMonitoring + " " + 
				"AND (ypm.retrieveddate >= " + date + " AND ypm.retrieveddate < (" + date + " + 86400)) AND ypm.garbage = 'F' AND ypm.qualification <> '' " + 
				"GROUP BY ypm.qualification, ypm.term";

		query = em.createNativeQuery(sql);

		try {
			return (List<Object[]>) query.getResultList();
		} catch (NoResultException e) {
			e.printStackTrace();
			return new ArrayList<Object[]>();
		}
	}
	
	@Override
	public List<Object[]> getCountTagsPostsPerDay(Long idMonitoring, Long date) {
		
		sql = "SELECT mpt.idtag, COUNT(*) FROM opsocial.youtubepostsmonitorings AS ypm " +
				"INNER JOIN opsocial.monitoringspoststags AS mpt ON " +
				"mpt.postid = ypm.videoid AND mpt.term = ypm.term AND mpt.idmonitoring = ypm.idmonitoring " + 
				"WHERE mpt.idmonitoring = " + idMonitoring + " AND (ypm.retrieveddate >= " + date + " AND ypm.retrieveddate < (" + date + " + 86400)) " + 
				"AND ypm.garbage = 'F' " +
				"GROUP BY mpt.idtag";

		query = em.createNativeQuery(sql);

		try {
			return (List<Object[]>) query.getResultList();
		} catch (NoResultException e) {
			e.printStackTrace();
			return new ArrayList<Object[]>();
		}
	}

	@Override
	public List<YoutubePostMonitoring> getByInterval(Long idMonitoring, Long startDate, Long endDate, 
			String qualification, List<Long> monitoringTags, List<String> monitoringTerms, List<String> monitoringWords, Integer offset, Integer limit) {
		
		if(monitoringWords != null) {
			
			sql = "SELECT ypm.idmonitoring, ypm.videoid, ypm.term, ypm.visible, ypm.qualification, ypm.retrieveddate, " +
					"ypm.garbage, ypm.createdtime, ypm.hashashtags, ypm.haslinks FROM opsocial.youtubepostsmonitorings ypm " +
					"JOIN opsocial.youtubeposts yp on (ypm.videoid = yp.videoid) " +
					"LEFT JOIN opsocial.monitoringspoststags AS mpt ON " +
					"(ypm.idmonitoring = mpt.idmonitoring AND ypm.term = mpt.term AND ypm.videoid = mpt.postid " +
					"AND mpt.network = '" + Profile.YOUTUBE + "') " +
					"WHERE ypm.idmonitoring = " + idMonitoring + " and " +
					"ypm.createdtime >= " + startDate + " and " +
					"ypm.createdtime <= " + endDate + " and " +
					"ypm.garbage = 'F'";

			sql += " and yp.videoid in ( "
				+ "Select yp2.videoid From opsocial.youtubeposts yp2 WHERE ";
			
			for(String w : monitoringWords) {
				if(!w.equals("")) { //TODO implementar regex melhor
					sql += "LOWER(yp2.description) LIKE LOWER('%" + w + "%') or " +
							"LOWER(yp2.title) LIKE LOWER('%" + w + "%') or ";
				}
			}

			sql = sql.substring(0, sql.lastIndexOf("or "));
			sql += ")";
			
		} else {
			sql = "Select ypm.idmonitoring, ypm.videoid, ypm.term, ypm.visible, ypm.qualification, ypm.retrieveddate, " +
					"ypm.garbage, ypm.createdtime, ypm.hashashtags, ypm.haslinks From opsocial.youtubepostsmonitorings ypm " +
					"LEFT JOIN opsocial.monitoringspoststags AS mpt ON " +
					"(ypm.idmonitoring = mpt.idmonitoring AND ypm.term = mpt.term AND ypm.videoid = mpt.postid " +
					"AND mpt.network = '" + Profile.YOUTUBE + "') " +
					"WHERE ypm.idmonitoring = " + idMonitoring + " and " +
					"ypm.createdtime >= " + startDate + " and " +
					"ypm.createdtime <= " + endDate + " and " +
					"ypm.garbage = 'F'";
		}
		
		if(monitoringTerms != null) {
			
			sql += " and (";
			
			for(String t : monitoringTerms) {
				sql += " ypm.term = '" + t + "' or";	
			}
			
			sql = sql.substring(0, sql.lastIndexOf("or"));
			
			sql += ")";
		}
		
		if(qualification != null) {
			
			sql += " and (";
			
			String[] arrayQualification = qualification.split(";");
			
			for(String q : arrayQualification) {
				if(q.equals("Q")) {
					sql += " ypm.qualification is null or";
				} else {
					sql += " ypm.qualification = '" + q + "' or";	
				} 
			}
			
			sql = sql.substring(0, sql.lastIndexOf("or"));
			
			sql += ")";
		}
		
		if(monitoringTags != null && !monitoringTags.isEmpty()) {
			
			String monitoringTagsIn = " AND mpt.idtag IN(";
			
			monitoringTagsIn = monitoringTagsIn.concat(""+monitoringTags.get(0)+"");
			for(int i = 1; i < monitoringTags.size(); i++) {
				monitoringTagsIn = monitoringTagsIn.concat(","+monitoringTags.get(i)+"");
			}
			
			monitoringTagsIn = monitoringTagsIn.concat(")");
			
			sql += monitoringTagsIn;
		}
		
		sql += " GROUP BY ypm.idmonitoring, ypm.videoid, ypm.term, ypm.visible, ypm.qualification, ypm.retrieveddate, " +
				"ypm.garbage, ypm.createdtime, ypm.hashashtags, ypm.haslinks";
			
		sql += " order by ypm.createdtime desc";
		
		query = em.createNativeQuery(sql);
		query.setFirstResult(offset * 50);
		query.setMaxResults(limit);
		
		List<YoutubePostMonitoring> youtubePostsMonitorings = new ArrayList<YoutubePostMonitoring>();
		
		List<Object[]> result = query.getResultList();

		Monitoring monitoring = new Monitoring();
		sql = "SELECT mn FROM Monitoring mn WHERE mn.idMonitoring=" + idMonitoring;
		query = em.createQuery(sql);
		monitoring = (Monitoring) query.getSingleResult();
		
		for (Object[] object : result) {
			
			YoutubePostMonitoring youtubePostMonitoring = new YoutubePostMonitoring();
			
			YoutubePost youtubePost = new YoutubePost();
			String videoId = (String) object[1];
			sql = "SELECT yp FROM YoutubePost yp WHERE yp.videoId = :videoId"; 
			query = em.createQuery(sql);
			query.setParameter("videoId", videoId);
			youtubePost = (YoutubePost) query.getSingleResult();
			
			youtubePostMonitoring.setMonitoring(monitoring);
			youtubePostMonitoring.setYoutubePost(youtubePost); //TODO ver os que podem ser null
			youtubePostMonitoring.setTerm((String) object[2]);
			youtubePostMonitoring.setVisible(((String) object[3]).charAt(0));
			youtubePostMonitoring.setQualification(object[4] != null ? ((String) object[4]).charAt(0) : null);
			youtubePostMonitoring.setRetrievedDate(object[5] != null ? ((Long) object[5]) : null);
			youtubePostMonitoring.setGarbage(((String) object[6]).charAt(0));
			youtubePostMonitoring.setCreatedTime(object[7] != null ? ((Long) object[7]) : null);
			youtubePostMonitoring.setHasHashTags(object[8] != null ? ((Boolean) object[8]) : null);
			youtubePostMonitoring.setHasLinks(object[9] != null ? ((Boolean) object[9]) : null);
			
			youtubePostsMonitorings.add(youtubePostMonitoring);
		}
		
		return youtubePostsMonitorings;
	}

	@Override
	public Long getByIntervalCount(Long idMonitoring, Long startDate,
			Long endDate, String qualification, List<Long> monitoringTags, List<String> monitoringTerms, List<String> monitoringWords) {
		
		Long postsCount = 0L;
		
		if(monitoringWords != null) {
			
			sql = "SELECT count(distinct(ypm)) FROM opsocial.youtubepostsmonitorings AS ypm " + 
					"JOIN opsocial.youtubeposts AS yp ON (yp.videoid = ypm.videoid)" +
					"LEFT JOIN opsocial.monitoringspoststags AS mpt ON " +
					"(ypm.idmonitoring = mpt.idmonitoring AND ypm.term = mpt.term AND ypm.videoid = mpt.postid " +
					"AND mpt.network = '" + Profile.YOUTUBE + "') " +
				"WHERE ypm.idmonitoring = " + idMonitoring + " AND ypm.createdtime >= " + startDate + " AND " +
				"ypm.createdtime <= " + endDate + " AND ypm.garbage = 'F'";
			
			sql += " AND yp.videoid IN ( "
					+ "SELECT yp2.videoid FROM opsocial.youtubeposts yp2 WHERE ";
				
			for(String w : monitoringWords) {
				if(!w.equals("")) { //TODO implementar regex melhor
					sql += "LOWER(yp2.description) LIKE LOWER('%" + w + "%') or LOWER(yp2.title) LIKE LOWER('%" + w + "%') or ";
				}
			}
	
			sql = sql.substring(0, sql.lastIndexOf("or "));
			sql += ")";
			
		} else {
			sql = "SELECT count(distinct(ypm)) FROM opsocial.youtubepostsmonitorings AS ypm " + 
					"LEFT JOIN opsocial.monitoringspoststags AS mpt ON " +
					"(ypm.idmonitoring = mpt.idmonitoring AND ypm.term = mpt.term AND ypm.videoid = mpt.postid " +
					"AND mpt.network = '" + Profile.YOUTUBE + "' " +
				") WHERE ypm.idmonitoring = " + idMonitoring + " AND ypm.createdtime >= " + startDate + " AND " +
				"ypm.createdtime <= " + endDate + " AND ypm.garbage = 'F'";
		}
		
		if(monitoringTerms != null) {
			
			sql += " AND (";
			
			for(String t : monitoringTerms) {
				sql += " ypm.term = '" + t + "' or";	
			}
			
			sql = sql.substring(0, sql.lastIndexOf("or"));
			
			sql += ")";
		}
		
		if(qualification != null) {
			
			sql += " and (";
			
			String[] arrayQualification = qualification.split(";");
			
			for(String q : arrayQualification) {
				if(q.equals("Q")) {
					sql += " ypm.qualification is null or";
				} else {
					sql += " ypm.qualification = '" + q + "' or";	
				} 
			}
			
			sql = sql.substring(0, sql.lastIndexOf("or"));
			
			sql += ")";
		}
		
		if(monitoringTags != null && !monitoringTags.isEmpty()) {
			
			String monitoringTagsIn = "AND mpt.idtag IN(";
			
			monitoringTagsIn = monitoringTagsIn.concat(""+monitoringTags.get(0)+"");
			for(int i = 1; i < monitoringTags.size(); i++) {
				monitoringTagsIn = monitoringTagsIn.concat(","+monitoringTags.get(i)+"");
			}
			
			monitoringTagsIn = monitoringTagsIn.concat(")");
			
			sql += monitoringTagsIn;
		}
		
		query = em.createNativeQuery(sql);
		
		postsCount = (Long) query.getSingleResult(); 
		
		return postsCount;
	}
	
	@Override
	public List<YoutubePostMonitoring> listPostsByActiveAccount(Date now, Long from, Long until) {
		
		sql = "Select y From YoutubePostMonitoring y where " +
				"((y.monitoring.account.testExpire > :now and y.monitoring.account.planType = 0)" +
				" or " +
				"(y.monitoring.account.planExpire > :now and y.monitoring.account.planType <> 0)) " +
				"and y.youtubePost.publishedAt between :from and :until";
		
		query = em.createQuery(sql);
		query.setParameter("from", from);
		query.setParameter("until", until);
		query.setParameter("now", now);
		
		return query.getResultList();
	}
	
	@Override
	public YoutubePostMonitoring merge(YoutubePostMonitoring youtubePostMonitoring) throws Exception {

		YoutubePostMonitoringId youtubePostMonitoringId = new YoutubePostMonitoringId();
		youtubePostMonitoringId.setYoutubePost(youtubePostMonitoring.getYoutubePost().getVideoId());
		youtubePostMonitoringId.setMonitoring(youtubePostMonitoring.getMonitoring().getIdMonitoring());
		youtubePostMonitoringId.setTerm(youtubePostMonitoring.getTerm());

		YoutubePostMonitoring objTmp = getById(youtubePostMonitoringId);

		try {
			validateVersion(objTmp, youtubePostMonitoring);
		} catch (IllegalStateException ex) {
			throw new OptimisticLockException();
		}

		em.merge(youtubePostMonitoring);
		youtubePostMonitoring = getById(youtubePostMonitoringId);
		
		this.flush();

		return youtubePostMonitoring;
	}
	
	@Override
	public List<YoutubePostMonitoring> listByMonitoring(Long idMonitoring) {
		sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring";
		
		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);

		return query.getResultList();
	}

	@Override
	public List<YoutubePostMonitoring> listByTerm(String term, Long idMonitoring) {

		sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring and y.term = :term";
		
		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("term", term);

		return query.getResultList();
	}

	@Override
	public YoutubePostMonitoring getByComposedId(Long idMonitoring,
			String videoId, String term) {
		
		sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring and y.term = :term and y.youtubePost.videoId = :videoId";
		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("term", term);
		query.setParameter("videoId", videoId);
		
		return (YoutubePostMonitoring) query.getSingleResult();
	}

	@Override
	public Long getCountOfGarbagePostsPerDay(Long idMonitoring, Long date) {
		
		sql = "SELECT COUNT(y) FROM YoutubePostMonitoring y WHERE y.monitoring.idMonitoring = :idMonitoring " + 
				"AND (y.retrievedDate >= :date AND y.retrievedDate < (:date + 86400)) AND y.garbage = 'T'";

		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("date", date);

		try {
			return (Long) query.getSingleResult();
		} catch (NoResultException e) {
			e.printStackTrace();
			return 0L;
		}
	}
	
	@Override
	public YoutubePostMonitoring getByComposedId(Long idMonitoring, String videoId) {
		
		sql = "Select y From YoutubePostMonitoring y where y.monitoring.idMonitoring = :idMonitoring and y.youtubePost.videoId = :videoId";
		query = em.createQuery(sql);
		query.setParameter("idMonitoring", idMonitoring);
		query.setParameter("videoId", videoId);
		
		if(!query.getResultList().isEmpty()) {
			return (YoutubePostMonitoring) query.getSingleResult();
		} else {
			return null;
		}
	}
	
	@Override
	public List<YoutubePostMonitoring> listSample(Long idMonitoring, Long startDate, Long endDate, String qualification, List<Long> monitoringTags, Integer sample, List<String> notIn) {
		
		sql = "Select * From opsocial.youtubepostsmonitorings ypm where " +
				"ypm.idMonitoring = " + idMonitoring + " and " +
				"ypm.createdTime >= " + startDate +" and " +
				"ypm.createdTime <= " + endDate +" and " +
				"ypm.garbage='F' ";
				
		if(qualification != null) {
			
			sql += "and (";
			
			String[] arrayQualification = qualification.split(";");
			
			for(String q : arrayQualification) {
				if(q.equals("null") || q.equals("Q")) {
					sql += " ypm.qualification is null or";
				} else {
					sql += " ypm.qualification = '" + q + "' or";	
				} 
			}
			
			sql = sql.substring(0, sql.lastIndexOf("or"));
			
			sql += ")";
		}
		
		if(!notIn.isEmpty()) {
			
			sql += "and videoid not in (";
			
			for(String postId : notIn) {
				sql += "'" + postId + "',";
			}
			
			sql = sql.substring(0,sql.lastIndexOf(","));
			
			sql += ")";
		}
		
		sql += " order by random(), createdtime desc limit " + sample;
		
		query = em.createNativeQuery(sql, YoutubePostMonitoring.class);
		
		@SuppressWarnings("unchecked")
		List<YoutubePostMonitoring> youtubePostMonitorings = (List<YoutubePostMonitoring>) query.getResultList(); 
		
		if(monitoringTags != null && !monitoringTags.isEmpty()) {
			
			List<YoutubePostMonitoring> youtubePostsMonitoringToExclude = new ArrayList<YoutubePostMonitoring>();
			
			for(YoutubePostMonitoring youtubePostMonitoring : youtubePostMonitorings) {
				
				try {
					
					MaintenanceMonitoringPostTagRemote monitoringPostTagRemote = (MaintenanceMonitoringPostTagRemote) 
							new InitialContext().lookup("global/OpSocialBack/MaintenanceMonitoringPostTagBean!br.com.opsocial.ejb.das.MaintenanceMonitoringPostTagRemote");
					
					if(!monitoringPostTagRemote.thereIsMonitoringTag(youtubePostMonitoring.getYoutubePost().getVideoId(), 
							youtubePostMonitoring.getMonitoring().getIdMonitoring(), youtubePostMonitoring.getTerm(), 
							Profile.YOUTUBE, monitoringTags)) {
						youtubePostsMonitoringToExclude.add(youtubePostMonitoring);
					}
					
				} catch (NamingException e) {
					e.printStackTrace();
				}
			}
			
			youtubePostMonitorings.removeAll(youtubePostsMonitoringToExclude);
		}
		
		return youtubePostMonitorings;
	}

	@Override
	public List<YoutubePostMonitoring> listSamePosts(Long idMonitoring,
			String description) {
		
		sql = "select * from opsocial.youtubepostsmonitorings where idmonitoring=" + idMonitoring +  
				" and videoid in (select videoid from opsocial.youtubeposts where description='" + description + "')";
		
		query = em.createNativeQuery(sql,YoutubePostMonitoring.class);
		
		return query.getResultList();
	}

}
