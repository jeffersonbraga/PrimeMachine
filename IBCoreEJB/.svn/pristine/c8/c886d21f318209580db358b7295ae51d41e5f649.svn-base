package br.com.opsocial.ejb.dao;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.NoResultException;

import br.com.opsocial.ejb.dao.generic.AbstractDAOImpl;
import br.com.opsocial.ejb.entity.instagram.InstagramCommentCompareDTO;
import br.com.opsocial.ejb.entity.instagram.InstagramFollowerTrend;
import br.com.opsocial.ejb.entity.instagram.InstagramReport;
import br.com.opsocial.ejb.entity.instagram.InstagramSimpleDataDTO;
import br.com.opsocial.ejb.utils.reports.UtilReports;

@Stateless
public class InstagramReportDAOImpl extends AbstractDAOImpl<InstagramReport> implements InstagramReportDAO {

	@Override
	public InstagramReport getEntity(String idInstagramUser, String property, Long date) {
		
		sql = "SELECT ir FROM InstagramReport ir WHERE ir.idInstagramUser = :idInstagramUser " +
				"AND ir.property = :property " +
				"AND ir.date = :date";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", idInstagramUser);
		query.setParameter("property", property);
		query.setParameter("date", date);

		try {
			return (InstagramReport) query.getSingleResult();
		} catch (Exception e) {
			return null;
		}
	}
	
	@Override
	public InstagramReport getEntity(String idInstagramUser, String property, String label) {
		
		sql = "SELECT ir FROM InstagramReport ir WHERE ir.idInstagramUser = :idInstagramUser " +
				"AND ir.property = :property " +
				"AND ir.label = :label";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", idInstagramUser);
		query.setParameter("property", property);
		query.setParameter("label", label);

		try {
			return (InstagramReport) query.getSingleResult();
		} catch (Exception e) {
			return null;
		}
	}	

	@Override
	public InstagramReport getEntityBeforeDate(String idInstagramUser, String property, Long date) {
		
		sql = "SELECT ir FROM InstagramReport ir WHERE ir.idInstagramUser = :idInstagramUser " +
				"AND ir.property = :property " +
				"AND ir.date < :date " +
				"ORDER BY ir.date DESC";
		
		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", idInstagramUser);
		query.setParameter("property", property);
		query.setParameter("date", date);
		query.setFirstResult(0);
		query.setMaxResults(1);
		
		try {
			return (InstagramReport) query.getSingleResult();
		} catch (NoResultException e) {
			return new InstagramReport();
		}
	}

	@Override
	public List<InstagramFollowerTrend> getInstagramFollowersTrends(String idInstagramUser, Long dateFrom, Long dateUntil) {
		
		sql = "SELECT date, ir.value FROM opsocial.instagramreports AS ir " +
				"WHERE ir.idinstagramUser = '" + idInstagramUser + "' AND ir.property = '" + UtilReports.PROFILE_FOLLOWERS_ADDS + "' " +
						"AND (ir.date >= " + dateFrom + " AND ir.date <= " + dateUntil + ") " +
				"ORDER BY ir.date";
		
		query = em.createNativeQuery(sql);
		
		List<Object[]> resultFollowersAdds = query.getResultList();
		
		sql = "SELECT date, ir.value FROM opsocial.instagramreports AS ir " +
				"WHERE ir.idinstagramUser = '" + idInstagramUser + "' AND ir.property = '" + UtilReports.PROFILE_FOLLOWERS_REMOVES + "' " +
						"AND (ir.date >= " + dateFrom + " AND ir.date <= " + dateUntil + ") " +
				"ORDER BY ir.date";

		query = em.createNativeQuery(sql);
		
		List<Object[]> resultFollowersRemoves = query.getResultList();
		
		List<InstagramFollowerTrend> instagramFollowerTrends = new ArrayList<InstagramFollowerTrend>();
		
		int x = 0;
		for (Object[] object : resultFollowersAdds) {
			
			InstagramFollowerTrend instagramFollowerTrend = new InstagramFollowerTrend();
			instagramFollowerTrend.setDate((Long) object[0]);
			instagramFollowerTrend.setNewFollowers(((Integer) object[1]).longValue());
			instagramFollowerTrend.setUnfollowers(((Integer) resultFollowersRemoves.get(x)[1]).longValue());
			instagramFollowerTrend.setBalanceFollowers(instagramFollowerTrend.getNewFollowers() - instagramFollowerTrend.getUnfollowers());
			
			instagramFollowerTrends.add(instagramFollowerTrend);
			x++;
		}
		
		return instagramFollowerTrends;
	}

	@Override
	public InstagramFollowerTrend getInstagramFollowersTrend(String idInstagramUser, Long dateFrom, Long dateUntil) {
		
		sql = "SELECT SUM(ir.value) FROM opsocial.instagramreports AS ir " +
				"WHERE ir.idinstagramUser = '" + idInstagramUser + "' AND ir.property = '" + UtilReports.PROFILE_FOLLOWERS_ADDS + "' " +
						"AND (ir.date >= " + dateFrom + " AND ir.date <= " + dateUntil + ")";
		
		query = em.createNativeQuery(sql);
		
		Long followersAdds = (Long) query.getSingleResult();
		
		sql = "SELECT SUM(ir.value) FROM opsocial.instagramreports AS ir " +
				"WHERE ir.idinstagramUser = '" + idInstagramUser + "' AND ir.property = '" + UtilReports.PROFILE_FOLLOWERS_REMOVES + "' " +
						"AND (ir.date >= " + dateFrom + " AND ir.date <= " + dateUntil + ")";

		query = em.createNativeQuery(sql);
		
		Long followersRemoves = (Long) query.getSingleResult();
		
		InstagramFollowerTrend instagramFollowerTrend = new InstagramFollowerTrend();
		try {
			
			instagramFollowerTrend.setNewFollowers(followersAdds);
			instagramFollowerTrend.setUnfollowers(followersRemoves);
			instagramFollowerTrend.setBalanceFollowers(followersAdds - followersRemoves);

		} catch (Exception e) {

			instagramFollowerTrend.setNewFollowers(0L);
			instagramFollowerTrend.setUnfollowers(0L);
			instagramFollowerTrend.setBalanceFollowers(0L);
		}
		
		return instagramFollowerTrend;
	}

	@Override
	public List<InstagramReport> getAudiencesFollowersTrend(String networkId, Long dateFromVerified, Long dateUntil) {

		sql = "select ir FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and (ir.property = 'profile_followers' or ir.property = 'profile_followers_adds' or ir.property = 'profile_followers_removes') order by ir.idInstagramUser, ir.date, ir.property";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			return (List<InstagramReport>) query.getResultList();
		} catch (NoResultException e) {
			return null;
		}
	}

	@SuppressWarnings("rawtypes")
	@Override
	public List<InstagramReport> getAudiencesDemograph(String networkId, Long dateFromVerified, Long dateUntil) {

		//sql = "select ir FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and (ir.property = 'age_men' or ir.property = 'age_women' or ir.property = 'age_all') order by ir.idInstagramUser, ir.date, ir.property, ir.label";
		sql = "select ir.property,  ir.label, avg(ir.value) as valor from InstagramReport ir where ir.idInstagramUser = :idInstagramUser and (ir.property = 'age_men' or ir.property = 'age_women') AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") group by ir.property,  ir.label order by ir.property, ir.label";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramReport item = new InstagramReport();
				item.setProperty((String) o[0]);
				item.setLabel((String) o[1]);
				item.setValue(((Double) o[2]).longValue());
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramReport> getAudiencesTopCountry(String networkId, Long dateFromVerified, Long dateUntil) {

		sql = "select  ir.label, avg(ir.value) as valor FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and ir.property = 'location_countries' group by ir.label order by valor desc";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {

			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramReport item = new InstagramReport();
				item.setLabel((String) o[0]);
				item.setValue(((Double) o[1]).longValue());
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramReport> getAudiencesTopCity(String networkId, Long dateFromVerified, Long dateUntil) {

		sql = "select ir.label, avg(ir.value) as valor FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and ir.property = 'location_cities' group by ir.label order by valor desc";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {

			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramReport item = new InstagramReport();
				item.setLabel((String) o[0]);
				item.setValue(((Double) o[1]).longValue());
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramReport> getAudiencesOnlineFollowersByHour(String networkId, Long dateFromVerified,
			Long dateUntil) {

		sql = "select ir.property, 	CAST(SUBSTRING(ir.label, 0, LENGTH(ir.label)) AS INTEGER) as label, avg(ir.value) as valor FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and ir.property = 'follower_activity_Horas' group by ir.property, ir.label order by label";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			Calendar c = Calendar.getInstance();
			c.setTimeInMillis(new Long(0));
			for (Object[] o : l) {

				c.setTimeInMillis(new Long(0));
				c.set(Calendar.HOUR_OF_DAY, ((Integer) o[1]));
				InstagramReport item = new InstagramReport();
				item.setProperty((String) o[0]);
				item.setLabel(((Integer) o[1]).toString());
				item.setValue(((Double) o[2]).longValue());
				item.setDate(c.getTimeInMillis());
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramReport> getAudiencesOnlineFollowersByDay(String networkId, Long dateFromVerified,
			Long dateUntil) {

		sql = "select ir.property, ir.dayWeek, avg(ir.value) as valor "
				+ "FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser "
				+ "AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") "
				+ "AND ir.property = 'follower_activity_Horas' group by ir.property, ir.dayWeek";
		//sql = "select ir FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and ir.property = 'follower_activity_Dias' order by ir.idInstagramUser, ir.day_week";

		query = em.createQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramReport item = new InstagramReport();
				item.setProperty((String) o[0]);
				String day = (String) o[1];
				if (day.equals("Domingos")) {
					day = "DOM";
				} else if (day.equals("Segundas-feiras")) {
					day = "SEG";
				} else if (day.equals("Terças-feiras")) {
					day = "TER";
				} else if (day.equals("Quartas-feiras")) {
					day = "QUA";
				} else if (day.equals("Quintas-feiras")) {
					day = "QUI";
				} else if (day.equals("Sextas-feiras")) {
					day = "SEX";
				} else if (day.equals("Sábados")) {
					day = "SAB";
				}
				
				item.setLabel(day);
				item.setValue(((Double) o[2]).longValue());
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramReport> getAudiencesPostsInteraction(String networkId, Long dateFromVerified, Long dateUntil) {
		return null;
	}

	@Override
	public List<InstagramReport> getLikesPerDayFollowers(String networkId, Long dateFromVerified, Long dateUntil){

		sql = "SELECT count(*), extract('epoch' from date_trunc('day', TO_TIMESTAMP(irp.createtime)::timestamp with time zone))::bigint AS day "
				+ "FROM opsocial.instagramreportsposts AS irp INNER JOIN opsocial.instagrampostslikes AS ipl ON ipl.idmedia = irp.idmedia "
				+ "WHERE irp.idinstagramuser = '" + networkId + "' AND (irp.createtime >= " + dateFromVerified + " AND irp.createtime < " + dateUntil + " + 86400) "
					+ "AND ipl.idinstagramuser IN (SELECT ifl.followerid::text FROM opsocial.instagramfollowers AS ifl "
					+ "WHERE ifl.idprofile = '" + Long.valueOf(networkId) + "' ) group by day order by day";
		//sql = "select ir FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and ir.property = 'follower_activity_Dias' order by ir.idInstagramUser, ir.day_week";

		query = em.createNativeQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramReport item = new InstagramReport();
				item.setValue((Long) o[0]);
				item.setDate((Long) o[1]);
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramReport> getLikesPerDayNoFollowers(String networkId, Long dateFromVerified, Long dateUntil){

		sql = "SELECT count(*), extract('epoch' from date_trunc('day', TO_TIMESTAMP(irp.createtime)::timestamp with time zone))::bigint AS day "
				+ "FROM opsocial.instagramreportsposts AS irp INNER JOIN opsocial.instagrampostslikes AS ipl ON ipl.idmedia = irp.idmedia "
				+ "WHERE irp.idinstagramuser = '" + networkId + "'  AND (irp.createtime >= " + dateFromVerified + " AND irp.createtime < " + dateUntil + " + 86400) "
						+ "AND NOT EXISTS (SELECT 1 FROM opsocial.instagramfollowers AS ifl WHERE ifl.idprofile = '" + Long.valueOf(networkId) + "' "
								+ "AND ifl.followerid::text = ipl.idinstagramuser ) group by day order by day";
		//sql = "select ir FROM InstagramReport ir where ir.idInstagramUser = :idInstagramUser AND (ir.date >= " + dateFromVerified + " AND ir.date <= " + dateUntil + ") and ir.property = 'follower_activity_Dias' order by ir.idInstagramUser, ir.day_week";

		query = em.createNativeQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramReport> dataReport = new ArrayList<InstagramReport>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramReport item = new InstagramReport();
				item.setValue((Long) o[0]);
				item.setDate((Long) o[1]);
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}

	@Override
	public List<InstagramCommentCompareDTO> getCommentsPerDay(String networkId, Long dateFromVerified, Long dateUntil){

		sql = "SELECT x.day AS dateCompare, sum(x.sumcommentsFol) AS followerComments, sum(x.sumcommentsNoFol) AS noFollowerComments "
				+ "FROM ((SELECT extract('epoch' from date_trunc('day', TO_TIMESTAMP(irp.createtime)::timestamp with time zone))::bigint AS day, "
				+ "COALESCE(SUM(irp.comments), 0) AS sumcommentsFol, 0 as sumcommentsNoFol FROM opsocial.instagramreportsposts AS irp "
				+ "INNER JOIN opsocial.instagrampostscomments AS ipl ON ipl.idmedia = irp.idmedia WHERE irp.idinstagramuser = '" + networkId + "'  "
				+ "AND (irp.createtime >= " + dateFromVerified + " AND irp.createtime < " + dateUntil + " + 86400) "
				+ "AND ipl.idinstagramuser IN (SELECT ifl.followerid::text FROM opsocial.instagramfollowers AS ifl "
				+ "WHERE ifl.idprofile = '" + networkId + "') GROUP BY day ORDER BY day) "
				+ "UNION ALL (SELECT extract('epoch' from date_trunc('day', TO_TIMESTAMP(irp.createtime)::timestamp with time zone))::bigint AS day, 0 as sumcommentsFol, "
				+ "COALESCE(SUM(irp.comments), 0) AS sumcommentsNoFol FROM opsocial.instagramreportsposts AS irp "
				+ "INNER JOIN opsocial.instagrampostscomments AS ipl ON ipl.idmedia = irp.idmedia WHERE irp.idinstagramuser = '" + networkId + "' "
				+ "AND (irp.createtime >= " + dateFromVerified + " AND irp.createtime < " + dateUntil + " + 86400) AND ipl.idinstagramuser "
				+ "NOT IN (SELECT ifl.followerid::text FROM opsocial.instagramfollowers AS ifl WHERE ifl.idprofile = '" + networkId + "' ) "
				+ "GROUP BY day ORDER BY day)  ORDER BY day) x GROUP BY x.day";

		query = em.createNativeQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramCommentCompareDTO> dataReport = new ArrayList<InstagramCommentCompareDTO>();
			List<Object[]> l = (List<Object[]>) query.getResultList();

			for (Object[] o : l) {

				InstagramCommentCompareDTO item = new InstagramCommentCompareDTO();
				item.setDateCompare((Long) o[0]);
				item.setFollowerComments((BigDecimal) o[1]);
				item.setNoFollowerComments((BigDecimal) o[2]);
				dataReport.add(item);
			}

			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public InstagramSimpleDataDTO getAudiencesAveragePublicAge(String networkId, Long dateFromVerified, Long dateUntil){

		sql = "SELECT instagramreports.label AS key, AVG(instagramreports.value) AS value FROM opsocial.instagramreports "
				+ "WHERE instagramreports.idinstagramuser = '" + networkId + "' AND instagramreports.property = 'age_all' "
				+ "GROUP BY instagramreports.label ORDER BY value DESC LIMIT 1";

		query = em.createNativeQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramCommentCompareDTO> dataReport = new ArrayList<InstagramCommentCompareDTO>();
			Object[] l = (Object[]) query.getSingleResult();

			InstagramSimpleDataDTO result = new InstagramSimpleDataDTO();
			result.setKey(l[0]);
			result.setValue(l[1]);
			
			return result;
		} catch (NoResultException e) {
			return null;
		}
	}
	
	public List<InstagramSimpleDataDTO> getAudiencesAveragePublicGender(String networkId, Long dateFromVerified, Long dateUntil) {

		sql = "SELECT instagramreports.label, AVG(instagramreports.value) AS value FROM opsocial.instagramreports WHERE "
				+ "instagramreports.idinstagramuser = '" + networkId + "' AND instagramreports.property = 'gender_' "
				+ "GROUP BY instagramreports.label ORDER BY instagramreports.label asc";

		query = em.createNativeQuery(sql);
		query.setParameter("idInstagramUser", networkId);

		try {
			List<InstagramSimpleDataDTO> dataReport = new ArrayList<InstagramSimpleDataDTO>();
			List<Object[]> l = (List<Object[]>) query.getResultList();
			for (Object[] o : l) {

				InstagramSimpleDataDTO item = new InstagramSimpleDataDTO();
				item.setKey(o[0]);
				item.setValue(o[1]);
				dataReport.add(item);
			}
			return dataReport;
		} catch (NoResultException e) {
			return null;
		}
	}
}