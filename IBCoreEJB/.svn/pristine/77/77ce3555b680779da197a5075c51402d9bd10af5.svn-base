package br.com.opsocial.ejb.das;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;

import br.com.opsocial.ejb.dao.TwitterPostMonitoringDAO;
import br.com.opsocial.ejb.dao.generic.AbstractDAO;
import br.com.opsocial.ejb.das.generic.AbstractDASImpl;
import br.com.opsocial.ejb.entity.twitter.TwitterPostMonitoring;

@Stateless
public class MaintenanceTwitterPostMonitoringBean extends AbstractDASImpl<TwitterPostMonitoring> implements MaintenanceTwitterPostMonitoringRemote {

	private static final long serialVersionUID = 1L; 

	@EJB
	TwitterPostMonitoringDAO dao;

	@Override
	public TwitterPostMonitoringDAO getDAO() {
		return dao;
	}

	@Override
	public Long getCountOfPosts(Long idMonitoring, Long dateFrom, Long dateUntil) {
		return dao.getCountOfPosts(idMonitoring, dateFrom, dateUntil);
	}

	@Override
	public void setDao(AbstractDAO<TwitterPostMonitoring> dao) {
		this.dao = (TwitterPostMonitoringDAO) dao;
	}

	@Override
	public AbstractDAO<TwitterPostMonitoring> getDao() {
		return dao;
	}

	@Override
	public List<TwitterPostMonitoring> listMostRecents(Long idMonitoring,
			Integer maxResults) {
		return dao.listMostRecents(idMonitoring, maxResults);
	}

	@Override
	public List<TwitterPostMonitoring> listMostRecents(Long createdAt,
			Long idMonitoring) {
		return dao.listMostRecents(createdAt, idMonitoring);
	}

	@Override
	public List<TwitterPostMonitoring> listElder(Long createdAt,
			Long idMonitoring, Integer maxResults) {
		return dao.listElder(createdAt, idMonitoring, maxResults);
	}
	
	@Override
	public List<Object[]> getCountOfTermPostsPerDay(Long idMonitoring, Long date) {
		return dao.getCountOfTermPostsPerDay(idMonitoring, date);
	}

	@Override
	public Long getCountOfPostsPerDay(Long idMonitoring, Long date) {
		return dao.getCountOfPostsPerDay(idMonitoring, date);
	}

	@Override
	public List<Object[]> getCountOfPostsPerHourDay(Long idMonitoring, Long date) {
		return dao.getCountOfPostsPerHourDay(idMonitoring, date);
	}

	@Override
	public List<TwitterPostMonitoring> getByInterval(Long idMonitoring, Long startDate, Long endDate, String qualification, List<Long> monitoringTags, List<String> monitoringTerms, List<String> monitoringWords, Integer offset, Integer limit) {
		return dao.getByInterval(idMonitoring, startDate, endDate, qualification, monitoringTags, monitoringTerms, monitoringWords, offset, limit);
	}

	@Override
	public Long getByIntervalCount(Long idMonitoring, Long startDate, Long endDate, String qualification, List<Long> monitoringTags, List<String> monitoringTerms, List<String> monitoringWords) {
		return dao.getByIntervalCount(idMonitoring, startDate, endDate, qualification, monitoringTags, monitoringTerms, monitoringWords);
	}

	@Override
	public List<TwitterPostMonitoring> listByMonitoring(Long idMonitoring) {
		return dao.listByMonitoring(idMonitoring);
	}

	@Override
	public List<TwitterPostMonitoring> listByTerm(String term, Long idMonitoring) {
		return dao.listByTerm(term, idMonitoring);
	}

	@Override
	public TwitterPostMonitoring getByComposedId(Long idMonitoring,
			Long statusId, String term) {
		return dao.getByComposedId(idMonitoring, statusId, term);
	}

	@Override
	public TwitterPostMonitoring getByComposedId(Long idMonitoring,
			Long statusId) {
		return dao.getByComposedId(idMonitoring, statusId);
	}

	@Override
	public List<Object[]> getCountQualificPostsPerDay(Long idMonitoring,Long date) {
		return dao.getCountQualificPostsPerDay(idMonitoring, date);
	}

	@Override
	public List<Object[]> getCountTagsPostsPerDay(Long idMonitoring, Long date) {
		return dao.getCountTagsPostsPerDay(idMonitoring, date);
	}

	@Override
	public List<TwitterPostMonitoring> listSample(Long idMonitoring,
			Long startDate, Long endDate, String qualification,
			List<Long> monitoringTags, Integer sample, List<String> notIn) {
		return dao.listSample(idMonitoring, startDate, endDate, qualification, monitoringTags, sample, notIn);
	}

	@Override
	public List<TwitterPostMonitoring> listByRetweedStatus(Long idMonitoring, Long statusId, Long retweedtedStatus) {
		return dao.listByRetweedStatus(idMonitoring, statusId, retweedtedStatus);
	}

	@Override
	public List<String> listTwitterPostsText(Long idMonitoring, Long startDate, Long endDate, Long limit) {
		return dao.listTwitterPostsText(idMonitoring, startDate, endDate, limit);
	}

	@Override
	public List<String> listTwitterPostsText(Long idMonitoring, Long startDate, Long endDate, Long limit, Character qualification) {
		return dao.listTwitterPostsText(idMonitoring, startDate, endDate, limit, qualification);
	}

	@Override
	public List<TwitterPostMonitoring> getTwitterPostsByUser(Long idMonitoring, Long userId, Long dateFrom, Long dateUntil) {
		return dao.getTwitterPostsByUser(idMonitoring, userId, dateFrom, dateUntil);
	}
}
